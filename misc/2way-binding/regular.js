/* App.svelte generated by Svelte v4.2.18 */
import {
	SvelteComponent,
	append,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "svelte/internal";

import "svelte/internal/disclose-version";
import Nested from './Nested.svelte';

function create_fragment(ctx) {
	let p0;
	let t0;
	let t1;
	let t2;
	let p1;
	let t3;
	let t4;
	let t5;
	let nested;
	let current;
	let mounted;
	let dispose;

	nested = new Nested({
			props: {
				first: /*first*/ ctx[0],
				second: /*second*/ ctx[1]
			}
		});

	return {
		c() {
			p0 = element("p");
			t0 = text("OUTSIDE first: ");
			t1 = text(/*first*/ ctx[0]);
			t2 = space();
			p1 = element("p");
			t3 = text("OUTSIDE second: ");
			t4 = text(/*second*/ ctx[1]);
			t5 = space();
			create_component(nested.$$.fragment);
		},
		m(target, anchor) {
			insert(target, p0, anchor);
			append(p0, t0);
			append(p0, t1);
			insert(target, t2, anchor);
			insert(target, p1, anchor);
			append(p1, t3);
			append(p1, t4);
			insert(target, t5, anchor);
			mount_component(nested, target, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(p0, "click", /*click_handler*/ ctx[2]),
					listen(p1, "click", /*click_handler_1*/ ctx[3])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*first*/ 1) set_data(t1, /*first*/ ctx[0]);
			if (!current || dirty & /*second*/ 2) set_data(t4, /*second*/ ctx[1]);
			const nested_changes = {};
			if (dirty & /*first*/ 1) nested_changes.first = /*first*/ ctx[0];
			if (dirty & /*second*/ 2) nested_changes.second = /*second*/ ctx[1];
			nested.$set(nested_changes);
		},
		i(local) {
			if (current) return;
			transition_in(nested.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(nested.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(p0);
				detach(t2);
				detach(p1);
				detach(t5);
			}

			destroy_component(nested, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let first = 1;
	let second = 2;
	const click_handler = () => $$invalidate(0, first++, first);
	const click_handler_1 = () => $$invalidate(1, second++, second);
	return [first, second, click_handler, click_handler_1];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;
