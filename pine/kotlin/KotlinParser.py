# Generated from KotlinParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,172,2806,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,1,0,5,0,296,
        8,0,10,0,12,0,299,9,0,1,0,1,0,5,0,303,8,0,10,0,12,0,306,9,0,1,0,
        1,0,4,0,310,8,0,11,0,12,0,311,1,0,3,0,315,8,0,5,0,317,8,0,10,0,12,
        0,320,9,0,3,0,322,8,0,1,0,1,0,1,1,5,1,327,8,1,10,1,12,1,330,9,1,
        1,1,1,1,5,1,334,8,1,10,1,12,1,337,9,1,1,1,1,1,4,1,341,8,1,11,1,12,
        1,342,1,1,3,1,346,8,1,5,1,348,8,1,10,1,12,1,351,9,1,3,1,353,8,1,
        1,1,1,1,1,2,3,2,358,8,2,1,2,1,2,1,2,1,3,4,3,364,8,3,11,3,12,3,365,
        1,4,1,4,1,4,1,4,4,4,372,8,4,11,4,12,4,373,1,4,1,4,1,4,3,4,379,8,
        4,1,4,3,4,382,8,4,4,4,384,8,4,11,4,12,4,385,1,5,3,5,389,8,5,1,5,
        1,5,1,5,3,5,394,8,5,3,5,396,8,5,1,6,5,6,399,8,6,10,6,12,6,402,9,
        6,1,7,1,7,1,7,1,7,1,7,3,7,409,8,7,1,7,3,7,412,8,7,1,8,1,8,1,8,1,
        9,1,9,1,9,1,9,1,9,3,9,422,8,9,1,10,3,10,425,8,10,1,10,1,10,5,10,
        429,8,10,10,10,12,10,432,9,10,1,10,1,10,5,10,436,8,10,10,10,12,10,
        439,9,10,1,10,3,10,442,8,10,1,10,5,10,445,8,10,10,10,12,10,448,9,
        10,1,10,3,10,451,8,10,1,10,5,10,454,8,10,10,10,12,10,457,9,10,1,
        10,1,10,5,10,461,8,10,10,10,12,10,464,9,10,1,10,3,10,467,8,10,1,
        10,5,10,470,8,10,10,10,12,10,473,9,10,1,10,3,10,476,8,10,1,10,5,
        10,479,8,10,10,10,12,10,482,9,10,1,10,1,10,5,10,486,8,10,10,10,12,
        10,489,9,10,1,10,3,10,492,8,10,1,11,3,11,495,8,11,1,11,1,11,5,11,
        499,8,11,10,11,12,11,502,9,11,3,11,504,8,11,1,11,1,11,1,12,1,12,
        1,12,1,12,5,12,512,8,12,10,12,12,12,515,9,12,1,12,3,12,518,8,12,
        3,12,520,8,12,1,12,1,12,1,13,3,13,525,8,13,1,13,3,13,528,8,13,1,
        13,1,13,1,13,1,13,1,13,3,13,535,8,13,1,14,5,14,538,8,14,10,14,12,
        14,541,9,14,1,14,1,14,5,14,545,8,14,10,14,12,14,548,9,14,1,14,1,
        14,5,14,552,8,14,10,14,12,14,555,9,14,1,14,5,14,558,8,14,10,14,12,
        14,561,9,14,1,14,5,14,564,8,14,10,14,12,14,567,9,14,1,15,1,15,1,
        15,3,15,572,8,15,1,16,1,16,1,16,1,17,1,17,5,17,579,8,17,10,17,12,
        17,582,9,17,1,17,1,17,5,17,586,8,17,10,17,12,17,589,9,17,1,17,1,
        17,1,18,1,18,5,18,595,8,18,10,18,12,18,598,9,18,1,18,5,18,601,8,
        18,10,18,12,18,604,9,18,1,18,5,18,607,8,18,10,18,12,18,610,9,18,
        1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,622,8,19,
        1,19,4,19,625,8,19,11,19,12,19,626,1,20,1,20,5,20,631,8,20,10,20,
        12,20,634,9,20,1,20,1,20,1,21,3,21,639,8,21,1,21,1,21,5,21,643,8,
        21,10,21,12,21,646,9,21,1,21,1,21,5,21,650,8,21,10,21,12,21,653,
        9,21,1,21,1,21,5,21,657,8,21,10,21,12,21,660,9,21,1,21,3,21,663,
        8,21,1,21,5,21,666,8,21,10,21,12,21,669,9,21,1,21,3,21,672,8,21,
        1,22,1,22,5,22,676,8,22,10,22,12,22,679,9,22,1,22,1,22,1,22,5,22,
        684,8,22,10,22,12,22,687,9,22,1,22,3,22,690,8,22,1,23,1,23,5,23,
        694,8,23,10,23,12,23,697,9,23,1,23,3,23,700,8,23,1,23,5,23,703,8,
        23,10,23,12,23,706,9,23,1,23,1,23,5,23,710,8,23,10,23,12,23,713,
        9,23,1,23,5,23,716,8,23,10,23,12,23,719,9,23,3,23,721,8,23,1,23,
        5,23,724,8,23,10,23,12,23,727,9,23,1,23,1,23,1,24,1,24,5,24,733,
        8,24,10,24,12,24,736,9,24,4,24,738,8,24,11,24,12,24,739,1,24,3,24,
        743,8,24,1,25,5,25,746,8,25,10,25,12,25,749,9,25,1,25,1,25,5,25,
        753,8,25,10,25,12,25,756,9,25,1,25,3,25,759,8,25,1,25,5,25,762,8,
        25,10,25,12,25,765,9,25,1,25,3,25,768,8,25,1,25,5,25,771,8,25,10,
        25,12,25,774,9,25,1,25,3,25,777,8,25,1,26,3,26,780,8,26,1,26,1,26,
        5,26,784,8,26,10,26,12,26,787,9,26,1,26,1,26,5,26,791,8,26,10,26,
        12,26,794,9,26,1,26,1,26,3,26,798,8,26,1,26,5,26,801,8,26,10,26,
        12,26,804,9,26,1,26,3,26,807,8,26,1,26,5,26,810,8,26,10,26,12,26,
        813,9,26,1,26,1,26,5,26,817,8,26,10,26,12,26,820,9,26,1,26,1,26,
        3,26,824,8,26,1,26,5,26,827,8,26,10,26,12,26,830,9,26,1,26,3,26,
        833,8,26,1,26,5,26,836,8,26,10,26,12,26,839,9,26,1,26,1,26,5,26,
        843,8,26,10,26,12,26,846,9,26,1,26,1,26,5,26,850,8,26,10,26,12,26,
        853,9,26,1,26,3,26,856,8,26,1,26,5,26,859,8,26,10,26,12,26,862,9,
        26,1,26,3,26,865,8,26,1,26,5,26,868,8,26,10,26,12,26,871,9,26,1,
        26,3,26,874,8,26,1,27,1,27,1,27,1,27,5,27,880,8,27,10,27,12,27,883,
        9,27,1,27,3,27,886,8,27,3,27,888,8,27,1,27,1,27,1,28,3,28,893,8,
        28,1,28,1,28,1,28,3,28,898,8,28,1,29,1,29,1,29,1,29,1,30,3,30,905,
        8,30,1,30,1,30,1,30,3,30,910,8,30,1,31,1,31,1,31,5,31,915,8,31,10,
        31,12,31,918,9,31,1,31,3,31,921,8,31,1,32,3,32,924,8,32,1,32,1,32,
        5,32,928,8,32,10,32,12,32,931,9,32,1,32,1,32,5,32,935,8,32,10,32,
        12,32,938,9,32,1,32,3,32,941,8,32,1,32,5,32,944,8,32,10,32,12,32,
        947,9,32,1,32,1,32,5,32,951,8,32,10,32,12,32,954,9,32,1,32,3,32,
        957,8,32,1,32,5,32,960,8,32,10,32,12,32,963,9,32,1,32,3,32,966,8,
        32,1,33,3,33,969,8,33,1,33,1,33,5,33,973,8,33,10,33,12,33,976,9,
        33,1,33,3,33,979,8,33,1,33,1,33,5,33,983,8,33,10,33,12,33,986,9,
        33,1,33,3,33,989,8,33,1,33,5,33,992,8,33,10,33,12,33,995,9,33,1,
        33,1,33,5,33,999,8,33,10,33,12,33,1002,9,33,1,33,3,33,1005,8,33,
        1,33,5,33,1008,8,33,10,33,12,33,1011,9,33,1,33,3,33,1014,8,33,1,
        34,3,34,1017,8,34,1,34,1,34,5,34,1021,8,34,10,34,12,34,1024,9,34,
        1,34,3,34,1027,8,34,1,34,5,34,1030,8,34,10,34,12,34,1033,9,34,1,
        34,1,34,5,34,1037,8,34,10,34,12,34,1040,9,34,1,34,1,34,3,34,1044,
        8,34,1,34,5,34,1047,8,34,10,34,12,34,1050,9,34,1,34,1,34,3,34,1054,
        8,34,1,34,5,34,1057,8,34,10,34,12,34,1060,9,34,1,34,3,34,1063,8,
        34,1,34,5,34,1066,8,34,10,34,12,34,1069,9,34,1,34,1,34,5,34,1073,
        8,34,10,34,12,34,1076,9,34,1,34,3,34,1079,8,34,1,34,5,34,1082,8,
        34,10,34,12,34,1085,9,34,1,34,1,34,1,34,1,34,3,34,1091,8,34,1,34,
        5,34,1094,8,34,10,34,12,34,1097,9,34,1,34,1,34,1,34,1,34,3,34,1103,
        8,34,3,34,1105,8,34,1,35,1,35,1,35,1,35,5,35,1111,8,35,10,35,12,
        35,1114,9,35,1,35,1,35,1,36,1,36,1,36,3,36,1121,8,36,1,36,1,36,1,
        36,3,36,1126,8,36,3,36,1128,8,36,1,37,3,37,1131,8,37,1,37,1,37,3,
        37,1135,8,37,1,37,1,37,5,37,1139,8,37,10,37,12,37,1142,9,37,1,37,
        1,37,1,37,5,37,1147,8,37,10,37,12,37,1150,9,37,1,37,1,37,5,37,1154,
        8,37,10,37,12,37,1157,9,37,1,37,3,37,1160,8,37,1,37,5,37,1163,8,
        37,10,37,12,37,1166,9,37,1,37,1,37,1,37,5,37,1171,8,37,10,37,12,
        37,1174,9,37,1,37,3,37,1177,8,37,3,37,1179,8,37,1,38,3,38,1182,8,
        38,1,38,1,38,3,38,1186,8,38,1,38,1,38,5,38,1190,8,38,10,38,12,38,
        1193,9,38,1,38,1,38,1,38,5,38,1198,8,38,10,38,12,38,1201,9,38,1,
        38,1,38,3,38,1205,8,38,1,38,1,38,5,38,1209,8,38,10,38,12,38,1212,
        9,38,1,38,1,38,3,38,1216,8,38,1,39,3,39,1219,8,39,1,39,1,39,5,39,
        1223,8,39,10,39,12,39,1226,9,39,1,39,1,39,5,39,1230,8,39,10,39,12,
        39,1233,9,39,1,39,3,39,1236,8,39,1,39,5,39,1239,8,39,10,39,12,39,
        1242,9,39,1,39,1,39,5,39,1246,8,39,10,39,12,39,1249,9,39,1,39,1,
        39,1,40,1,40,5,40,1255,8,40,10,40,12,40,1258,9,40,1,40,1,40,5,40,
        1262,8,40,10,40,12,40,1265,9,40,1,40,1,40,5,40,1269,8,40,10,40,12,
        40,1272,9,40,1,40,5,40,1275,8,40,10,40,12,40,1278,9,40,1,40,5,40,
        1281,8,40,10,40,12,40,1284,9,40,1,40,3,40,1287,8,40,1,40,5,40,1290,
        8,40,10,40,12,40,1293,9,40,1,40,1,40,1,41,3,41,1298,8,41,1,41,5,
        41,1301,8,41,10,41,12,41,1304,9,41,1,41,1,41,3,41,1308,8,41,1,41,
        5,41,1311,8,41,10,41,12,41,1314,9,41,1,41,1,41,5,41,1318,8,41,10,
        41,12,41,1321,9,41,1,41,3,41,1324,8,41,1,42,3,42,1327,8,42,1,42,
        1,42,1,42,1,42,3,42,1333,8,42,1,43,1,43,1,43,5,43,1338,8,43,10,43,
        12,43,1341,9,43,4,43,1343,8,43,11,43,12,43,1344,1,44,1,44,1,44,1,
        44,1,45,1,45,3,45,1353,8,45,1,45,5,45,1356,8,45,10,45,12,45,1359,
        9,45,1,45,4,45,1362,8,45,11,45,12,45,1363,1,46,1,46,1,46,1,46,1,
        46,1,46,3,46,1372,8,46,1,47,1,47,5,47,1376,8,47,10,47,12,47,1379,
        9,47,1,47,1,47,5,47,1383,8,47,10,47,12,47,1386,9,47,3,47,1388,8,
        47,1,47,1,47,5,47,1392,8,47,10,47,12,47,1395,9,47,1,47,1,47,5,47,
        1399,8,47,10,47,12,47,1402,9,47,1,47,1,47,1,48,1,48,1,48,3,48,1409,
        8,48,1,49,1,49,5,49,1413,8,49,10,49,12,49,1416,9,49,1,49,1,49,5,
        49,1420,8,49,10,49,12,49,1423,9,49,1,49,5,49,1426,8,49,10,49,12,
        49,1429,9,49,1,50,1,50,5,50,1433,8,50,10,50,12,50,1436,9,50,1,50,
        3,50,1439,8,50,1,51,1,51,5,51,1443,8,51,10,51,12,51,1446,9,51,1,
        51,1,51,3,51,1450,8,51,1,51,5,51,1453,8,51,10,51,12,51,1456,9,51,
        1,51,1,51,5,51,1460,8,51,10,51,12,51,1463,9,51,1,51,1,51,3,51,1467,
        8,51,5,51,1469,8,51,10,51,12,51,1472,9,51,1,51,5,51,1475,8,51,10,
        51,12,51,1478,9,51,1,51,3,51,1481,8,51,1,51,5,51,1484,8,51,10,51,
        12,51,1487,9,51,1,51,1,51,1,52,1,52,5,52,1493,8,52,10,52,12,52,1496,
        9,52,1,52,1,52,5,52,1500,8,52,10,52,12,52,1503,9,52,1,52,1,52,5,
        52,1507,8,52,10,52,12,52,1510,9,52,1,52,5,52,1513,8,52,10,52,12,
        52,1516,9,52,1,53,5,53,1519,8,53,10,53,12,53,1522,9,53,1,53,1,53,
        5,53,1526,8,53,10,53,12,53,1529,9,53,1,53,1,53,5,53,1533,8,53,10,
        53,12,53,1536,9,53,1,53,1,53,1,54,1,54,1,54,1,54,1,55,5,55,1545,
        8,55,10,55,12,55,1548,9,55,1,55,1,55,4,55,1552,8,55,11,55,12,55,
        1553,1,55,3,55,1557,8,55,5,55,1559,8,55,10,55,12,55,1562,9,55,3,
        55,1564,8,55,1,56,1,56,3,56,1568,8,56,1,57,5,57,1571,8,57,10,57,
        12,57,1574,9,57,1,57,5,57,1577,8,57,10,57,12,57,1580,9,57,1,57,1,
        57,1,58,5,58,1585,8,58,10,58,12,58,1588,9,58,1,58,1,58,1,58,1,58,
        3,58,1594,8,58,1,59,1,59,1,59,1,59,5,59,1600,8,59,10,59,12,59,1603,
        9,59,1,60,1,60,5,60,1607,8,60,10,60,12,60,1610,9,60,1,60,1,60,5,
        60,1614,8,60,10,60,12,60,1617,9,60,1,60,5,60,1620,8,60,10,60,12,
        60,1623,9,60,1,61,1,61,5,61,1627,8,61,10,61,12,61,1630,9,61,1,61,
        1,61,5,61,1634,8,61,10,61,12,61,1637,9,61,1,61,5,61,1640,8,61,10,
        61,12,61,1643,9,61,1,62,1,62,1,62,5,62,1648,8,62,10,62,12,62,1651,
        9,62,1,62,1,62,5,62,1655,8,62,10,62,12,62,1658,9,62,1,63,1,63,1,
        63,5,63,1663,8,63,10,63,12,63,1666,9,63,1,63,1,63,3,63,1670,8,63,
        1,64,1,64,1,64,5,64,1675,8,64,10,64,12,64,1678,9,64,1,64,1,64,4,
        64,1682,8,64,11,64,12,64,1683,1,64,1,64,5,64,1688,8,64,10,64,12,
        64,1691,9,64,1,64,1,64,3,64,1695,8,64,1,65,1,65,5,65,1699,8,65,10,
        65,12,65,1702,9,65,1,65,1,65,5,65,1706,8,65,10,65,12,65,1709,9,65,
        1,65,5,65,1712,8,65,10,65,12,65,1715,9,65,1,66,1,66,1,66,5,66,1720,
        8,66,10,66,12,66,1723,9,66,1,66,1,66,5,66,1727,8,66,10,66,12,66,
        1730,9,66,1,67,1,67,1,67,5,67,1735,8,67,10,67,12,67,1738,9,67,1,
        67,5,67,1741,8,67,10,67,12,67,1744,9,67,1,68,1,68,1,68,5,68,1749,
        8,68,10,68,12,68,1752,9,68,1,68,1,68,5,68,1756,8,68,10,68,12,68,
        1759,9,68,1,69,1,69,1,69,5,69,1764,8,69,10,69,12,69,1767,9,69,1,
        69,1,69,5,69,1771,8,69,10,69,12,69,1774,9,69,1,70,1,70,5,70,1778,
        8,70,10,70,12,70,1781,9,70,1,70,1,70,1,70,5,70,1786,8,70,10,70,12,
        70,1789,9,70,1,71,5,71,1792,8,71,10,71,12,71,1795,9,71,1,71,1,71,
        1,72,1,72,3,72,1801,8,72,1,72,5,72,1804,8,72,10,72,12,72,1807,9,
        72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,
        73,1,73,3,73,1823,8,73,1,74,1,74,1,74,1,74,1,75,1,75,3,75,1831,8,
        75,1,75,5,75,1834,8,75,10,75,12,75,1837,9,75,1,75,1,75,5,75,1841,
        8,75,10,75,12,75,1844,9,75,1,75,4,75,1847,8,75,11,75,12,75,1848,
        3,75,1851,8,75,1,76,5,76,1854,8,76,10,76,12,76,1857,9,76,1,76,3,
        76,1860,8,76,1,76,5,76,1863,8,76,10,76,12,76,1866,9,76,1,76,1,76,
        1,77,1,77,1,77,1,77,5,77,1874,8,77,10,77,12,77,1877,9,77,3,77,1879,
        8,77,1,77,1,77,1,78,1,78,1,78,1,78,5,78,1887,8,78,10,78,12,78,1890,
        9,78,1,78,5,78,1893,8,78,10,78,12,78,1896,9,78,1,78,3,78,1899,8,
        78,3,78,1901,8,78,1,78,1,78,1,79,1,79,5,79,1907,8,79,10,79,12,79,
        1910,9,79,1,79,1,79,5,79,1914,8,79,10,79,12,79,1917,9,79,1,79,1,
        79,5,79,1921,8,79,10,79,12,79,1924,9,79,1,79,5,79,1927,8,79,10,79,
        12,79,1930,9,79,1,79,3,79,1933,8,79,1,79,5,79,1936,8,79,10,79,12,
        79,1939,9,79,1,79,1,79,3,79,1943,8,79,1,80,3,80,1946,8,80,1,80,1,
        80,3,80,1950,8,80,1,81,4,81,1953,8,81,11,81,12,81,1954,1,82,1,82,
        5,82,1959,8,82,10,82,12,82,1962,9,82,1,82,1,82,5,82,1966,8,82,10,
        82,12,82,1969,9,82,3,82,1971,8,82,1,82,3,82,1974,8,82,1,82,5,82,
        1977,8,82,10,82,12,82,1980,9,82,1,82,1,82,1,83,1,83,1,83,1,83,1,
        83,1,83,1,83,1,83,1,83,3,83,1993,8,83,1,84,1,84,3,84,1997,8,84,1,
        85,1,85,1,85,5,85,2002,8,85,10,85,12,85,2005,9,85,1,85,1,85,1,86,
        1,86,1,86,1,86,1,86,5,86,2014,8,86,10,86,12,86,2017,9,86,1,86,1,
        86,1,87,1,87,1,88,1,88,1,88,1,88,1,89,1,89,1,90,1,90,1,90,1,90,1,
        91,5,91,2034,8,91,10,91,12,91,2037,9,91,1,91,1,91,5,91,2041,8,91,
        10,91,12,91,2044,9,91,1,91,1,91,5,91,2048,8,91,10,91,12,91,2051,
        9,91,1,91,1,91,1,91,1,91,5,91,2057,8,91,10,91,12,91,2060,9,91,1,
        91,1,91,5,91,2064,8,91,10,91,12,91,2067,9,91,1,91,1,91,5,91,2071,
        8,91,10,91,12,91,2074,9,91,1,91,1,91,5,91,2078,8,91,10,91,12,91,
        2081,9,91,1,91,1,91,3,91,2085,8,91,1,92,3,92,2088,8,92,1,92,5,92,
        2091,8,92,10,92,12,92,2094,9,92,1,92,1,92,5,92,2098,8,92,10,92,12,
        92,2101,9,92,1,92,5,92,2104,8,92,10,92,12,92,2107,9,92,1,93,1,93,
        1,93,5,93,2112,8,93,10,93,12,93,2115,9,93,1,93,1,93,5,93,2119,8,
        93,10,93,12,93,2122,9,93,1,93,3,93,2125,8,93,3,93,2127,8,93,1,94,
        1,94,5,94,2131,8,94,10,94,12,94,2134,9,94,1,94,1,94,5,94,2138,8,
        94,10,94,12,94,2141,9,94,1,94,3,94,2144,8,94,1,94,5,94,2147,8,94,
        10,94,12,94,2150,9,94,1,94,3,94,2153,8,94,1,95,1,95,3,95,2157,8,
        95,1,95,1,95,5,95,2161,8,95,10,95,12,95,2164,9,95,1,95,1,95,1,96,
        1,96,3,96,2170,8,96,1,97,1,97,1,97,5,97,2175,8,97,10,97,12,97,2178,
        9,97,1,97,1,97,5,97,2182,8,97,10,97,12,97,2185,9,97,1,97,1,97,3,
        97,2189,8,97,1,97,3,97,2192,8,97,1,98,1,98,3,98,2196,8,98,1,99,1,
        99,5,99,2200,8,99,10,99,12,99,2203,9,99,1,99,1,99,1,99,1,99,5,99,
        2209,8,99,10,99,12,99,2212,9,99,1,99,3,99,2215,8,99,1,99,3,99,2218,
        8,99,1,99,5,99,2221,8,99,10,99,12,99,2224,9,99,1,99,1,99,5,99,2228,
        8,99,10,99,12,99,2231,9,99,1,99,3,99,2234,8,99,3,99,2236,8,99,1,
        100,1,100,3,100,2240,8,100,1,101,1,101,5,101,2244,8,101,10,101,12,
        101,2247,9,101,1,101,1,101,1,101,1,101,3,101,2253,8,101,1,101,5,
        101,2256,8,101,10,101,12,101,2259,9,101,1,101,1,101,5,101,2263,8,
        101,10,101,12,101,2266,9,101,1,101,1,101,5,101,2270,8,101,10,101,
        12,101,2273,9,101,5,101,2275,8,101,10,101,12,101,2278,9,101,1,101,
        5,101,2281,8,101,10,101,12,101,2284,9,101,1,101,1,101,1,102,1,102,
        5,102,2290,8,102,10,102,12,102,2293,9,102,1,102,1,102,5,102,2297,
        8,102,10,102,12,102,2300,9,102,1,102,5,102,2303,8,102,10,102,12,
        102,2306,9,102,1,102,5,102,2309,8,102,10,102,12,102,2312,9,102,1,
        102,1,102,5,102,2316,8,102,10,102,12,102,2319,9,102,1,102,1,102,
        3,102,2323,8,102,1,102,1,102,5,102,2327,8,102,10,102,12,102,2330,
        9,102,1,102,1,102,5,102,2334,8,102,10,102,12,102,2337,9,102,1,102,
        3,102,2340,8,102,1,103,1,103,1,103,3,103,2345,8,103,1,104,1,104,
        5,104,2349,8,104,10,104,12,104,2352,9,104,1,104,1,104,1,105,1,105,
        5,105,2358,8,105,10,105,12,105,2361,9,105,1,105,1,105,1,106,1,106,
        5,106,2367,8,106,10,106,12,106,2370,9,106,1,106,1,106,5,106,2374,
        8,106,10,106,12,106,2377,9,106,1,106,5,106,2380,8,106,10,106,12,
        106,2383,9,106,1,106,5,106,2386,8,106,10,106,12,106,2389,9,106,1,
        106,3,106,2392,8,106,1,107,1,107,5,107,2396,8,107,10,107,12,107,
        2399,9,107,1,107,1,107,5,107,2403,8,107,10,107,12,107,2406,9,107,
        1,107,1,107,1,107,1,107,1,107,5,107,2413,8,107,10,107,12,107,2416,
        9,107,1,107,1,107,1,108,1,108,5,108,2422,8,108,10,108,12,108,2425,
        9,108,1,108,1,108,1,109,1,109,1,109,3,109,2432,8,109,1,110,1,110,
        5,110,2436,8,110,10,110,12,110,2439,9,110,1,110,1,110,5,110,2443,
        8,110,10,110,12,110,2446,9,110,1,110,1,110,3,110,2450,8,110,1,110,
        1,110,1,110,1,110,5,110,2456,8,110,10,110,12,110,2459,9,110,1,110,
        3,110,2462,8,110,1,111,1,111,5,111,2466,8,111,10,111,12,111,2469,
        9,111,1,111,1,111,1,111,1,111,5,111,2475,8,111,10,111,12,111,2478,
        9,111,1,111,3,111,2481,8,111,1,112,1,112,5,112,2485,8,112,10,112,
        12,112,2488,9,112,1,112,3,112,2491,8,112,1,112,5,112,2494,8,112,
        10,112,12,112,2497,9,112,1,112,1,112,5,112,2501,8,112,10,112,12,
        112,2504,9,112,1,112,1,112,1,112,1,112,1,113,1,113,5,113,2512,8,
        113,10,113,12,113,2515,9,113,1,113,1,113,1,113,3,113,2520,8,113,
        1,113,1,113,1,113,1,113,3,113,2526,8,113,1,114,1,114,1,114,5,114,
        2531,8,114,10,114,12,114,2534,9,114,5,114,2536,8,114,10,114,12,114,
        2539,9,114,3,114,2541,8,114,1,114,5,114,2544,8,114,10,114,12,114,
        2547,9,114,1,114,1,114,5,114,2551,8,114,10,114,12,114,2554,9,114,
        1,114,1,114,3,114,2558,8,114,1,114,1,114,5,114,2562,8,114,10,114,
        12,114,2565,9,114,1,114,1,114,5,114,2569,8,114,10,114,12,114,2572,
        9,114,1,114,3,114,2575,8,114,1,115,1,115,1,116,1,116,1,117,1,117,
        1,118,1,118,1,119,1,119,1,120,1,120,1,121,1,121,1,122,1,122,1,123,
        1,123,1,123,1,123,1,123,1,123,1,123,3,123,2600,8,123,1,124,1,124,
        1,124,1,124,1,124,1,124,1,124,5,124,2609,8,124,10,124,12,124,2612,
        9,124,1,124,1,124,1,124,3,124,2617,8,124,1,125,1,125,1,125,3,125,
        2622,8,125,1,126,1,126,4,126,2626,8,126,11,126,12,126,2627,1,127,
        1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,3,127,2639,8,127,
        1,127,5,127,2642,8,127,10,127,12,127,2645,9,127,1,128,1,128,1,129,
        1,129,1,130,1,130,1,131,1,131,1,132,1,132,1,133,1,133,1,134,1,134,
        1,135,1,135,1,136,1,136,1,137,1,137,5,137,2667,8,137,10,137,12,137,
        2670,9,137,1,138,1,138,3,138,2674,8,138,1,138,5,138,2677,8,138,10,
        138,12,138,2680,9,138,1,139,1,139,5,139,2684,8,139,10,139,12,139,
        2687,9,139,1,139,1,139,5,139,2691,8,139,10,139,12,139,2694,9,139,
        1,139,1,139,1,139,1,139,5,139,2700,8,139,10,139,12,139,2703,9,139,
        1,139,1,139,5,139,2707,8,139,10,139,12,139,2710,9,139,1,139,5,139,
        2713,8,139,10,139,12,139,2716,9,139,1,139,5,139,2719,8,139,10,139,
        12,139,2722,9,139,1,139,3,139,2725,8,139,1,139,5,139,2728,8,139,
        10,139,12,139,2731,9,139,1,139,3,139,2734,8,139,3,139,2736,8,139,
        1,140,1,140,1,140,1,140,4,140,2742,8,140,11,140,12,140,2743,1,140,
        1,140,1,140,1,140,1,140,4,140,2751,8,140,11,140,12,140,2752,1,140,
        1,140,3,140,2757,8,140,1,141,1,141,1,142,1,142,3,142,2763,8,142,
        1,142,3,142,2766,8,142,1,143,1,143,5,143,2770,8,143,10,143,12,143,
        2773,9,143,1,143,1,143,5,143,2777,8,143,10,143,12,143,2780,9,143,
        1,144,1,144,1,145,4,145,2785,8,145,11,145,12,145,2786,1,145,5,145,
        2790,8,145,10,145,12,145,2793,9,145,1,145,1,145,5,145,2797,8,145,
        10,145,12,145,2800,9,145,3,145,2802,8,145,1,146,1,146,1,146,0,0,
        147,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
        44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
        88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
        124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
        156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,
        188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,
        220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,
        252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,
        284,286,288,290,292,0,25,1,0,59,60,1,0,63,64,2,0,27,27,67,67,1,0,
        157,159,1,0,163,165,2,0,53,53,84,84,1,0,36,37,1,0,27,32,2,0,47,48,
        50,51,1,0,43,46,2,0,89,89,91,91,2,0,88,88,90,90,1,0,18,19,1,0,15,
        17,3,0,25,25,49,49,87,87,1,0,108,112,2,0,119,119,124,124,1,0,104,
        107,2,0,89,89,92,92,1,0,113,118,1,0,120,122,1,0,125,127,3,0,56,56,
        93,96,99,102,8,0,58,58,66,69,73,73,78,79,92,92,97,98,103,128,140,
        140,2,0,5,5,26,26,3154,0,297,1,0,0,0,2,328,1,0,0,0,4,357,1,0,0,0,
        6,363,1,0,0,0,8,383,1,0,0,0,10,395,1,0,0,0,12,400,1,0,0,0,14,403,
        1,0,0,0,16,413,1,0,0,0,18,421,1,0,0,0,20,424,1,0,0,0,22,494,1,0,
        0,0,24,507,1,0,0,0,26,524,1,0,0,0,28,539,1,0,0,0,30,571,1,0,0,0,
        32,573,1,0,0,0,34,576,1,0,0,0,36,592,1,0,0,0,38,621,1,0,0,0,40,628,
        1,0,0,0,42,638,1,0,0,0,44,689,1,0,0,0,46,691,1,0,0,0,48,737,1,0,
        0,0,50,747,1,0,0,0,52,779,1,0,0,0,54,875,1,0,0,0,56,892,1,0,0,0,
        58,899,1,0,0,0,60,904,1,0,0,0,62,920,1,0,0,0,64,923,1,0,0,0,66,968,
        1,0,0,0,68,1016,1,0,0,0,70,1106,1,0,0,0,72,1127,1,0,0,0,74,1178,
        1,0,0,0,76,1215,1,0,0,0,78,1218,1,0,0,0,80,1252,1,0,0,0,82,1297,
        1,0,0,0,84,1326,1,0,0,0,86,1342,1,0,0,0,88,1346,1,0,0,0,90,1352,
        1,0,0,0,92,1371,1,0,0,0,94,1387,1,0,0,0,96,1408,1,0,0,0,98,1410,
        1,0,0,0,100,1430,1,0,0,0,102,1440,1,0,0,0,104,1490,1,0,0,0,106,1520,
        1,0,0,0,108,1539,1,0,0,0,110,1546,1,0,0,0,112,1567,1,0,0,0,114,1572,
        1,0,0,0,116,1586,1,0,0,0,118,1595,1,0,0,0,120,1604,1,0,0,0,122,1624,
        1,0,0,0,124,1644,1,0,0,0,126,1659,1,0,0,0,128,1671,1,0,0,0,130,1696,
        1,0,0,0,132,1716,1,0,0,0,134,1731,1,0,0,0,136,1745,1,0,0,0,138,1760,
        1,0,0,0,140,1775,1,0,0,0,142,1793,1,0,0,0,144,1800,1,0,0,0,146,1822,
        1,0,0,0,148,1824,1,0,0,0,150,1850,1,0,0,0,152,1855,1,0,0,0,154,1869,
        1,0,0,0,156,1882,1,0,0,0,158,1904,1,0,0,0,160,1949,1,0,0,0,162,1952,
        1,0,0,0,164,1970,1,0,0,0,166,1992,1,0,0,0,168,1996,1,0,0,0,170,1998,
        1,0,0,0,172,2008,1,0,0,0,174,2020,1,0,0,0,176,2022,1,0,0,0,178,2026,
        1,0,0,0,180,2028,1,0,0,0,182,2035,1,0,0,0,184,2087,1,0,0,0,186,2126,
        1,0,0,0,188,2128,1,0,0,0,190,2154,1,0,0,0,192,2167,1,0,0,0,194,2171,
        1,0,0,0,196,2195,1,0,0,0,198,2197,1,0,0,0,200,2239,1,0,0,0,202,2241,
        1,0,0,0,204,2339,1,0,0,0,206,2344,1,0,0,0,208,2346,1,0,0,0,210,2355,
        1,0,0,0,212,2364,1,0,0,0,214,2393,1,0,0,0,216,2419,1,0,0,0,218,2431,
        1,0,0,0,220,2433,1,0,0,0,222,2463,1,0,0,0,224,2482,1,0,0,0,226,2525,
        1,0,0,0,228,2574,1,0,0,0,230,2576,1,0,0,0,232,2578,1,0,0,0,234,2580,
        1,0,0,0,236,2582,1,0,0,0,238,2584,1,0,0,0,240,2586,1,0,0,0,242,2588,
        1,0,0,0,244,2590,1,0,0,0,246,2599,1,0,0,0,248,2616,1,0,0,0,250,2621,
        1,0,0,0,252,2625,1,0,0,0,254,2638,1,0,0,0,256,2646,1,0,0,0,258,2648,
        1,0,0,0,260,2650,1,0,0,0,262,2652,1,0,0,0,264,2654,1,0,0,0,266,2656,
        1,0,0,0,268,2658,1,0,0,0,270,2660,1,0,0,0,272,2662,1,0,0,0,274,2664,
        1,0,0,0,276,2673,1,0,0,0,278,2735,1,0,0,0,280,2756,1,0,0,0,282,2758,
        1,0,0,0,284,2760,1,0,0,0,286,2767,1,0,0,0,288,2781,1,0,0,0,290,2801,
        1,0,0,0,292,2803,1,0,0,0,294,296,5,5,0,0,295,294,1,0,0,0,296,299,
        1,0,0,0,297,295,1,0,0,0,297,298,1,0,0,0,298,300,1,0,0,0,299,297,
        1,0,0,0,300,304,3,4,2,0,301,303,3,292,146,0,302,301,1,0,0,0,303,
        306,1,0,0,0,304,302,1,0,0,0,304,305,1,0,0,0,305,321,1,0,0,0,306,
        304,1,0,0,0,307,318,3,18,9,0,308,310,3,292,146,0,309,308,1,0,0,0,
        310,311,1,0,0,0,311,309,1,0,0,0,311,312,1,0,0,0,312,314,1,0,0,0,
        313,315,3,18,9,0,314,313,1,0,0,0,314,315,1,0,0,0,315,317,1,0,0,0,
        316,309,1,0,0,0,317,320,1,0,0,0,318,316,1,0,0,0,318,319,1,0,0,0,
        319,322,1,0,0,0,320,318,1,0,0,0,321,307,1,0,0,0,321,322,1,0,0,0,
        322,323,1,0,0,0,323,324,5,0,0,1,324,1,1,0,0,0,325,327,5,5,0,0,326,
        325,1,0,0,0,327,330,1,0,0,0,328,326,1,0,0,0,328,329,1,0,0,0,329,
        331,1,0,0,0,330,328,1,0,0,0,331,335,3,4,2,0,332,334,3,292,146,0,
        333,332,1,0,0,0,334,337,1,0,0,0,335,333,1,0,0,0,335,336,1,0,0,0,
        336,352,1,0,0,0,337,335,1,0,0,0,338,349,3,118,59,0,339,341,3,292,
        146,0,340,339,1,0,0,0,341,342,1,0,0,0,342,340,1,0,0,0,342,343,1,
        0,0,0,343,345,1,0,0,0,344,346,3,118,59,0,345,344,1,0,0,0,345,346,
        1,0,0,0,346,348,1,0,0,0,347,340,1,0,0,0,348,351,1,0,0,0,349,347,
        1,0,0,0,349,350,1,0,0,0,350,353,1,0,0,0,351,349,1,0,0,0,352,338,
        1,0,0,0,352,353,1,0,0,0,353,354,1,0,0,0,354,355,5,0,0,1,355,3,1,
        0,0,0,356,358,3,6,3,0,357,356,1,0,0,0,357,358,1,0,0,0,358,359,1,
        0,0,0,359,360,3,10,5,0,360,361,3,12,6,0,361,5,1,0,0,0,362,364,3,
        8,4,0,363,362,1,0,0,0,364,365,1,0,0,0,365,363,1,0,0,0,365,366,1,
        0,0,0,366,7,1,0,0,0,367,368,5,56,0,0,368,378,5,25,0,0,369,371,5,
        11,0,0,370,372,3,284,142,0,371,370,1,0,0,0,372,373,1,0,0,0,373,371,
        1,0,0,0,373,374,1,0,0,0,374,375,1,0,0,0,375,376,5,12,0,0,376,379,
        1,0,0,0,377,379,3,284,142,0,378,369,1,0,0,0,378,377,1,0,0,0,379,
        381,1,0,0,0,380,382,3,290,145,0,381,380,1,0,0,0,381,382,1,0,0,0,
        382,384,1,0,0,0,383,367,1,0,0,0,384,385,1,0,0,0,385,383,1,0,0,0,
        385,386,1,0,0,0,386,9,1,0,0,0,387,389,3,252,126,0,388,387,1,0,0,
        0,388,389,1,0,0,0,389,390,1,0,0,0,390,391,5,57,0,0,391,393,3,286,
        143,0,392,394,3,290,145,0,393,392,1,0,0,0,393,394,1,0,0,0,394,396,
        1,0,0,0,395,388,1,0,0,0,395,396,1,0,0,0,396,11,1,0,0,0,397,399,3,
        14,7,0,398,397,1,0,0,0,399,402,1,0,0,0,400,398,1,0,0,0,400,401,1,
        0,0,0,401,13,1,0,0,0,402,400,1,0,0,0,403,404,5,58,0,0,404,408,3,
        286,143,0,405,406,5,7,0,0,406,409,5,15,0,0,407,409,3,16,8,0,408,
        405,1,0,0,0,408,407,1,0,0,0,408,409,1,0,0,0,409,411,1,0,0,0,410,
        412,3,290,145,0,411,410,1,0,0,0,411,412,1,0,0,0,412,15,1,0,0,0,413,
        414,5,87,0,0,414,415,3,288,144,0,415,17,1,0,0,0,416,422,3,20,10,
        0,417,422,3,64,32,0,418,422,3,52,26,0,419,422,3,68,34,0,420,422,
        3,78,39,0,421,416,1,0,0,0,421,417,1,0,0,0,421,418,1,0,0,0,421,419,
        1,0,0,0,421,420,1,0,0,0,422,19,1,0,0,0,423,425,3,252,126,0,424,423,
        1,0,0,0,424,425,1,0,0,0,425,426,1,0,0,0,426,430,7,0,0,0,427,429,
        5,5,0,0,428,427,1,0,0,0,429,432,1,0,0,0,430,428,1,0,0,0,430,431,
        1,0,0,0,431,433,1,0,0,0,432,430,1,0,0,0,433,441,3,288,144,0,434,
        436,5,5,0,0,435,434,1,0,0,0,436,439,1,0,0,0,437,435,1,0,0,0,437,
        438,1,0,0,0,438,440,1,0,0,0,439,437,1,0,0,0,440,442,3,80,40,0,441,
        437,1,0,0,0,441,442,1,0,0,0,442,450,1,0,0,0,443,445,5,5,0,0,444,
        443,1,0,0,0,445,448,1,0,0,0,446,444,1,0,0,0,446,447,1,0,0,0,447,
        449,1,0,0,0,448,446,1,0,0,0,449,451,3,22,11,0,450,446,1,0,0,0,450,
        451,1,0,0,0,451,466,1,0,0,0,452,454,5,5,0,0,453,452,1,0,0,0,454,
        457,1,0,0,0,455,453,1,0,0,0,455,456,1,0,0,0,456,458,1,0,0,0,457,
        455,1,0,0,0,458,462,5,25,0,0,459,461,5,5,0,0,460,459,1,0,0,0,461,
        464,1,0,0,0,462,460,1,0,0,0,462,463,1,0,0,0,463,465,1,0,0,0,464,
        462,1,0,0,0,465,467,3,28,14,0,466,455,1,0,0,0,466,467,1,0,0,0,467,
        475,1,0,0,0,468,470,5,5,0,0,469,468,1,0,0,0,470,473,1,0,0,0,471,
        469,1,0,0,0,471,472,1,0,0,0,472,474,1,0,0,0,473,471,1,0,0,0,474,
        476,3,104,52,0,475,471,1,0,0,0,475,476,1,0,0,0,476,491,1,0,0,0,477,
        479,5,5,0,0,478,477,1,0,0,0,479,482,1,0,0,0,480,478,1,0,0,0,480,
        481,1,0,0,0,481,483,1,0,0,0,482,480,1,0,0,0,483,492,3,36,18,0,484,
        486,5,5,0,0,485,484,1,0,0,0,486,489,1,0,0,0,487,485,1,0,0,0,487,
        488,1,0,0,0,488,490,1,0,0,0,489,487,1,0,0,0,490,492,3,46,23,0,491,
        480,1,0,0,0,491,487,1,0,0,0,491,492,1,0,0,0,492,21,1,0,0,0,493,495,
        3,252,126,0,494,493,1,0,0,0,494,495,1,0,0,0,495,503,1,0,0,0,496,
        500,5,66,0,0,497,499,5,5,0,0,498,497,1,0,0,0,499,502,1,0,0,0,500,
        498,1,0,0,0,500,501,1,0,0,0,501,504,1,0,0,0,502,500,1,0,0,0,503,
        496,1,0,0,0,503,504,1,0,0,0,504,505,1,0,0,0,505,506,3,24,12,0,506,
        23,1,0,0,0,507,519,5,9,0,0,508,513,3,26,13,0,509,510,5,8,0,0,510,
        512,3,26,13,0,511,509,1,0,0,0,512,515,1,0,0,0,513,511,1,0,0,0,513,
        514,1,0,0,0,514,517,1,0,0,0,515,513,1,0,0,0,516,518,5,8,0,0,517,
        516,1,0,0,0,517,518,1,0,0,0,518,520,1,0,0,0,519,508,1,0,0,0,519,
        520,1,0,0,0,520,521,1,0,0,0,521,522,5,10,0,0,522,25,1,0,0,0,523,
        525,3,252,126,0,524,523,1,0,0,0,524,525,1,0,0,0,525,527,1,0,0,0,
        526,528,7,1,0,0,527,526,1,0,0,0,527,528,1,0,0,0,528,529,1,0,0,0,
        529,530,3,288,144,0,530,531,5,25,0,0,531,534,3,84,42,0,532,533,5,
        27,0,0,533,535,3,118,59,0,534,532,1,0,0,0,534,535,1,0,0,0,535,27,
        1,0,0,0,536,538,3,276,138,0,537,536,1,0,0,0,538,541,1,0,0,0,539,
        537,1,0,0,0,539,540,1,0,0,0,540,542,1,0,0,0,541,539,1,0,0,0,542,
        565,3,30,15,0,543,545,5,5,0,0,544,543,1,0,0,0,545,548,1,0,0,0,546,
        544,1,0,0,0,546,547,1,0,0,0,547,549,1,0,0,0,548,546,1,0,0,0,549,
        553,5,8,0,0,550,552,5,5,0,0,551,550,1,0,0,0,552,555,1,0,0,0,553,
        551,1,0,0,0,553,554,1,0,0,0,554,559,1,0,0,0,555,553,1,0,0,0,556,
        558,3,276,138,0,557,556,1,0,0,0,558,561,1,0,0,0,559,557,1,0,0,0,
        559,560,1,0,0,0,560,562,1,0,0,0,561,559,1,0,0,0,562,564,3,30,15,
        0,563,546,1,0,0,0,564,567,1,0,0,0,565,563,1,0,0,0,565,566,1,0,0,
        0,566,29,1,0,0,0,567,565,1,0,0,0,568,572,3,32,16,0,569,572,3,98,
        49,0,570,572,3,34,17,0,571,568,1,0,0,0,571,569,1,0,0,0,571,570,1,
        0,0,0,572,31,1,0,0,0,573,574,3,98,49,0,574,575,3,150,75,0,575,33,
        1,0,0,0,576,580,3,98,49,0,577,579,5,5,0,0,578,577,1,0,0,0,579,582,
        1,0,0,0,580,578,1,0,0,0,580,581,1,0,0,0,581,583,1,0,0,0,582,580,
        1,0,0,0,583,587,5,67,0,0,584,586,5,5,0,0,585,584,1,0,0,0,586,589,
        1,0,0,0,587,585,1,0,0,0,587,588,1,0,0,0,588,590,1,0,0,0,589,587,
        1,0,0,0,590,591,3,118,59,0,591,35,1,0,0,0,592,596,5,13,0,0,593,595,
        5,5,0,0,594,593,1,0,0,0,595,598,1,0,0,0,596,594,1,0,0,0,596,597,
        1,0,0,0,597,602,1,0,0,0,598,596,1,0,0,0,599,601,3,38,19,0,600,599,
        1,0,0,0,601,604,1,0,0,0,602,600,1,0,0,0,602,603,1,0,0,0,603,608,
        1,0,0,0,604,602,1,0,0,0,605,607,5,5,0,0,606,605,1,0,0,0,607,610,
        1,0,0,0,608,606,1,0,0,0,608,609,1,0,0,0,609,611,1,0,0,0,610,608,
        1,0,0,0,611,612,5,14,0,0,612,37,1,0,0,0,613,622,3,20,10,0,614,622,
        3,52,26,0,615,622,3,64,32,0,616,622,3,66,33,0,617,622,3,68,34,0,
        618,622,3,40,20,0,619,622,3,42,21,0,620,622,3,78,39,0,621,613,1,
        0,0,0,621,614,1,0,0,0,621,615,1,0,0,0,621,616,1,0,0,0,621,617,1,
        0,0,0,621,618,1,0,0,0,621,619,1,0,0,0,621,620,1,0,0,0,622,624,1,
        0,0,0,623,625,3,292,146,0,624,623,1,0,0,0,625,626,1,0,0,0,626,624,
        1,0,0,0,626,627,1,0,0,0,627,39,1,0,0,0,628,632,5,69,0,0,629,631,
        5,5,0,0,630,629,1,0,0,0,631,634,1,0,0,0,632,630,1,0,0,0,632,633,
        1,0,0,0,633,635,1,0,0,0,634,632,1,0,0,0,635,636,3,108,54,0,636,41,
        1,0,0,0,637,639,3,252,126,0,638,637,1,0,0,0,638,639,1,0,0,0,639,
        640,1,0,0,0,640,644,5,66,0,0,641,643,5,5,0,0,642,641,1,0,0,0,643,
        646,1,0,0,0,644,642,1,0,0,0,644,645,1,0,0,0,645,647,1,0,0,0,646,
        644,1,0,0,0,647,662,3,54,27,0,648,650,5,5,0,0,649,648,1,0,0,0,650,
        653,1,0,0,0,651,649,1,0,0,0,651,652,1,0,0,0,652,654,1,0,0,0,653,
        651,1,0,0,0,654,658,5,25,0,0,655,657,5,5,0,0,656,655,1,0,0,0,657,
        660,1,0,0,0,658,656,1,0,0,0,658,659,1,0,0,0,659,661,1,0,0,0,660,
        658,1,0,0,0,661,663,3,44,22,0,662,651,1,0,0,0,662,663,1,0,0,0,663,
        667,1,0,0,0,664,666,5,5,0,0,665,664,1,0,0,0,666,669,1,0,0,0,667,
        665,1,0,0,0,667,668,1,0,0,0,668,671,1,0,0,0,669,667,1,0,0,0,670,
        672,3,108,54,0,671,670,1,0,0,0,671,672,1,0,0,0,672,43,1,0,0,0,673,
        677,5,70,0,0,674,676,5,5,0,0,675,674,1,0,0,0,676,679,1,0,0,0,677,
        675,1,0,0,0,677,678,1,0,0,0,678,680,1,0,0,0,679,677,1,0,0,0,680,
        690,3,156,78,0,681,685,5,71,0,0,682,684,5,5,0,0,683,682,1,0,0,0,
        684,687,1,0,0,0,685,683,1,0,0,0,685,686,1,0,0,0,686,688,1,0,0,0,
        687,685,1,0,0,0,688,690,3,156,78,0,689,673,1,0,0,0,689,681,1,0,0,
        0,690,45,1,0,0,0,691,695,5,13,0,0,692,694,5,5,0,0,693,692,1,0,0,
        0,694,697,1,0,0,0,695,693,1,0,0,0,695,696,1,0,0,0,696,699,1,0,0,
        0,697,695,1,0,0,0,698,700,3,48,24,0,699,698,1,0,0,0,699,700,1,0,
        0,0,700,720,1,0,0,0,701,703,5,5,0,0,702,701,1,0,0,0,703,706,1,0,
        0,0,704,702,1,0,0,0,704,705,1,0,0,0,705,707,1,0,0,0,706,704,1,0,
        0,0,707,711,5,26,0,0,708,710,5,5,0,0,709,708,1,0,0,0,710,713,1,0,
        0,0,711,709,1,0,0,0,711,712,1,0,0,0,712,717,1,0,0,0,713,711,1,0,
        0,0,714,716,3,38,19,0,715,714,1,0,0,0,716,719,1,0,0,0,717,715,1,
        0,0,0,717,718,1,0,0,0,718,721,1,0,0,0,719,717,1,0,0,0,720,704,1,
        0,0,0,720,721,1,0,0,0,721,725,1,0,0,0,722,724,5,5,0,0,723,722,1,
        0,0,0,724,727,1,0,0,0,725,723,1,0,0,0,725,726,1,0,0,0,726,728,1,
        0,0,0,727,725,1,0,0,0,728,729,5,14,0,0,729,47,1,0,0,0,730,734,3,
        50,25,0,731,733,5,5,0,0,732,731,1,0,0,0,733,736,1,0,0,0,734,732,
        1,0,0,0,734,735,1,0,0,0,735,738,1,0,0,0,736,734,1,0,0,0,737,730,
        1,0,0,0,738,739,1,0,0,0,739,737,1,0,0,0,739,740,1,0,0,0,740,742,
        1,0,0,0,741,743,5,26,0,0,742,741,1,0,0,0,742,743,1,0,0,0,743,49,
        1,0,0,0,744,746,3,276,138,0,745,744,1,0,0,0,746,749,1,0,0,0,747,
        745,1,0,0,0,747,748,1,0,0,0,748,750,1,0,0,0,749,747,1,0,0,0,750,
        758,3,288,144,0,751,753,5,5,0,0,752,751,1,0,0,0,753,756,1,0,0,0,
        754,752,1,0,0,0,754,755,1,0,0,0,755,757,1,0,0,0,756,754,1,0,0,0,
        757,759,3,156,78,0,758,754,1,0,0,0,758,759,1,0,0,0,759,767,1,0,0,
        0,760,762,5,5,0,0,761,760,1,0,0,0,762,765,1,0,0,0,763,761,1,0,0,
        0,763,764,1,0,0,0,764,766,1,0,0,0,765,763,1,0,0,0,766,768,3,36,18,
        0,767,763,1,0,0,0,767,768,1,0,0,0,768,776,1,0,0,0,769,771,5,5,0,
        0,770,769,1,0,0,0,771,774,1,0,0,0,772,770,1,0,0,0,772,773,1,0,0,
        0,773,775,1,0,0,0,774,772,1,0,0,0,775,777,5,8,0,0,776,772,1,0,0,
        0,776,777,1,0,0,0,777,51,1,0,0,0,778,780,3,252,126,0,779,778,1,0,
        0,0,779,780,1,0,0,0,780,781,1,0,0,0,781,797,5,61,0,0,782,784,5,5,
        0,0,783,782,1,0,0,0,784,787,1,0,0,0,785,783,1,0,0,0,785,786,1,0,
        0,0,786,788,1,0,0,0,787,785,1,0,0,0,788,792,3,84,42,0,789,791,5,
        5,0,0,790,789,1,0,0,0,791,794,1,0,0,0,792,790,1,0,0,0,792,793,1,
        0,0,0,793,795,1,0,0,0,794,792,1,0,0,0,795,796,5,7,0,0,796,798,1,
        0,0,0,797,785,1,0,0,0,797,798,1,0,0,0,798,806,1,0,0,0,799,801,5,
        5,0,0,800,799,1,0,0,0,801,804,1,0,0,0,802,800,1,0,0,0,802,803,1,
        0,0,0,803,805,1,0,0,0,804,802,1,0,0,0,805,807,3,80,40,0,806,802,
        1,0,0,0,806,807,1,0,0,0,807,823,1,0,0,0,808,810,5,5,0,0,809,808,
        1,0,0,0,810,813,1,0,0,0,811,809,1,0,0,0,811,812,1,0,0,0,812,814,
        1,0,0,0,813,811,1,0,0,0,814,818,3,60,30,0,815,817,5,5,0,0,816,815,
        1,0,0,0,817,820,1,0,0,0,818,816,1,0,0,0,818,819,1,0,0,0,819,821,
        1,0,0,0,820,818,1,0,0,0,821,822,5,7,0,0,822,824,1,0,0,0,823,811,
        1,0,0,0,823,824,1,0,0,0,824,832,1,0,0,0,825,827,5,5,0,0,826,825,
        1,0,0,0,827,830,1,0,0,0,828,826,1,0,0,0,828,829,1,0,0,0,829,831,
        1,0,0,0,830,828,1,0,0,0,831,833,3,286,143,0,832,828,1,0,0,0,832,
        833,1,0,0,0,833,837,1,0,0,0,834,836,5,5,0,0,835,834,1,0,0,0,836,
        839,1,0,0,0,837,835,1,0,0,0,837,838,1,0,0,0,838,840,1,0,0,0,839,
        837,1,0,0,0,840,855,3,54,27,0,841,843,5,5,0,0,842,841,1,0,0,0,843,
        846,1,0,0,0,844,842,1,0,0,0,844,845,1,0,0,0,845,847,1,0,0,0,846,
        844,1,0,0,0,847,851,5,25,0,0,848,850,5,5,0,0,849,848,1,0,0,0,850,
        853,1,0,0,0,851,849,1,0,0,0,851,852,1,0,0,0,852,854,1,0,0,0,853,
        851,1,0,0,0,854,856,3,84,42,0,855,844,1,0,0,0,855,856,1,0,0,0,856,
        864,1,0,0,0,857,859,5,5,0,0,858,857,1,0,0,0,859,862,1,0,0,0,860,
        858,1,0,0,0,860,861,1,0,0,0,861,863,1,0,0,0,862,860,1,0,0,0,863,
        865,3,104,52,0,864,860,1,0,0,0,864,865,1,0,0,0,865,873,1,0,0,0,866,
        868,5,5,0,0,867,866,1,0,0,0,868,871,1,0,0,0,869,867,1,0,0,0,869,
        870,1,0,0,0,870,872,1,0,0,0,871,869,1,0,0,0,872,874,3,62,31,0,873,
        869,1,0,0,0,873,874,1,0,0,0,874,53,1,0,0,0,875,887,5,9,0,0,876,881,
        3,56,28,0,877,878,5,8,0,0,878,880,3,56,28,0,879,877,1,0,0,0,880,
        883,1,0,0,0,881,879,1,0,0,0,881,882,1,0,0,0,882,885,1,0,0,0,883,
        881,1,0,0,0,884,886,5,8,0,0,885,884,1,0,0,0,885,886,1,0,0,0,886,
        888,1,0,0,0,887,876,1,0,0,0,887,888,1,0,0,0,888,889,1,0,0,0,889,
        890,5,10,0,0,890,55,1,0,0,0,891,893,3,252,126,0,892,891,1,0,0,0,
        892,893,1,0,0,0,893,894,1,0,0,0,894,897,3,58,29,0,895,896,5,27,0,
        0,896,898,3,118,59,0,897,895,1,0,0,0,897,898,1,0,0,0,898,57,1,0,
        0,0,899,900,3,288,144,0,900,901,5,25,0,0,901,902,3,84,42,0,902,59,
        1,0,0,0,903,905,3,86,43,0,904,903,1,0,0,0,904,905,1,0,0,0,905,909,
        1,0,0,0,906,910,3,88,44,0,907,910,3,90,45,0,908,910,3,92,46,0,909,
        906,1,0,0,0,909,907,1,0,0,0,909,908,1,0,0,0,910,61,1,0,0,0,911,921,
        3,108,54,0,912,916,5,27,0,0,913,915,5,5,0,0,914,913,1,0,0,0,915,
        918,1,0,0,0,916,914,1,0,0,0,916,917,1,0,0,0,917,919,1,0,0,0,918,
        916,1,0,0,0,919,921,3,118,59,0,920,911,1,0,0,0,920,912,1,0,0,0,921,
        63,1,0,0,0,922,924,3,252,126,0,923,922,1,0,0,0,923,924,1,0,0,0,924,
        925,1,0,0,0,925,929,5,62,0,0,926,928,5,5,0,0,927,926,1,0,0,0,928,
        931,1,0,0,0,929,927,1,0,0,0,929,930,1,0,0,0,930,932,1,0,0,0,931,
        929,1,0,0,0,932,940,3,288,144,0,933,935,5,5,0,0,934,933,1,0,0,0,
        935,938,1,0,0,0,936,934,1,0,0,0,936,937,1,0,0,0,937,939,1,0,0,0,
        938,936,1,0,0,0,939,941,3,22,11,0,940,936,1,0,0,0,940,941,1,0,0,
        0,941,956,1,0,0,0,942,944,5,5,0,0,943,942,1,0,0,0,944,947,1,0,0,
        0,945,943,1,0,0,0,945,946,1,0,0,0,946,948,1,0,0,0,947,945,1,0,0,
        0,948,952,5,25,0,0,949,951,5,5,0,0,950,949,1,0,0,0,951,954,1,0,0,
        0,952,950,1,0,0,0,952,953,1,0,0,0,953,955,1,0,0,0,954,952,1,0,0,
        0,955,957,3,28,14,0,956,945,1,0,0,0,956,957,1,0,0,0,957,965,1,0,
        0,0,958,960,5,5,0,0,959,958,1,0,0,0,960,963,1,0,0,0,961,959,1,0,
        0,0,961,962,1,0,0,0,962,964,1,0,0,0,963,961,1,0,0,0,964,966,3,36,
        18,0,965,961,1,0,0,0,965,966,1,0,0,0,966,65,1,0,0,0,967,969,3,252,
        126,0,968,967,1,0,0,0,968,969,1,0,0,0,969,970,1,0,0,0,970,974,5,
        68,0,0,971,973,5,5,0,0,972,971,1,0,0,0,973,976,1,0,0,0,974,972,1,
        0,0,0,974,975,1,0,0,0,975,978,1,0,0,0,976,974,1,0,0,0,977,979,3,
        252,126,0,978,977,1,0,0,0,978,979,1,0,0,0,979,980,1,0,0,0,980,988,
        5,62,0,0,981,983,5,5,0,0,982,981,1,0,0,0,983,986,1,0,0,0,984,982,
        1,0,0,0,984,985,1,0,0,0,985,987,1,0,0,0,986,984,1,0,0,0,987,989,
        3,288,144,0,988,984,1,0,0,0,988,989,1,0,0,0,989,1004,1,0,0,0,990,
        992,5,5,0,0,991,990,1,0,0,0,992,995,1,0,0,0,993,991,1,0,0,0,993,
        994,1,0,0,0,994,996,1,0,0,0,995,993,1,0,0,0,996,1000,5,25,0,0,997,
        999,5,5,0,0,998,997,1,0,0,0,999,1002,1,0,0,0,1000,998,1,0,0,0,1000,
        1001,1,0,0,0,1001,1003,1,0,0,0,1002,1000,1,0,0,0,1003,1005,3,28,
        14,0,1004,993,1,0,0,0,1004,1005,1,0,0,0,1005,1013,1,0,0,0,1006,1008,
        5,5,0,0,1007,1006,1,0,0,0,1008,1011,1,0,0,0,1009,1007,1,0,0,0,1009,
        1010,1,0,0,0,1010,1012,1,0,0,0,1011,1009,1,0,0,0,1012,1014,3,36,
        18,0,1013,1009,1,0,0,0,1013,1014,1,0,0,0,1014,67,1,0,0,0,1015,1017,
        3,252,126,0,1016,1015,1,0,0,0,1016,1017,1,0,0,0,1017,1018,1,0,0,
        0,1018,1026,7,1,0,0,1019,1021,5,5,0,0,1020,1019,1,0,0,0,1021,1024,
        1,0,0,0,1022,1020,1,0,0,0,1022,1023,1,0,0,0,1023,1025,1,0,0,0,1024,
        1022,1,0,0,0,1025,1027,3,80,40,0,1026,1022,1,0,0,0,1026,1027,1,0,
        0,0,1027,1043,1,0,0,0,1028,1030,5,5,0,0,1029,1028,1,0,0,0,1030,1033,
        1,0,0,0,1031,1029,1,0,0,0,1031,1032,1,0,0,0,1032,1034,1,0,0,0,1033,
        1031,1,0,0,0,1034,1038,3,84,42,0,1035,1037,5,5,0,0,1036,1035,1,0,
        0,0,1037,1040,1,0,0,0,1038,1036,1,0,0,0,1038,1039,1,0,0,0,1039,1041,
        1,0,0,0,1040,1038,1,0,0,0,1041,1042,5,7,0,0,1042,1044,1,0,0,0,1043,
        1031,1,0,0,0,1043,1044,1,0,0,0,1044,1048,1,0,0,0,1045,1047,5,5,0,
        0,1046,1045,1,0,0,0,1047,1050,1,0,0,0,1048,1046,1,0,0,0,1048,1049,
        1,0,0,0,1049,1053,1,0,0,0,1050,1048,1,0,0,0,1051,1054,3,70,35,0,
        1052,1054,3,72,36,0,1053,1051,1,0,0,0,1053,1052,1,0,0,0,1054,1062,
        1,0,0,0,1055,1057,5,5,0,0,1056,1055,1,0,0,0,1057,1060,1,0,0,0,1058,
        1056,1,0,0,0,1058,1059,1,0,0,0,1059,1061,1,0,0,0,1060,1058,1,0,0,
        0,1061,1063,3,104,52,0,1062,1058,1,0,0,0,1062,1063,1,0,0,0,1063,
        1078,1,0,0,0,1064,1066,5,5,0,0,1065,1064,1,0,0,0,1066,1069,1,0,0,
        0,1067,1065,1,0,0,0,1067,1068,1,0,0,0,1068,1070,1,0,0,0,1069,1067,
        1,0,0,0,1070,1074,7,2,0,0,1071,1073,5,5,0,0,1072,1071,1,0,0,0,1073,
        1076,1,0,0,0,1074,1072,1,0,0,0,1074,1075,1,0,0,0,1075,1077,1,0,0,
        0,1076,1074,1,0,0,0,1077,1079,3,118,59,0,1078,1067,1,0,0,0,1078,
        1079,1,0,0,0,1079,1104,1,0,0,0,1080,1082,5,5,0,0,1081,1080,1,0,0,
        0,1082,1085,1,0,0,0,1083,1081,1,0,0,0,1083,1084,1,0,0,0,1084,1086,
        1,0,0,0,1085,1083,1,0,0,0,1086,1090,3,74,37,0,1087,1088,3,290,145,
        0,1088,1089,3,76,38,0,1089,1091,1,0,0,0,1090,1087,1,0,0,0,1090,1091,
        1,0,0,0,1091,1105,1,0,0,0,1092,1094,5,5,0,0,1093,1092,1,0,0,0,1094,
        1097,1,0,0,0,1095,1093,1,0,0,0,1095,1096,1,0,0,0,1096,1098,1,0,0,
        0,1097,1095,1,0,0,0,1098,1102,3,76,38,0,1099,1100,3,290,145,0,1100,
        1101,3,74,37,0,1101,1103,1,0,0,0,1102,1099,1,0,0,0,1102,1103,1,0,
        0,0,1103,1105,1,0,0,0,1104,1083,1,0,0,0,1104,1095,1,0,0,0,1104,1105,
        1,0,0,0,1105,69,1,0,0,0,1106,1107,5,9,0,0,1107,1112,3,72,36,0,1108,
        1109,5,8,0,0,1109,1111,3,72,36,0,1110,1108,1,0,0,0,1111,1114,1,0,
        0,0,1112,1110,1,0,0,0,1112,1113,1,0,0,0,1113,1115,1,0,0,0,1114,1112,
        1,0,0,0,1115,1116,5,10,0,0,1116,71,1,0,0,0,1117,1120,5,141,0,0,1118,
        1119,5,25,0,0,1119,1121,3,84,42,0,1120,1118,1,0,0,0,1120,1121,1,
        0,0,0,1121,1128,1,0,0,0,1122,1125,5,140,0,0,1123,1124,5,172,0,0,
        1124,1126,3,84,42,0,1125,1123,1,0,0,0,1125,1126,1,0,0,0,1126,1128,
        1,0,0,0,1127,1117,1,0,0,0,1127,1122,1,0,0,0,1128,73,1,0,0,0,1129,
        1131,3,252,126,0,1130,1129,1,0,0,0,1130,1131,1,0,0,0,1131,1132,1,
        0,0,0,1132,1179,5,97,0,0,1133,1135,3,252,126,0,1134,1133,1,0,0,0,
        1134,1135,1,0,0,0,1135,1136,1,0,0,0,1136,1140,5,97,0,0,1137,1139,
        5,5,0,0,1138,1137,1,0,0,0,1139,1142,1,0,0,0,1140,1138,1,0,0,0,1140,
        1141,1,0,0,0,1141,1143,1,0,0,0,1142,1140,1,0,0,0,1143,1144,5,9,0,
        0,1144,1159,5,10,0,0,1145,1147,5,5,0,0,1146,1145,1,0,0,0,1147,1150,
        1,0,0,0,1148,1146,1,0,0,0,1148,1149,1,0,0,0,1149,1151,1,0,0,0,1150,
        1148,1,0,0,0,1151,1155,5,25,0,0,1152,1154,5,5,0,0,1153,1152,1,0,
        0,0,1154,1157,1,0,0,0,1155,1153,1,0,0,0,1155,1156,1,0,0,0,1156,1158,
        1,0,0,0,1157,1155,1,0,0,0,1158,1160,3,84,42,0,1159,1148,1,0,0,0,
        1159,1160,1,0,0,0,1160,1164,1,0,0,0,1161,1163,5,5,0,0,1162,1161,
        1,0,0,0,1163,1166,1,0,0,0,1164,1162,1,0,0,0,1164,1165,1,0,0,0,1165,
        1176,1,0,0,0,1166,1164,1,0,0,0,1167,1177,3,108,54,0,1168,1172,5,
        27,0,0,1169,1171,5,5,0,0,1170,1169,1,0,0,0,1171,1174,1,0,0,0,1172,
        1170,1,0,0,0,1172,1173,1,0,0,0,1173,1175,1,0,0,0,1174,1172,1,0,0,
        0,1175,1177,3,118,59,0,1176,1167,1,0,0,0,1176,1168,1,0,0,0,1177,
        1179,1,0,0,0,1178,1130,1,0,0,0,1178,1134,1,0,0,0,1179,75,1,0,0,0,
        1180,1182,3,252,126,0,1181,1180,1,0,0,0,1181,1182,1,0,0,0,1182,1183,
        1,0,0,0,1183,1216,5,98,0,0,1184,1186,3,252,126,0,1185,1184,1,0,0,
        0,1185,1186,1,0,0,0,1186,1187,1,0,0,0,1187,1191,5,98,0,0,1188,1190,
        5,5,0,0,1189,1188,1,0,0,0,1190,1193,1,0,0,0,1191,1189,1,0,0,0,1191,
        1192,1,0,0,0,1192,1194,1,0,0,0,1193,1191,1,0,0,0,1194,1199,5,9,0,
        0,1195,1198,3,276,138,0,1196,1198,3,270,135,0,1197,1195,1,0,0,0,
        1197,1196,1,0,0,0,1198,1201,1,0,0,0,1199,1197,1,0,0,0,1199,1200,
        1,0,0,0,1200,1204,1,0,0,0,1201,1199,1,0,0,0,1202,1205,3,288,144,
        0,1203,1205,3,58,29,0,1204,1202,1,0,0,0,1204,1203,1,0,0,0,1205,1206,
        1,0,0,0,1206,1210,5,10,0,0,1207,1209,5,5,0,0,1208,1207,1,0,0,0,1209,
        1212,1,0,0,0,1210,1208,1,0,0,0,1210,1211,1,0,0,0,1211,1213,1,0,0,
        0,1212,1210,1,0,0,0,1213,1214,3,62,31,0,1214,1216,1,0,0,0,1215,1181,
        1,0,0,0,1215,1185,1,0,0,0,1216,77,1,0,0,0,1217,1219,3,252,126,0,
        1218,1217,1,0,0,0,1218,1219,1,0,0,0,1219,1220,1,0,0,0,1220,1224,
        5,65,0,0,1221,1223,5,5,0,0,1222,1221,1,0,0,0,1223,1226,1,0,0,0,1224,
        1222,1,0,0,0,1224,1225,1,0,0,0,1225,1227,1,0,0,0,1226,1224,1,0,0,
        0,1227,1235,3,288,144,0,1228,1230,5,5,0,0,1229,1228,1,0,0,0,1230,
        1233,1,0,0,0,1231,1229,1,0,0,0,1231,1232,1,0,0,0,1232,1234,1,0,0,
        0,1233,1231,1,0,0,0,1234,1236,3,80,40,0,1235,1231,1,0,0,0,1235,1236,
        1,0,0,0,1236,1240,1,0,0,0,1237,1239,5,5,0,0,1238,1237,1,0,0,0,1239,
        1242,1,0,0,0,1240,1238,1,0,0,0,1240,1241,1,0,0,0,1241,1243,1,0,0,
        0,1242,1240,1,0,0,0,1243,1247,5,27,0,0,1244,1246,5,5,0,0,1245,1244,
        1,0,0,0,1246,1249,1,0,0,0,1247,1245,1,0,0,0,1247,1248,1,0,0,0,1248,
        1250,1,0,0,0,1249,1247,1,0,0,0,1250,1251,3,84,42,0,1251,79,1,0,0,
        0,1252,1256,5,43,0,0,1253,1255,5,5,0,0,1254,1253,1,0,0,0,1255,1258,
        1,0,0,0,1256,1254,1,0,0,0,1256,1257,1,0,0,0,1257,1259,1,0,0,0,1258,
        1256,1,0,0,0,1259,1276,3,82,41,0,1260,1262,5,5,0,0,1261,1260,1,0,
        0,0,1262,1265,1,0,0,0,1263,1261,1,0,0,0,1263,1264,1,0,0,0,1264,1266,
        1,0,0,0,1265,1263,1,0,0,0,1266,1270,5,8,0,0,1267,1269,5,5,0,0,1268,
        1267,1,0,0,0,1269,1272,1,0,0,0,1270,1268,1,0,0,0,1270,1271,1,0,0,
        0,1271,1273,1,0,0,0,1272,1270,1,0,0,0,1273,1275,3,82,41,0,1274,1263,
        1,0,0,0,1275,1278,1,0,0,0,1276,1274,1,0,0,0,1276,1277,1,0,0,0,1277,
        1286,1,0,0,0,1278,1276,1,0,0,0,1279,1281,5,5,0,0,1280,1279,1,0,0,
        0,1281,1284,1,0,0,0,1282,1280,1,0,0,0,1282,1283,1,0,0,0,1283,1285,
        1,0,0,0,1284,1282,1,0,0,0,1285,1287,5,8,0,0,1286,1282,1,0,0,0,1286,
        1287,1,0,0,0,1287,1291,1,0,0,0,1288,1290,5,5,0,0,1289,1288,1,0,0,
        0,1290,1293,1,0,0,0,1291,1289,1,0,0,0,1291,1292,1,0,0,0,1292,1294,
        1,0,0,0,1293,1291,1,0,0,0,1294,1295,5,44,0,0,1295,81,1,0,0,0,1296,
        1298,3,252,126,0,1297,1296,1,0,0,0,1297,1298,1,0,0,0,1298,1302,1,
        0,0,0,1299,1301,5,5,0,0,1300,1299,1,0,0,0,1301,1304,1,0,0,0,1302,
        1300,1,0,0,0,1302,1303,1,0,0,0,1303,1307,1,0,0,0,1304,1302,1,0,0,
        0,1305,1308,3,288,144,0,1306,1308,5,15,0,0,1307,1305,1,0,0,0,1307,
        1306,1,0,0,0,1308,1323,1,0,0,0,1309,1311,5,5,0,0,1310,1309,1,0,0,
        0,1311,1314,1,0,0,0,1312,1310,1,0,0,0,1312,1313,1,0,0,0,1313,1315,
        1,0,0,0,1314,1312,1,0,0,0,1315,1319,5,25,0,0,1316,1318,5,5,0,0,1317,
        1316,1,0,0,0,1318,1321,1,0,0,0,1319,1317,1,0,0,0,1319,1320,1,0,0,
        0,1320,1322,1,0,0,0,1321,1319,1,0,0,0,1322,1324,3,84,42,0,1323,1312,
        1,0,0,0,1323,1324,1,0,0,0,1324,83,1,0,0,0,1325,1327,3,86,43,0,1326,
        1325,1,0,0,0,1326,1327,1,0,0,0,1327,1332,1,0,0,0,1328,1333,3,94,
        47,0,1329,1333,3,88,44,0,1330,1333,3,90,45,0,1331,1333,3,92,46,0,
        1332,1328,1,0,0,0,1332,1329,1,0,0,0,1332,1330,1,0,0,0,1332,1331,
        1,0,0,0,1333,85,1,0,0,0,1334,1343,3,276,138,0,1335,1339,5,118,0,
        0,1336,1338,5,5,0,0,1337,1336,1,0,0,0,1338,1341,1,0,0,0,1339,1337,
        1,0,0,0,1339,1340,1,0,0,0,1340,1343,1,0,0,0,1341,1339,1,0,0,0,1342,
        1334,1,0,0,0,1342,1335,1,0,0,0,1343,1344,1,0,0,0,1344,1342,1,0,0,
        0,1344,1345,1,0,0,0,1345,87,1,0,0,0,1346,1347,5,9,0,0,1347,1348,
        3,84,42,0,1348,1349,5,10,0,0,1349,89,1,0,0,0,1350,1353,3,92,46,0,
        1351,1353,3,88,44,0,1352,1350,1,0,0,0,1352,1351,1,0,0,0,1353,1357,
        1,0,0,0,1354,1356,5,5,0,0,1355,1354,1,0,0,0,1356,1359,1,0,0,0,1357,
        1355,1,0,0,0,1357,1358,1,0,0,0,1358,1361,1,0,0,0,1359,1357,1,0,0,
        0,1360,1362,5,41,0,0,1361,1360,1,0,0,0,1362,1363,1,0,0,0,1363,1361,
        1,0,0,0,1363,1364,1,0,0,0,1364,91,1,0,0,0,1365,1366,5,9,0,0,1366,
        1367,3,92,46,0,1367,1368,5,10,0,0,1368,1372,1,0,0,0,1369,1372,3,
        98,49,0,1370,1372,5,103,0,0,1371,1365,1,0,0,0,1371,1369,1,0,0,0,
        1371,1370,1,0,0,0,1372,93,1,0,0,0,1373,1377,3,96,48,0,1374,1376,
        5,5,0,0,1375,1374,1,0,0,0,1376,1379,1,0,0,0,1377,1375,1,0,0,0,1377,
        1378,1,0,0,0,1378,1380,1,0,0,0,1379,1377,1,0,0,0,1380,1384,5,7,0,
        0,1381,1383,5,5,0,0,1382,1381,1,0,0,0,1383,1386,1,0,0,0,1384,1382,
        1,0,0,0,1384,1385,1,0,0,0,1385,1388,1,0,0,0,1386,1384,1,0,0,0,1387,
        1373,1,0,0,0,1387,1388,1,0,0,0,1388,1389,1,0,0,0,1389,1393,3,102,
        51,0,1390,1392,5,5,0,0,1391,1390,1,0,0,0,1392,1395,1,0,0,0,1393,
        1391,1,0,0,0,1393,1394,1,0,0,0,1394,1396,1,0,0,0,1395,1393,1,0,0,
        0,1396,1400,5,33,0,0,1397,1399,5,5,0,0,1398,1397,1,0,0,0,1399,1402,
        1,0,0,0,1400,1398,1,0,0,0,1400,1401,1,0,0,0,1401,1403,1,0,0,0,1402,
        1400,1,0,0,0,1403,1404,3,84,42,0,1404,95,1,0,0,0,1405,1409,3,88,
        44,0,1406,1409,3,90,45,0,1407,1409,3,92,46,0,1408,1405,1,0,0,0,1408,
        1406,1,0,0,0,1408,1407,1,0,0,0,1409,97,1,0,0,0,1410,1427,3,100,50,
        0,1411,1413,5,5,0,0,1412,1411,1,0,0,0,1413,1416,1,0,0,0,1414,1412,
        1,0,0,0,1414,1415,1,0,0,0,1415,1417,1,0,0,0,1416,1414,1,0,0,0,1417,
        1421,5,7,0,0,1418,1420,5,5,0,0,1419,1418,1,0,0,0,1420,1423,1,0,0,
        0,1421,1419,1,0,0,0,1421,1422,1,0,0,0,1422,1424,1,0,0,0,1423,1421,
        1,0,0,0,1424,1426,3,100,50,0,1425,1414,1,0,0,0,1426,1429,1,0,0,0,
        1427,1425,1,0,0,0,1427,1428,1,0,0,0,1428,99,1,0,0,0,1429,1427,1,
        0,0,0,1430,1438,3,288,144,0,1431,1433,5,5,0,0,1432,1431,1,0,0,0,
        1433,1436,1,0,0,0,1434,1432,1,0,0,0,1434,1435,1,0,0,0,1435,1437,
        1,0,0,0,1436,1434,1,0,0,0,1437,1439,3,158,79,0,1438,1434,1,0,0,0,
        1438,1439,1,0,0,0,1439,101,1,0,0,0,1440,1444,5,9,0,0,1441,1443,5,
        5,0,0,1442,1441,1,0,0,0,1443,1446,1,0,0,0,1444,1442,1,0,0,0,1444,
        1445,1,0,0,0,1445,1449,1,0,0,0,1446,1444,1,0,0,0,1447,1450,3,58,
        29,0,1448,1450,3,84,42,0,1449,1447,1,0,0,0,1449,1448,1,0,0,0,1449,
        1450,1,0,0,0,1450,1470,1,0,0,0,1451,1453,5,5,0,0,1452,1451,1,0,0,
        0,1453,1456,1,0,0,0,1454,1452,1,0,0,0,1454,1455,1,0,0,0,1455,1457,
        1,0,0,0,1456,1454,1,0,0,0,1457,1461,5,8,0,0,1458,1460,5,5,0,0,1459,
        1458,1,0,0,0,1460,1463,1,0,0,0,1461,1459,1,0,0,0,1461,1462,1,0,0,
        0,1462,1466,1,0,0,0,1463,1461,1,0,0,0,1464,1467,3,58,29,0,1465,1467,
        3,84,42,0,1466,1464,1,0,0,0,1466,1465,1,0,0,0,1467,1469,1,0,0,0,
        1468,1454,1,0,0,0,1469,1472,1,0,0,0,1470,1468,1,0,0,0,1470,1471,
        1,0,0,0,1471,1480,1,0,0,0,1472,1470,1,0,0,0,1473,1475,5,5,0,0,1474,
        1473,1,0,0,0,1475,1478,1,0,0,0,1476,1474,1,0,0,0,1476,1477,1,0,0,
        0,1477,1479,1,0,0,0,1478,1476,1,0,0,0,1479,1481,5,8,0,0,1480,1476,
        1,0,0,0,1480,1481,1,0,0,0,1481,1485,1,0,0,0,1482,1484,5,5,0,0,1483,
        1482,1,0,0,0,1484,1487,1,0,0,0,1485,1483,1,0,0,0,1485,1486,1,0,0,
        0,1486,1488,1,0,0,0,1487,1485,1,0,0,0,1488,1489,5,10,0,0,1489,103,
        1,0,0,0,1490,1494,5,73,0,0,1491,1493,5,5,0,0,1492,1491,1,0,0,0,1493,
        1496,1,0,0,0,1494,1492,1,0,0,0,1494,1495,1,0,0,0,1495,1497,1,0,0,
        0,1496,1494,1,0,0,0,1497,1514,3,106,53,0,1498,1500,5,5,0,0,1499,
        1498,1,0,0,0,1500,1503,1,0,0,0,1501,1499,1,0,0,0,1501,1502,1,0,0,
        0,1502,1504,1,0,0,0,1503,1501,1,0,0,0,1504,1508,5,8,0,0,1505,1507,
        5,5,0,0,1506,1505,1,0,0,0,1507,1510,1,0,0,0,1508,1506,1,0,0,0,1508,
        1509,1,0,0,0,1509,1511,1,0,0,0,1510,1508,1,0,0,0,1511,1513,3,106,
        53,0,1512,1501,1,0,0,0,1513,1516,1,0,0,0,1514,1512,1,0,0,0,1514,
        1515,1,0,0,0,1515,105,1,0,0,0,1516,1514,1,0,0,0,1517,1519,3,276,
        138,0,1518,1517,1,0,0,0,1519,1522,1,0,0,0,1520,1518,1,0,0,0,1520,
        1521,1,0,0,0,1521,1523,1,0,0,0,1522,1520,1,0,0,0,1523,1527,3,288,
        144,0,1524,1526,5,5,0,0,1525,1524,1,0,0,0,1526,1529,1,0,0,0,1527,
        1525,1,0,0,0,1527,1528,1,0,0,0,1528,1530,1,0,0,0,1529,1527,1,0,0,
        0,1530,1534,5,25,0,0,1531,1533,5,5,0,0,1532,1531,1,0,0,0,1533,1536,
        1,0,0,0,1534,1532,1,0,0,0,1534,1535,1,0,0,0,1535,1537,1,0,0,0,1536,
        1534,1,0,0,0,1537,1538,3,84,42,0,1538,107,1,0,0,0,1539,1540,5,13,
        0,0,1540,1541,3,110,55,0,1541,1542,5,14,0,0,1542,109,1,0,0,0,1543,
        1545,3,292,146,0,1544,1543,1,0,0,0,1545,1548,1,0,0,0,1546,1544,1,
        0,0,0,1546,1547,1,0,0,0,1547,1563,1,0,0,0,1548,1546,1,0,0,0,1549,
        1560,3,112,56,0,1550,1552,3,292,146,0,1551,1550,1,0,0,0,1552,1553,
        1,0,0,0,1553,1551,1,0,0,0,1553,1554,1,0,0,0,1554,1556,1,0,0,0,1555,
        1557,3,112,56,0,1556,1555,1,0,0,0,1556,1557,1,0,0,0,1557,1559,1,
        0,0,0,1558,1551,1,0,0,0,1559,1562,1,0,0,0,1560,1558,1,0,0,0,1560,
        1561,1,0,0,0,1561,1564,1,0,0,0,1562,1560,1,0,0,0,1563,1549,1,0,0,
        0,1563,1564,1,0,0,0,1564,111,1,0,0,0,1565,1568,3,116,58,0,1566,1568,
        3,114,57,0,1567,1565,1,0,0,0,1567,1566,1,0,0,0,1568,113,1,0,0,0,
        1569,1571,3,276,138,0,1570,1569,1,0,0,0,1571,1574,1,0,0,0,1572,1570,
        1,0,0,0,1572,1573,1,0,0,0,1573,1578,1,0,0,0,1574,1572,1,0,0,0,1575,
        1577,5,5,0,0,1576,1575,1,0,0,0,1577,1580,1,0,0,0,1578,1576,1,0,0,
        0,1578,1579,1,0,0,0,1579,1581,1,0,0,0,1580,1578,1,0,0,0,1581,1582,
        3,118,59,0,1582,115,1,0,0,0,1583,1585,3,274,137,0,1584,1583,1,0,
        0,0,1585,1588,1,0,0,0,1586,1584,1,0,0,0,1586,1587,1,0,0,0,1587,1593,
        1,0,0,0,1588,1586,1,0,0,0,1589,1594,3,20,10,0,1590,1594,3,52,26,
        0,1591,1594,3,68,34,0,1592,1594,3,78,39,0,1593,1589,1,0,0,0,1593,
        1590,1,0,0,0,1593,1591,1,0,0,0,1593,1592,1,0,0,0,1594,117,1,0,0,
        0,1595,1601,3,120,60,0,1596,1597,3,230,115,0,1597,1598,3,120,60,
        0,1598,1600,1,0,0,0,1599,1596,1,0,0,0,1600,1603,1,0,0,0,1601,1599,
        1,0,0,0,1601,1602,1,0,0,0,1602,119,1,0,0,0,1603,1601,1,0,0,0,1604,
        1621,3,122,61,0,1605,1607,5,5,0,0,1606,1605,1,0,0,0,1607,1610,1,
        0,0,0,1608,1606,1,0,0,0,1608,1609,1,0,0,0,1609,1611,1,0,0,0,1610,
        1608,1,0,0,0,1611,1615,5,23,0,0,1612,1614,5,5,0,0,1613,1612,1,0,
        0,0,1614,1617,1,0,0,0,1615,1613,1,0,0,0,1615,1616,1,0,0,0,1616,1618,
        1,0,0,0,1617,1615,1,0,0,0,1618,1620,3,122,61,0,1619,1608,1,0,0,0,
        1620,1623,1,0,0,0,1621,1619,1,0,0,0,1621,1622,1,0,0,0,1622,121,1,
        0,0,0,1623,1621,1,0,0,0,1624,1641,3,124,62,0,1625,1627,5,5,0,0,1626,
        1625,1,0,0,0,1627,1630,1,0,0,0,1628,1626,1,0,0,0,1628,1629,1,0,0,
        0,1629,1631,1,0,0,0,1630,1628,1,0,0,0,1631,1635,5,22,0,0,1632,1634,
        5,5,0,0,1633,1632,1,0,0,0,1634,1637,1,0,0,0,1635,1633,1,0,0,0,1635,
        1636,1,0,0,0,1636,1638,1,0,0,0,1637,1635,1,0,0,0,1638,1640,3,124,
        62,0,1639,1628,1,0,0,0,1640,1643,1,0,0,0,1641,1639,1,0,0,0,1641,
        1642,1,0,0,0,1642,123,1,0,0,0,1643,1641,1,0,0,0,1644,1656,3,126,
        63,0,1645,1649,3,232,116,0,1646,1648,5,5,0,0,1647,1646,1,0,0,0,1648,
        1651,1,0,0,0,1649,1647,1,0,0,0,1649,1650,1,0,0,0,1650,1652,1,0,0,
        0,1651,1649,1,0,0,0,1652,1653,3,126,63,0,1653,1655,1,0,0,0,1654,
        1645,1,0,0,0,1655,1658,1,0,0,0,1656,1654,1,0,0,0,1656,1657,1,0,0,
        0,1657,125,1,0,0,0,1658,1656,1,0,0,0,1659,1669,3,128,64,0,1660,1664,
        3,234,117,0,1661,1663,5,5,0,0,1662,1661,1,0,0,0,1663,1666,1,0,0,
        0,1664,1662,1,0,0,0,1664,1665,1,0,0,0,1665,1667,1,0,0,0,1666,1664,
        1,0,0,0,1667,1668,3,128,64,0,1668,1670,1,0,0,0,1669,1660,1,0,0,0,
        1669,1670,1,0,0,0,1670,127,1,0,0,0,1671,1694,3,130,65,0,1672,1676,
        3,236,118,0,1673,1675,5,5,0,0,1674,1673,1,0,0,0,1675,1678,1,0,0,
        0,1676,1674,1,0,0,0,1676,1677,1,0,0,0,1677,1679,1,0,0,0,1678,1676,
        1,0,0,0,1679,1680,3,130,65,0,1680,1682,1,0,0,0,1681,1672,1,0,0,0,
        1682,1683,1,0,0,0,1683,1681,1,0,0,0,1683,1684,1,0,0,0,1684,1695,
        1,0,0,0,1685,1689,3,238,119,0,1686,1688,5,5,0,0,1687,1686,1,0,0,
        0,1688,1691,1,0,0,0,1689,1687,1,0,0,0,1689,1690,1,0,0,0,1690,1692,
        1,0,0,0,1691,1689,1,0,0,0,1692,1693,3,84,42,0,1693,1695,1,0,0,0,
        1694,1681,1,0,0,0,1694,1685,1,0,0,0,1694,1695,1,0,0,0,1695,129,1,
        0,0,0,1696,1713,3,132,66,0,1697,1699,5,5,0,0,1698,1697,1,0,0,0,1699,
        1702,1,0,0,0,1700,1698,1,0,0,0,1700,1701,1,0,0,0,1701,1703,1,0,0,
        0,1702,1700,1,0,0,0,1703,1707,5,42,0,0,1704,1706,5,5,0,0,1705,1704,
        1,0,0,0,1706,1709,1,0,0,0,1707,1705,1,0,0,0,1707,1708,1,0,0,0,1708,
        1710,1,0,0,0,1709,1707,1,0,0,0,1710,1712,3,132,66,0,1711,1700,1,
        0,0,0,1712,1715,1,0,0,0,1713,1711,1,0,0,0,1713,1714,1,0,0,0,1714,
        131,1,0,0,0,1715,1713,1,0,0,0,1716,1728,3,134,67,0,1717,1721,3,288,
        144,0,1718,1720,5,5,0,0,1719,1718,1,0,0,0,1720,1723,1,0,0,0,1721,
        1719,1,0,0,0,1721,1722,1,0,0,0,1722,1724,1,0,0,0,1723,1721,1,0,0,
        0,1724,1725,3,134,67,0,1725,1727,1,0,0,0,1726,1717,1,0,0,0,1727,
        1730,1,0,0,0,1728,1726,1,0,0,0,1728,1729,1,0,0,0,1729,133,1,0,0,
        0,1730,1728,1,0,0,0,1731,1742,3,136,68,0,1732,1736,5,35,0,0,1733,
        1735,5,5,0,0,1734,1733,1,0,0,0,1735,1738,1,0,0,0,1736,1734,1,0,0,
        0,1736,1737,1,0,0,0,1737,1739,1,0,0,0,1738,1736,1,0,0,0,1739,1741,
        3,136,68,0,1740,1732,1,0,0,0,1741,1744,1,0,0,0,1742,1740,1,0,0,0,
        1742,1743,1,0,0,0,1743,135,1,0,0,0,1744,1742,1,0,0,0,1745,1757,3,
        138,69,0,1746,1750,3,240,120,0,1747,1749,5,5,0,0,1748,1747,1,0,0,
        0,1749,1752,1,0,0,0,1750,1748,1,0,0,0,1750,1751,1,0,0,0,1751,1753,
        1,0,0,0,1752,1750,1,0,0,0,1753,1754,3,138,69,0,1754,1756,1,0,0,0,
        1755,1746,1,0,0,0,1756,1759,1,0,0,0,1757,1755,1,0,0,0,1757,1758,
        1,0,0,0,1758,137,1,0,0,0,1759,1757,1,0,0,0,1760,1772,3,140,70,0,
        1761,1765,3,242,121,0,1762,1764,5,5,0,0,1763,1762,1,0,0,0,1764,1767,
        1,0,0,0,1765,1763,1,0,0,0,1765,1766,1,0,0,0,1766,1768,1,0,0,0,1767,
        1765,1,0,0,0,1768,1769,3,140,70,0,1769,1771,1,0,0,0,1770,1761,1,
        0,0,0,1771,1774,1,0,0,0,1772,1770,1,0,0,0,1772,1773,1,0,0,0,1773,
        139,1,0,0,0,1774,1772,1,0,0,0,1775,1787,3,142,71,0,1776,1778,5,5,
        0,0,1777,1776,1,0,0,0,1778,1781,1,0,0,0,1779,1777,1,0,0,0,1779,1780,
        1,0,0,0,1780,1782,1,0,0,0,1781,1779,1,0,0,0,1782,1783,3,244,122,
        0,1783,1784,3,142,71,0,1784,1786,1,0,0,0,1785,1779,1,0,0,0,1786,
        1789,1,0,0,0,1787,1785,1,0,0,0,1787,1788,1,0,0,0,1788,141,1,0,0,
        0,1789,1787,1,0,0,0,1790,1792,3,246,123,0,1791,1790,1,0,0,0,1792,
        1795,1,0,0,0,1793,1791,1,0,0,0,1793,1794,1,0,0,0,1794,1796,1,0,0,
        0,1795,1793,1,0,0,0,1796,1797,3,144,72,0,1797,143,1,0,0,0,1798,1801,
        3,146,73,0,1799,1801,3,228,114,0,1800,1798,1,0,0,0,1800,1799,1,0,
        0,0,1801,1805,1,0,0,0,1802,1804,3,248,124,0,1803,1802,1,0,0,0,1804,
        1807,1,0,0,0,1805,1803,1,0,0,0,1805,1806,1,0,0,0,1806,145,1,0,0,
        0,1807,1805,1,0,0,0,1808,1823,3,148,74,0,1809,1823,3,166,83,0,1810,
        1823,3,182,91,0,1811,1823,3,192,96,0,1812,1823,3,194,97,0,1813,1823,
        3,196,98,0,1814,1823,3,212,106,0,1815,1823,3,188,94,0,1816,1823,
        3,226,113,0,1817,1823,3,218,109,0,1818,1823,3,190,95,0,1819,1823,
        3,288,144,0,1820,1821,5,63,0,0,1821,1823,3,286,143,0,1822,1808,1,
        0,0,0,1822,1809,1,0,0,0,1822,1810,1,0,0,0,1822,1811,1,0,0,0,1822,
        1812,1,0,0,0,1822,1813,1,0,0,0,1822,1814,1,0,0,0,1822,1815,1,0,0,
        0,1822,1816,1,0,0,0,1822,1817,1,0,0,0,1822,1818,1,0,0,0,1822,1819,
        1,0,0,0,1822,1820,1,0,0,0,1823,147,1,0,0,0,1824,1825,5,9,0,0,1825,
        1826,3,118,59,0,1826,1827,5,10,0,0,1827,149,1,0,0,0,1828,1830,3,
        158,79,0,1829,1831,3,156,78,0,1830,1829,1,0,0,0,1830,1831,1,0,0,
        0,1831,1835,1,0,0,0,1832,1834,3,152,76,0,1833,1832,1,0,0,0,1834,
        1837,1,0,0,0,1835,1833,1,0,0,0,1835,1836,1,0,0,0,1836,1851,1,0,0,
        0,1837,1835,1,0,0,0,1838,1842,3,156,78,0,1839,1841,3,152,76,0,1840,
        1839,1,0,0,0,1841,1844,1,0,0,0,1842,1840,1,0,0,0,1842,1843,1,0,0,
        0,1843,1851,1,0,0,0,1844,1842,1,0,0,0,1845,1847,3,152,76,0,1846,
        1845,1,0,0,0,1847,1848,1,0,0,0,1848,1846,1,0,0,0,1848,1849,1,0,0,
        0,1849,1851,1,0,0,0,1850,1828,1,0,0,0,1850,1838,1,0,0,0,1850,1846,
        1,0,0,0,1851,151,1,0,0,0,1852,1854,3,284,142,0,1853,1852,1,0,0,0,
        1854,1857,1,0,0,0,1855,1853,1,0,0,0,1855,1856,1,0,0,0,1856,1859,
        1,0,0,0,1857,1855,1,0,0,0,1858,1860,5,143,0,0,1859,1858,1,0,0,0,
        1859,1860,1,0,0,0,1860,1864,1,0,0,0,1861,1863,5,5,0,0,1862,1861,
        1,0,0,0,1863,1866,1,0,0,0,1864,1862,1,0,0,0,1864,1865,1,0,0,0,1865,
        1867,1,0,0,0,1866,1864,1,0,0,0,1867,1868,3,182,91,0,1868,153,1,0,
        0,0,1869,1878,5,11,0,0,1870,1875,3,118,59,0,1871,1872,5,8,0,0,1872,
        1874,3,118,59,0,1873,1871,1,0,0,0,1874,1877,1,0,0,0,1875,1873,1,
        0,0,0,1875,1876,1,0,0,0,1876,1879,1,0,0,0,1877,1875,1,0,0,0,1878,
        1870,1,0,0,0,1878,1879,1,0,0,0,1879,1880,1,0,0,0,1880,1881,5,12,
        0,0,1881,155,1,0,0,0,1882,1900,5,9,0,0,1883,1888,3,164,82,0,1884,
        1885,5,8,0,0,1885,1887,3,164,82,0,1886,1884,1,0,0,0,1887,1890,1,
        0,0,0,1888,1886,1,0,0,0,1888,1889,1,0,0,0,1889,1898,1,0,0,0,1890,
        1888,1,0,0,0,1891,1893,5,5,0,0,1892,1891,1,0,0,0,1893,1896,1,0,0,
        0,1894,1892,1,0,0,0,1894,1895,1,0,0,0,1895,1897,1,0,0,0,1896,1894,
        1,0,0,0,1897,1899,5,8,0,0,1898,1894,1,0,0,0,1898,1899,1,0,0,0,1899,
        1901,1,0,0,0,1900,1883,1,0,0,0,1900,1901,1,0,0,0,1901,1902,1,0,0,
        0,1902,1903,5,10,0,0,1903,157,1,0,0,0,1904,1908,5,43,0,0,1905,1907,
        5,5,0,0,1906,1905,1,0,0,0,1907,1910,1,0,0,0,1908,1906,1,0,0,0,1908,
        1909,1,0,0,0,1909,1911,1,0,0,0,1910,1908,1,0,0,0,1911,1922,3,160,
        80,0,1912,1914,5,5,0,0,1913,1912,1,0,0,0,1914,1917,1,0,0,0,1915,
        1913,1,0,0,0,1915,1916,1,0,0,0,1916,1918,1,0,0,0,1917,1915,1,0,0,
        0,1918,1919,5,8,0,0,1919,1921,3,160,80,0,1920,1915,1,0,0,0,1921,
        1924,1,0,0,0,1922,1920,1,0,0,0,1922,1923,1,0,0,0,1923,1932,1,0,0,
        0,1924,1922,1,0,0,0,1925,1927,5,5,0,0,1926,1925,1,0,0,0,1927,1930,
        1,0,0,0,1928,1926,1,0,0,0,1928,1929,1,0,0,0,1929,1931,1,0,0,0,1930,
        1928,1,0,0,0,1931,1933,5,8,0,0,1932,1928,1,0,0,0,1932,1933,1,0,0,
        0,1933,1937,1,0,0,0,1934,1936,5,5,0,0,1935,1934,1,0,0,0,1936,1939,
        1,0,0,0,1937,1935,1,0,0,0,1937,1938,1,0,0,0,1938,1940,1,0,0,0,1939,
        1937,1,0,0,0,1940,1942,5,44,0,0,1941,1943,5,41,0,0,1942,1941,1,0,
        0,0,1942,1943,1,0,0,0,1943,159,1,0,0,0,1944,1946,3,162,81,0,1945,
        1944,1,0,0,0,1945,1946,1,0,0,0,1946,1947,1,0,0,0,1947,1950,3,84,
        42,0,1948,1950,5,15,0,0,1949,1945,1,0,0,0,1949,1948,1,0,0,0,1950,
        161,1,0,0,0,1951,1953,3,262,131,0,1952,1951,1,0,0,0,1953,1954,1,
        0,0,0,1954,1952,1,0,0,0,1954,1955,1,0,0,0,1955,163,1,0,0,0,1956,
        1960,3,288,144,0,1957,1959,5,5,0,0,1958,1957,1,0,0,0,1959,1962,1,
        0,0,0,1960,1958,1,0,0,0,1960,1961,1,0,0,0,1961,1963,1,0,0,0,1962,
        1960,1,0,0,0,1963,1967,5,27,0,0,1964,1966,5,5,0,0,1965,1964,1,0,
        0,0,1966,1969,1,0,0,0,1967,1965,1,0,0,0,1967,1968,1,0,0,0,1968,1971,
        1,0,0,0,1969,1967,1,0,0,0,1970,1956,1,0,0,0,1970,1971,1,0,0,0,1971,
        1973,1,0,0,0,1972,1974,5,15,0,0,1973,1972,1,0,0,0,1973,1974,1,0,
        0,0,1974,1978,1,0,0,0,1975,1977,5,5,0,0,1976,1975,1,0,0,0,1977,1980,
        1,0,0,0,1978,1976,1,0,0,0,1978,1979,1,0,0,0,1979,1981,1,0,0,0,1980,
        1978,1,0,0,0,1981,1982,3,118,59,0,1982,165,1,0,0,0,1983,1993,5,138,
        0,0,1984,1993,5,135,0,0,1985,1993,3,168,84,0,1986,1993,5,136,0,0,
        1987,1993,5,137,0,0,1988,1993,5,145,0,0,1989,1993,5,131,0,0,1990,
        1993,5,139,0,0,1991,1993,5,134,0,0,1992,1983,1,0,0,0,1992,1984,1,
        0,0,0,1992,1985,1,0,0,0,1992,1986,1,0,0,0,1992,1987,1,0,0,0,1992,
        1988,1,0,0,0,1992,1989,1,0,0,0,1992,1990,1,0,0,0,1992,1991,1,0,0,
        0,1993,167,1,0,0,0,1994,1997,3,170,85,0,1995,1997,3,172,86,0,1996,
        1994,1,0,0,0,1996,1995,1,0,0,0,1997,169,1,0,0,0,1998,2003,5,129,
        0,0,1999,2002,3,174,87,0,2000,2002,3,176,88,0,2001,1999,1,0,0,0,
        2001,2000,1,0,0,0,2002,2005,1,0,0,0,2003,2001,1,0,0,0,2003,2004,
        1,0,0,0,2004,2006,1,0,0,0,2005,2003,1,0,0,0,2006,2007,5,156,0,0,
        2007,171,1,0,0,0,2008,2015,5,130,0,0,2009,2014,3,178,89,0,2010,2014,
        3,180,90,0,2011,2014,3,170,85,0,2012,2014,5,162,0,0,2013,2009,1,
        0,0,0,2013,2010,1,0,0,0,2013,2011,1,0,0,0,2013,2012,1,0,0,0,2014,
        2017,1,0,0,0,2015,2013,1,0,0,0,2015,2016,1,0,0,0,2016,2018,1,0,0,
        0,2017,2015,1,0,0,0,2018,2019,5,161,0,0,2019,173,1,0,0,0,2020,2021,
        7,3,0,0,2021,175,1,0,0,0,2022,2023,5,160,0,0,2023,2024,3,118,59,
        0,2024,2025,5,14,0,0,2025,177,1,0,0,0,2026,2027,7,4,0,0,2027,179,
        1,0,0,0,2028,2029,5,166,0,0,2029,2030,3,118,59,0,2030,2031,5,14,
        0,0,2031,181,1,0,0,0,2032,2034,3,276,138,0,2033,2032,1,0,0,0,2034,
        2037,1,0,0,0,2035,2033,1,0,0,0,2035,2036,1,0,0,0,2036,2084,1,0,0,
        0,2037,2035,1,0,0,0,2038,2042,5,13,0,0,2039,2041,5,5,0,0,2040,2039,
        1,0,0,0,2041,2044,1,0,0,0,2042,2040,1,0,0,0,2042,2043,1,0,0,0,2043,
        2045,1,0,0,0,2044,2042,1,0,0,0,2045,2049,3,110,55,0,2046,2048,5,
        5,0,0,2047,2046,1,0,0,0,2048,2051,1,0,0,0,2049,2047,1,0,0,0,2049,
        2050,1,0,0,0,2050,2052,1,0,0,0,2051,2049,1,0,0,0,2052,2053,5,14,
        0,0,2053,2085,1,0,0,0,2054,2058,5,13,0,0,2055,2057,5,5,0,0,2056,
        2055,1,0,0,0,2057,2060,1,0,0,0,2058,2056,1,0,0,0,2058,2059,1,0,0,
        0,2059,2061,1,0,0,0,2060,2058,1,0,0,0,2061,2065,3,184,92,0,2062,
        2064,5,5,0,0,2063,2062,1,0,0,0,2064,2067,1,0,0,0,2065,2063,1,0,0,
        0,2065,2066,1,0,0,0,2066,2068,1,0,0,0,2067,2065,1,0,0,0,2068,2072,
        5,33,0,0,2069,2071,5,5,0,0,2070,2069,1,0,0,0,2071,2074,1,0,0,0,2072,
        2070,1,0,0,0,2072,2073,1,0,0,0,2073,2075,1,0,0,0,2074,2072,1,0,0,
        0,2075,2079,3,110,55,0,2076,2078,5,5,0,0,2077,2076,1,0,0,0,2078,
        2081,1,0,0,0,2079,2077,1,0,0,0,2079,2080,1,0,0,0,2080,2082,1,0,0,
        0,2081,2079,1,0,0,0,2082,2083,5,14,0,0,2083,2085,1,0,0,0,2084,2038,
        1,0,0,0,2084,2054,1,0,0,0,2085,183,1,0,0,0,2086,2088,3,186,93,0,
        2087,2086,1,0,0,0,2087,2088,1,0,0,0,2088,2105,1,0,0,0,2089,2091,
        5,5,0,0,2090,2089,1,0,0,0,2091,2094,1,0,0,0,2092,2090,1,0,0,0,2092,
        2093,1,0,0,0,2093,2095,1,0,0,0,2094,2092,1,0,0,0,2095,2099,5,8,0,
        0,2096,2098,5,5,0,0,2097,2096,1,0,0,0,2098,2101,1,0,0,0,2099,2097,
        1,0,0,0,2099,2100,1,0,0,0,2100,2102,1,0,0,0,2101,2099,1,0,0,0,2102,
        2104,3,186,93,0,2103,2092,1,0,0,0,2104,2107,1,0,0,0,2105,2103,1,
        0,0,0,2105,2106,1,0,0,0,2106,185,1,0,0,0,2107,2105,1,0,0,0,2108,
        2127,3,72,36,0,2109,2124,3,70,35,0,2110,2112,5,5,0,0,2111,2110,1,
        0,0,0,2112,2115,1,0,0,0,2113,2111,1,0,0,0,2113,2114,1,0,0,0,2114,
        2116,1,0,0,0,2115,2113,1,0,0,0,2116,2120,5,25,0,0,2117,2119,5,5,
        0,0,2118,2117,1,0,0,0,2119,2122,1,0,0,0,2120,2118,1,0,0,0,2120,2121,
        1,0,0,0,2121,2123,1,0,0,0,2122,2120,1,0,0,0,2123,2125,3,84,42,0,
        2124,2113,1,0,0,0,2124,2125,1,0,0,0,2125,2127,1,0,0,0,2126,2108,
        1,0,0,0,2126,2109,1,0,0,0,2127,187,1,0,0,0,2128,2143,5,62,0,0,2129,
        2131,5,5,0,0,2130,2129,1,0,0,0,2131,2134,1,0,0,0,2132,2130,1,0,0,
        0,2132,2133,1,0,0,0,2133,2135,1,0,0,0,2134,2132,1,0,0,0,2135,2139,
        5,25,0,0,2136,2138,5,5,0,0,2137,2136,1,0,0,0,2138,2141,1,0,0,0,2139,
        2137,1,0,0,0,2139,2140,1,0,0,0,2140,2142,1,0,0,0,2141,2139,1,0,0,
        0,2142,2144,3,28,14,0,2143,2132,1,0,0,0,2143,2144,1,0,0,0,2144,2148,
        1,0,0,0,2145,2147,5,5,0,0,2146,2145,1,0,0,0,2147,2150,1,0,0,0,2148,
        2146,1,0,0,0,2148,2149,1,0,0,0,2149,2152,1,0,0,0,2150,2148,1,0,0,
        0,2151,2153,3,36,18,0,2152,2151,1,0,0,0,2152,2153,1,0,0,0,2153,189,
        1,0,0,0,2154,2156,5,11,0,0,2155,2157,3,118,59,0,2156,2155,1,0,0,
        0,2156,2157,1,0,0,0,2157,2162,1,0,0,0,2158,2159,5,8,0,0,2159,2161,
        3,118,59,0,2160,2158,1,0,0,0,2161,2164,1,0,0,0,2162,2160,1,0,0,0,
        2162,2163,1,0,0,0,2163,2165,1,0,0,0,2164,2162,1,0,0,0,2165,2166,
        5,12,0,0,2166,191,1,0,0,0,2167,2169,5,70,0,0,2168,2170,5,142,0,0,
        2169,2168,1,0,0,0,2169,2170,1,0,0,0,2170,193,1,0,0,0,2171,2188,5,
        71,0,0,2172,2176,5,43,0,0,2173,2175,5,5,0,0,2174,2173,1,0,0,0,2175,
        2178,1,0,0,0,2176,2174,1,0,0,0,2176,2177,1,0,0,0,2177,2179,1,0,0,
        0,2178,2176,1,0,0,0,2179,2183,3,84,42,0,2180,2182,5,5,0,0,2181,2180,
        1,0,0,0,2182,2185,1,0,0,0,2183,2181,1,0,0,0,2183,2184,1,0,0,0,2184,
        2186,1,0,0,0,2185,2183,1,0,0,0,2186,2187,5,44,0,0,2187,2189,1,0,
        0,0,2188,2172,1,0,0,0,2188,2189,1,0,0,0,2189,2191,1,0,0,0,2190,2192,
        5,142,0,0,2191,2190,1,0,0,0,2191,2192,1,0,0,0,2192,195,1,0,0,0,2193,
        2196,3,198,99,0,2194,2196,3,202,101,0,2195,2193,1,0,0,0,2195,2194,
        1,0,0,0,2196,197,1,0,0,0,2197,2201,5,74,0,0,2198,2200,5,5,0,0,2199,
        2198,1,0,0,0,2200,2203,1,0,0,0,2201,2199,1,0,0,0,2201,2202,1,0,0,
        0,2202,2204,1,0,0,0,2203,2201,1,0,0,0,2204,2205,5,9,0,0,2205,2206,
        3,118,59,0,2206,2210,5,10,0,0,2207,2209,5,5,0,0,2208,2207,1,0,0,
        0,2209,2212,1,0,0,0,2210,2208,1,0,0,0,2210,2211,1,0,0,0,2211,2214,
        1,0,0,0,2212,2210,1,0,0,0,2213,2215,3,200,100,0,2214,2213,1,0,0,
        0,2214,2215,1,0,0,0,2215,2217,1,0,0,0,2216,2218,5,26,0,0,2217,2216,
        1,0,0,0,2217,2218,1,0,0,0,2218,2235,1,0,0,0,2219,2221,5,5,0,0,2220,
        2219,1,0,0,0,2221,2224,1,0,0,0,2222,2220,1,0,0,0,2222,2223,1,0,0,
        0,2223,2225,1,0,0,0,2224,2222,1,0,0,0,2225,2229,5,75,0,0,2226,2228,
        5,5,0,0,2227,2226,1,0,0,0,2228,2231,1,0,0,0,2229,2227,1,0,0,0,2229,
        2230,1,0,0,0,2230,2233,1,0,0,0,2231,2229,1,0,0,0,2232,2234,3,200,
        100,0,2233,2232,1,0,0,0,2233,2234,1,0,0,0,2234,2236,1,0,0,0,2235,
        2222,1,0,0,0,2235,2236,1,0,0,0,2236,199,1,0,0,0,2237,2240,3,108,
        54,0,2238,2240,3,118,59,0,2239,2237,1,0,0,0,2239,2238,1,0,0,0,2240,
        201,1,0,0,0,2241,2245,5,76,0,0,2242,2244,5,5,0,0,2243,2242,1,0,0,
        0,2244,2247,1,0,0,0,2245,2243,1,0,0,0,2245,2246,1,0,0,0,2246,2252,
        1,0,0,0,2247,2245,1,0,0,0,2248,2249,5,9,0,0,2249,2250,3,118,59,0,
        2250,2251,5,10,0,0,2251,2253,1,0,0,0,2252,2248,1,0,0,0,2252,2253,
        1,0,0,0,2253,2257,1,0,0,0,2254,2256,5,5,0,0,2255,2254,1,0,0,0,2256,
        2259,1,0,0,0,2257,2255,1,0,0,0,2257,2258,1,0,0,0,2258,2260,1,0,0,
        0,2259,2257,1,0,0,0,2260,2264,5,13,0,0,2261,2263,5,5,0,0,2262,2261,
        1,0,0,0,2263,2266,1,0,0,0,2264,2262,1,0,0,0,2264,2265,1,0,0,0,2265,
        2276,1,0,0,0,2266,2264,1,0,0,0,2267,2271,3,204,102,0,2268,2270,5,
        5,0,0,2269,2268,1,0,0,0,2270,2273,1,0,0,0,2271,2269,1,0,0,0,2271,
        2272,1,0,0,0,2272,2275,1,0,0,0,2273,2271,1,0,0,0,2274,2267,1,0,0,
        0,2275,2278,1,0,0,0,2276,2274,1,0,0,0,2276,2277,1,0,0,0,2277,2282,
        1,0,0,0,2278,2276,1,0,0,0,2279,2281,5,5,0,0,2280,2279,1,0,0,0,2281,
        2284,1,0,0,0,2282,2280,1,0,0,0,2282,2283,1,0,0,0,2283,2285,1,0,0,
        0,2284,2282,1,0,0,0,2285,2286,5,14,0,0,2286,203,1,0,0,0,2287,2304,
        3,206,103,0,2288,2290,5,5,0,0,2289,2288,1,0,0,0,2290,2293,1,0,0,
        0,2291,2289,1,0,0,0,2291,2292,1,0,0,0,2292,2294,1,0,0,0,2293,2291,
        1,0,0,0,2294,2298,5,8,0,0,2295,2297,5,5,0,0,2296,2295,1,0,0,0,2297,
        2300,1,0,0,0,2298,2296,1,0,0,0,2298,2299,1,0,0,0,2299,2301,1,0,0,
        0,2300,2298,1,0,0,0,2301,2303,3,206,103,0,2302,2291,1,0,0,0,2303,
        2306,1,0,0,0,2304,2302,1,0,0,0,2304,2305,1,0,0,0,2305,2310,1,0,0,
        0,2306,2304,1,0,0,0,2307,2309,5,5,0,0,2308,2307,1,0,0,0,2309,2312,
        1,0,0,0,2310,2308,1,0,0,0,2310,2311,1,0,0,0,2311,2313,1,0,0,0,2312,
        2310,1,0,0,0,2313,2317,5,33,0,0,2314,2316,5,5,0,0,2315,2314,1,0,
        0,0,2316,2319,1,0,0,0,2317,2315,1,0,0,0,2317,2318,1,0,0,0,2318,2320,
        1,0,0,0,2319,2317,1,0,0,0,2320,2322,3,200,100,0,2321,2323,3,290,
        145,0,2322,2321,1,0,0,0,2322,2323,1,0,0,0,2323,2340,1,0,0,0,2324,
        2328,5,75,0,0,2325,2327,5,5,0,0,2326,2325,1,0,0,0,2327,2330,1,0,
        0,0,2328,2326,1,0,0,0,2328,2329,1,0,0,0,2329,2331,1,0,0,0,2330,2328,
        1,0,0,0,2331,2335,5,33,0,0,2332,2334,5,5,0,0,2333,2332,1,0,0,0,2334,
        2337,1,0,0,0,2335,2333,1,0,0,0,2335,2336,1,0,0,0,2336,2338,1,0,0,
        0,2337,2335,1,0,0,0,2338,2340,3,200,100,0,2339,2287,1,0,0,0,2339,
        2324,1,0,0,0,2340,205,1,0,0,0,2341,2345,3,118,59,0,2342,2345,3,208,
        104,0,2343,2345,3,210,105,0,2344,2341,1,0,0,0,2344,2342,1,0,0,0,
        2344,2343,1,0,0,0,2345,207,1,0,0,0,2346,2350,3,236,118,0,2347,2349,
        5,5,0,0,2348,2347,1,0,0,0,2349,2352,1,0,0,0,2350,2348,1,0,0,0,2350,
        2351,1,0,0,0,2351,2353,1,0,0,0,2352,2350,1,0,0,0,2353,2354,3,118,
        59,0,2354,209,1,0,0,0,2355,2359,3,238,119,0,2356,2358,5,5,0,0,2357,
        2356,1,0,0,0,2358,2361,1,0,0,0,2359,2357,1,0,0,0,2359,2360,1,0,0,
        0,2360,2362,1,0,0,0,2361,2359,1,0,0,0,2362,2363,3,84,42,0,2363,211,
        1,0,0,0,2364,2368,5,77,0,0,2365,2367,5,5,0,0,2366,2365,1,0,0,0,2367,
        2370,1,0,0,0,2368,2366,1,0,0,0,2368,2369,1,0,0,0,2369,2371,1,0,0,
        0,2370,2368,1,0,0,0,2371,2381,3,108,54,0,2372,2374,5,5,0,0,2373,
        2372,1,0,0,0,2374,2377,1,0,0,0,2375,2373,1,0,0,0,2375,2376,1,0,0,
        0,2376,2378,1,0,0,0,2377,2375,1,0,0,0,2378,2380,3,214,107,0,2379,
        2375,1,0,0,0,2380,2383,1,0,0,0,2381,2379,1,0,0,0,2381,2382,1,0,0,
        0,2382,2391,1,0,0,0,2383,2381,1,0,0,0,2384,2386,5,5,0,0,2385,2384,
        1,0,0,0,2386,2389,1,0,0,0,2387,2385,1,0,0,0,2387,2388,1,0,0,0,2388,
        2390,1,0,0,0,2389,2387,1,0,0,0,2390,2392,3,216,108,0,2391,2387,1,
        0,0,0,2391,2392,1,0,0,0,2392,213,1,0,0,0,2393,2397,5,78,0,0,2394,
        2396,5,5,0,0,2395,2394,1,0,0,0,2396,2399,1,0,0,0,2397,2395,1,0,0,
        0,2397,2398,1,0,0,0,2398,2400,1,0,0,0,2399,2397,1,0,0,0,2400,2404,
        5,9,0,0,2401,2403,3,276,138,0,2402,2401,1,0,0,0,2403,2406,1,0,0,
        0,2404,2402,1,0,0,0,2404,2405,1,0,0,0,2405,2407,1,0,0,0,2406,2404,
        1,0,0,0,2407,2408,3,288,144,0,2408,2409,5,25,0,0,2409,2410,3,98,
        49,0,2410,2414,5,10,0,0,2411,2413,5,5,0,0,2412,2411,1,0,0,0,2413,
        2416,1,0,0,0,2414,2412,1,0,0,0,2414,2415,1,0,0,0,2415,2417,1,0,0,
        0,2416,2414,1,0,0,0,2417,2418,3,108,54,0,2418,215,1,0,0,0,2419,2423,
        5,79,0,0,2420,2422,5,5,0,0,2421,2420,1,0,0,0,2422,2425,1,0,0,0,2423,
        2421,1,0,0,0,2423,2424,1,0,0,0,2424,2426,1,0,0,0,2425,2423,1,0,0,
        0,2426,2427,3,108,54,0,2427,217,1,0,0,0,2428,2432,3,220,110,0,2429,
        2432,3,222,111,0,2430,2432,3,224,112,0,2431,2428,1,0,0,0,2431,2429,
        1,0,0,0,2431,2430,1,0,0,0,2432,219,1,0,0,0,2433,2437,5,80,0,0,2434,
        2436,5,5,0,0,2435,2434,1,0,0,0,2436,2439,1,0,0,0,2437,2435,1,0,0,
        0,2437,2438,1,0,0,0,2438,2440,1,0,0,0,2439,2437,1,0,0,0,2440,2444,
        5,9,0,0,2441,2443,3,276,138,0,2442,2441,1,0,0,0,2443,2446,1,0,0,
        0,2444,2442,1,0,0,0,2444,2445,1,0,0,0,2445,2449,1,0,0,0,2446,2444,
        1,0,0,0,2447,2450,3,72,36,0,2448,2450,3,70,35,0,2449,2447,1,0,0,
        0,2449,2448,1,0,0,0,2450,2451,1,0,0,0,2451,2452,5,89,0,0,2452,2453,
        3,118,59,0,2453,2457,5,10,0,0,2454,2456,5,5,0,0,2455,2454,1,0,0,
        0,2456,2459,1,0,0,0,2457,2455,1,0,0,0,2457,2458,1,0,0,0,2458,2461,
        1,0,0,0,2459,2457,1,0,0,0,2460,2462,3,200,100,0,2461,2460,1,0,0,
        0,2461,2462,1,0,0,0,2462,221,1,0,0,0,2463,2467,5,82,0,0,2464,2466,
        5,5,0,0,2465,2464,1,0,0,0,2466,2469,1,0,0,0,2467,2465,1,0,0,0,2467,
        2468,1,0,0,0,2468,2470,1,0,0,0,2469,2467,1,0,0,0,2470,2471,5,9,0,
        0,2471,2472,3,118,59,0,2472,2476,5,10,0,0,2473,2475,5,5,0,0,2474,
        2473,1,0,0,0,2475,2478,1,0,0,0,2476,2474,1,0,0,0,2476,2477,1,0,0,
        0,2477,2480,1,0,0,0,2478,2476,1,0,0,0,2479,2481,3,200,100,0,2480,
        2479,1,0,0,0,2480,2481,1,0,0,0,2481,223,1,0,0,0,2482,2486,5,81,0,
        0,2483,2485,5,5,0,0,2484,2483,1,0,0,0,2485,2488,1,0,0,0,2486,2484,
        1,0,0,0,2486,2487,1,0,0,0,2487,2490,1,0,0,0,2488,2486,1,0,0,0,2489,
        2491,3,200,100,0,2490,2489,1,0,0,0,2490,2491,1,0,0,0,2491,2495,1,
        0,0,0,2492,2494,5,5,0,0,2493,2492,1,0,0,0,2494,2497,1,0,0,0,2495,
        2493,1,0,0,0,2495,2496,1,0,0,0,2496,2498,1,0,0,0,2497,2495,1,0,0,
        0,2498,2502,5,82,0,0,2499,2501,5,5,0,0,2500,2499,1,0,0,0,2501,2504,
        1,0,0,0,2502,2500,1,0,0,0,2502,2503,1,0,0,0,2503,2505,1,0,0,0,2504,
        2502,1,0,0,0,2505,2506,5,9,0,0,2506,2507,3,118,59,0,2507,2508,5,
        10,0,0,2508,225,1,0,0,0,2509,2513,5,83,0,0,2510,2512,5,5,0,0,2511,
        2510,1,0,0,0,2512,2515,1,0,0,0,2513,2511,1,0,0,0,2513,2514,1,0,0,
        0,2514,2516,1,0,0,0,2515,2513,1,0,0,0,2516,2526,3,118,59,0,2517,
        2519,7,5,0,0,2518,2520,3,118,59,0,2519,2518,1,0,0,0,2519,2520,1,
        0,0,0,2520,2526,1,0,0,0,2521,2526,5,85,0,0,2522,2526,5,54,0,0,2523,
        2526,5,86,0,0,2524,2526,5,55,0,0,2525,2509,1,0,0,0,2525,2517,1,0,
        0,0,2525,2521,1,0,0,0,2525,2522,1,0,0,0,2525,2523,1,0,0,0,2525,2524,
        1,0,0,0,2526,227,1,0,0,0,2527,2537,3,98,49,0,2528,2532,5,41,0,0,
        2529,2531,5,5,0,0,2530,2529,1,0,0,0,2531,2534,1,0,0,0,2532,2530,
        1,0,0,0,2532,2533,1,0,0,0,2533,2536,1,0,0,0,2534,2532,1,0,0,0,2535,
        2528,1,0,0,0,2536,2539,1,0,0,0,2537,2535,1,0,0,0,2537,2538,1,0,0,
        0,2538,2541,1,0,0,0,2539,2537,1,0,0,0,2540,2527,1,0,0,0,2540,2541,
        1,0,0,0,2541,2545,1,0,0,0,2542,2544,5,5,0,0,2543,2542,1,0,0,0,2544,
        2547,1,0,0,0,2545,2543,1,0,0,0,2545,2546,1,0,0,0,2546,2548,1,0,0,
        0,2547,2545,1,0,0,0,2548,2552,7,6,0,0,2549,2551,5,5,0,0,2550,2549,
        1,0,0,0,2551,2554,1,0,0,0,2552,2550,1,0,0,0,2552,2553,1,0,0,0,2553,
        2557,1,0,0,0,2554,2552,1,0,0,0,2555,2558,3,286,143,0,2556,2558,5,
        59,0,0,2557,2555,1,0,0,0,2557,2556,1,0,0,0,2558,2575,1,0,0,0,2559,
        2563,5,70,0,0,2560,2562,5,5,0,0,2561,2560,1,0,0,0,2562,2565,1,0,
        0,0,2563,2561,1,0,0,0,2563,2564,1,0,0,0,2564,2566,1,0,0,0,2565,2563,
        1,0,0,0,2566,2570,5,36,0,0,2567,2569,5,5,0,0,2568,2567,1,0,0,0,2569,
        2572,1,0,0,0,2570,2568,1,0,0,0,2570,2571,1,0,0,0,2571,2573,1,0,0,
        0,2572,2570,1,0,0,0,2573,2575,5,59,0,0,2574,2540,1,0,0,0,2574,2559,
        1,0,0,0,2575,229,1,0,0,0,2576,2577,7,7,0,0,2577,231,1,0,0,0,2578,
        2579,7,8,0,0,2579,233,1,0,0,0,2580,2581,7,9,0,0,2581,235,1,0,0,0,
        2582,2583,7,10,0,0,2583,237,1,0,0,0,2584,2585,7,11,0,0,2585,239,
        1,0,0,0,2586,2587,7,12,0,0,2587,241,1,0,0,0,2588,2589,7,13,0,0,2589,
        243,1,0,0,0,2590,2591,7,14,0,0,2591,245,1,0,0,0,2592,2600,5,20,0,
        0,2593,2600,5,21,0,0,2594,2600,5,18,0,0,2595,2600,5,19,0,0,2596,
        2600,5,24,0,0,2597,2600,3,276,138,0,2598,2600,3,274,137,0,2599,2592,
        1,0,0,0,2599,2593,1,0,0,0,2599,2594,1,0,0,0,2599,2595,1,0,0,0,2599,
        2596,1,0,0,0,2599,2597,1,0,0,0,2599,2598,1,0,0,0,2600,247,1,0,0,
        0,2601,2617,5,20,0,0,2602,2617,5,21,0,0,2603,2604,5,24,0,0,2604,
        2617,5,24,0,0,2605,2617,3,150,75,0,2606,2617,3,154,77,0,2607,2609,
        5,5,0,0,2608,2607,1,0,0,0,2609,2612,1,0,0,0,2610,2608,1,0,0,0,2610,
        2611,1,0,0,0,2611,2613,1,0,0,0,2612,2610,1,0,0,0,2613,2614,3,250,
        125,0,2614,2615,3,144,72,0,2615,2617,1,0,0,0,2616,2601,1,0,0,0,2616,
        2602,1,0,0,0,2616,2603,1,0,0,0,2616,2605,1,0,0,0,2616,2606,1,0,0,
        0,2616,2610,1,0,0,0,2617,249,1,0,0,0,2618,2622,5,7,0,0,2619,2620,
        5,41,0,0,2620,2622,5,7,0,0,2621,2618,1,0,0,0,2621,2619,1,0,0,0,2622,
        251,1,0,0,0,2623,2626,3,276,138,0,2624,2626,3,254,127,0,2625,2623,
        1,0,0,0,2625,2624,1,0,0,0,2626,2627,1,0,0,0,2627,2625,1,0,0,0,2627,
        2628,1,0,0,0,2628,253,1,0,0,0,2629,2639,3,256,128,0,2630,2639,3,
        258,129,0,2631,2639,3,260,130,0,2632,2639,3,262,131,0,2633,2639,
        3,264,132,0,2634,2639,3,266,133,0,2635,2639,3,268,134,0,2636,2639,
        3,270,135,0,2637,2639,3,272,136,0,2638,2629,1,0,0,0,2638,2630,1,
        0,0,0,2638,2631,1,0,0,0,2638,2632,1,0,0,0,2638,2633,1,0,0,0,2638,
        2634,1,0,0,0,2638,2635,1,0,0,0,2638,2636,1,0,0,0,2638,2637,1,0,0,
        0,2639,2643,1,0,0,0,2640,2642,5,5,0,0,2641,2640,1,0,0,0,2642,2645,
        1,0,0,0,2643,2641,1,0,0,0,2643,2644,1,0,0,0,2644,255,1,0,0,0,2645,
        2643,1,0,0,0,2646,2647,7,15,0,0,2647,257,1,0,0,0,2648,2649,7,16,
        0,0,2649,259,1,0,0,0,2650,2651,7,17,0,0,2651,261,1,0,0,0,2652,2653,
        7,18,0,0,2653,263,1,0,0,0,2654,2655,7,19,0,0,2655,265,1,0,0,0,2656,
        2657,5,123,0,0,2657,267,1,0,0,0,2658,2659,7,20,0,0,2659,269,1,0,
        0,0,2660,2661,7,21,0,0,2661,271,1,0,0,0,2662,2663,5,128,0,0,2663,
        273,1,0,0,0,2664,2668,5,143,0,0,2665,2667,5,5,0,0,2666,2665,1,0,
        0,0,2667,2670,1,0,0,0,2668,2666,1,0,0,0,2668,2669,1,0,0,0,2669,275,
        1,0,0,0,2670,2668,1,0,0,0,2671,2674,3,278,139,0,2672,2674,3,280,
        140,0,2673,2671,1,0,0,0,2673,2672,1,0,0,0,2674,2678,1,0,0,0,2675,
        2677,5,5,0,0,2676,2675,1,0,0,0,2677,2680,1,0,0,0,2678,2676,1,0,0,
        0,2678,2679,1,0,0,0,2679,277,1,0,0,0,2680,2678,1,0,0,0,2681,2685,
        3,282,141,0,2682,2684,5,5,0,0,2683,2682,1,0,0,0,2684,2687,1,0,0,
        0,2685,2683,1,0,0,0,2685,2686,1,0,0,0,2686,2688,1,0,0,0,2687,2685,
        1,0,0,0,2688,2692,5,25,0,0,2689,2691,5,5,0,0,2690,2689,1,0,0,0,2691,
        2694,1,0,0,0,2692,2690,1,0,0,0,2692,2693,1,0,0,0,2693,2695,1,0,0,
        0,2694,2692,1,0,0,0,2695,2696,3,284,142,0,2696,2736,1,0,0,0,2697,
        2714,5,142,0,0,2698,2700,5,5,0,0,2699,2698,1,0,0,0,2700,2703,1,0,
        0,0,2701,2699,1,0,0,0,2701,2702,1,0,0,0,2702,2704,1,0,0,0,2703,2701,
        1,0,0,0,2704,2708,5,7,0,0,2705,2707,5,5,0,0,2706,2705,1,0,0,0,2707,
        2710,1,0,0,0,2708,2706,1,0,0,0,2708,2709,1,0,0,0,2709,2711,1,0,0,
        0,2710,2708,1,0,0,0,2711,2713,3,288,144,0,2712,2701,1,0,0,0,2713,
        2716,1,0,0,0,2714,2712,1,0,0,0,2714,2715,1,0,0,0,2715,2724,1,0,0,
        0,2716,2714,1,0,0,0,2717,2719,5,5,0,0,2718,2717,1,0,0,0,2719,2722,
        1,0,0,0,2720,2718,1,0,0,0,2720,2721,1,0,0,0,2721,2723,1,0,0,0,2722,
        2720,1,0,0,0,2723,2725,3,158,79,0,2724,2720,1,0,0,0,2724,2725,1,
        0,0,0,2725,2733,1,0,0,0,2726,2728,5,5,0,0,2727,2726,1,0,0,0,2728,
        2731,1,0,0,0,2729,2727,1,0,0,0,2729,2730,1,0,0,0,2730,2732,1,0,0,
        0,2731,2729,1,0,0,0,2732,2734,3,156,78,0,2733,2729,1,0,0,0,2733,
        2734,1,0,0,0,2734,2736,1,0,0,0,2735,2681,1,0,0,0,2735,2697,1,0,0,
        0,2736,279,1,0,0,0,2737,2738,3,282,141,0,2738,2739,5,25,0,0,2739,
        2741,5,11,0,0,2740,2742,3,284,142,0,2741,2740,1,0,0,0,2742,2743,
        1,0,0,0,2743,2741,1,0,0,0,2743,2744,1,0,0,0,2744,2745,1,0,0,0,2745,
        2746,5,12,0,0,2746,2757,1,0,0,0,2747,2748,5,40,0,0,2748,2750,5,11,
        0,0,2749,2751,3,284,142,0,2750,2749,1,0,0,0,2751,2752,1,0,0,0,2752,
        2750,1,0,0,0,2752,2753,1,0,0,0,2753,2754,1,0,0,0,2754,2755,5,12,
        0,0,2755,2757,1,0,0,0,2756,2737,1,0,0,0,2756,2747,1,0,0,0,2757,281,
        1,0,0,0,2758,2759,7,22,0,0,2759,283,1,0,0,0,2760,2762,3,286,143,
        0,2761,2763,3,158,79,0,2762,2761,1,0,0,0,2762,2763,1,0,0,0,2763,
        2765,1,0,0,0,2764,2766,3,156,78,0,2765,2764,1,0,0,0,2765,2766,1,
        0,0,0,2766,285,1,0,0,0,2767,2778,3,288,144,0,2768,2770,5,5,0,0,2769,
        2768,1,0,0,0,2770,2773,1,0,0,0,2771,2769,1,0,0,0,2771,2772,1,0,0,
        0,2772,2774,1,0,0,0,2773,2771,1,0,0,0,2774,2775,5,7,0,0,2775,2777,
        3,288,144,0,2776,2771,1,0,0,0,2777,2780,1,0,0,0,2778,2776,1,0,0,
        0,2778,2779,1,0,0,0,2779,287,1,0,0,0,2780,2778,1,0,0,0,2781,2782,
        7,23,0,0,2782,289,1,0,0,0,2783,2785,5,5,0,0,2784,2783,1,0,0,0,2785,
        2786,1,0,0,0,2786,2784,1,0,0,0,2786,2787,1,0,0,0,2787,2802,1,0,0,
        0,2788,2790,5,5,0,0,2789,2788,1,0,0,0,2790,2793,1,0,0,0,2791,2789,
        1,0,0,0,2791,2792,1,0,0,0,2792,2794,1,0,0,0,2793,2791,1,0,0,0,2794,
        2798,5,26,0,0,2795,2797,5,5,0,0,2796,2795,1,0,0,0,2797,2800,1,0,
        0,0,2798,2796,1,0,0,0,2798,2799,1,0,0,0,2799,2802,1,0,0,0,2800,2798,
        1,0,0,0,2801,2784,1,0,0,0,2801,2791,1,0,0,0,2802,291,1,0,0,0,2803,
        2804,7,24,0,0,2804,293,1,0,0,0,431,297,304,311,314,318,321,328,335,
        342,345,349,352,357,365,373,378,381,385,388,393,395,400,408,411,
        421,424,430,437,441,446,450,455,462,466,471,475,480,487,491,494,
        500,503,513,517,519,524,527,534,539,546,553,559,565,571,580,587,
        596,602,608,621,626,632,638,644,651,658,662,667,671,677,685,689,
        695,699,704,711,717,720,725,734,739,742,747,754,758,763,767,772,
        776,779,785,792,797,802,806,811,818,823,828,832,837,844,851,855,
        860,864,869,873,881,885,887,892,897,904,909,916,920,923,929,936,
        940,945,952,956,961,965,968,974,978,984,988,993,1000,1004,1009,1013,
        1016,1022,1026,1031,1038,1043,1048,1053,1058,1062,1067,1074,1078,
        1083,1090,1095,1102,1104,1112,1120,1125,1127,1130,1134,1140,1148,
        1155,1159,1164,1172,1176,1178,1181,1185,1191,1197,1199,1204,1210,
        1215,1218,1224,1231,1235,1240,1247,1256,1263,1270,1276,1282,1286,
        1291,1297,1302,1307,1312,1319,1323,1326,1332,1339,1342,1344,1352,
        1357,1363,1371,1377,1384,1387,1393,1400,1408,1414,1421,1427,1434,
        1438,1444,1449,1454,1461,1466,1470,1476,1480,1485,1494,1501,1508,
        1514,1520,1527,1534,1546,1553,1556,1560,1563,1567,1572,1578,1586,
        1593,1601,1608,1615,1621,1628,1635,1641,1649,1656,1664,1669,1676,
        1683,1689,1694,1700,1707,1713,1721,1728,1736,1742,1750,1757,1765,
        1772,1779,1787,1793,1800,1805,1822,1830,1835,1842,1848,1850,1855,
        1859,1864,1875,1878,1888,1894,1898,1900,1908,1915,1922,1928,1932,
        1937,1942,1945,1949,1954,1960,1967,1970,1973,1978,1992,1996,2001,
        2003,2013,2015,2035,2042,2049,2058,2065,2072,2079,2084,2087,2092,
        2099,2105,2113,2120,2124,2126,2132,2139,2143,2148,2152,2156,2162,
        2169,2176,2183,2188,2191,2195,2201,2210,2214,2217,2222,2229,2233,
        2235,2239,2245,2252,2257,2264,2271,2276,2282,2291,2298,2304,2310,
        2317,2322,2328,2335,2339,2344,2350,2359,2368,2375,2381,2387,2391,
        2397,2404,2414,2423,2431,2437,2444,2449,2457,2461,2467,2476,2480,
        2486,2490,2495,2502,2513,2519,2525,2532,2537,2540,2545,2552,2557,
        2563,2570,2574,2599,2610,2616,2621,2625,2627,2638,2643,2668,2673,
        2678,2685,2692,2701,2708,2714,2720,2724,2729,2733,2735,2743,2752,
        2756,2762,2765,2771,2778,2786,2791,2798,2801
    ]

class KotlinParser ( Parser ):

    grammarFileName = "KotlinParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'...'", "'.'", "','", "'('", 
                     "<INVALID>", "'['", "<INVALID>", "'{'", "'}'", "'*'", 
                     "'%'", "'/'", "'+'", "'-'", "'++'", "'--'", "'&&'", 
                     "'||'", "'!'", "':'", "';'", "'='", "'+='", "'-='", 
                     "'*='", "'/='", "'%='", "'->'", "'=>'", "'..'", "'::'", 
                     "'?::'", "';;'", "'#'", "'@'", "'?'", "'?:'", "'<'", 
                     "'>'", "'<='", "'>='", "'!='", "'!=='", "'as?'", "'=='", 
                     "'==='", "'''", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'@file'", "'package'", "'import'", "'class'", "'interface'", 
                     "'fun'", "'object'", "'val'", "'var'", "'typealias'", 
                     "'constructor'", "'by'", "'companion'", "'init'", "'this'", 
                     "'super'", "'typeof'", "'where'", "'if'", "'else'", 
                     "'when'", "'try'", "'catch'", "'finally'", "'for'", 
                     "'do'", "'while'", "'throw'", "'return'", "'continue'", 
                     "'break'", "'as'", "'is'", "'in'", "<INVALID>", "<INVALID>", 
                     "'out'", "'@field'", "'@property'", "'@get'", "'@set'", 
                     "'get'", "'set'", "'@receiver'", "'@param'", "'@setparam'", 
                     "'@delegate'", "'dynamic'", "'public'", "'private'", 
                     "'protected'", "'internal'", "'enum'", "'sealed'", 
                     "'annotation'", "'data'", "'inner'", "'tailrec'", "'operator'", 
                     "'inline'", "'infix'", "'external'", "'suspend'", "'override'", 
                     "'abstract'", "'final'", "'open'", "'const'", "'lateinit'", 
                     "'vararg'", "'noinline'", "'crossinline'", "'reified'", 
                     "<INVALID>", "'\"\"\"'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'null'" ]

    symbolicNames = [ "<INVALID>", "ShebangLine", "DelimitedComment", "LineComment", 
                      "WS", "NL", "RESERVED", "DOT", "COMMA", "LPAREN", 
                      "RPAREN", "LSQUARE", "RSQUARE", "LCURL", "RCURL", 
                      "MULT", "MOD", "DIV", "ADD", "SUB", "INCR", "DECR", 
                      "CONJ", "DISJ", "EXCL", "COLON", "SEMICOLON", "ASSIGNMENT", 
                      "ADD_ASSIGNMENT", "SUB_ASSIGNMENT", "MULT_ASSIGNMENT", 
                      "DIV_ASSIGNMENT", "MOD_ASSIGNMENT", "ARROW", "DOUBLE_ARROW", 
                      "RANGE", "COLONCOLON", "Q_COLONCOLON", "DOUBLE_SEMICOLON", 
                      "HASH", "AT", "QUEST", "ELVIS", "LANGLE", "RANGLE", 
                      "LE", "GE", "EXCL_EQ", "EXCL_EQEQ", "AS_SAFE", "EQEQ", 
                      "EQEQEQ", "SINGLE_QUOTE", "RETURN_AT", "CONTINUE_AT", 
                      "BREAK_AT", "FILE", "PACKAGE", "IMPORT", "CLASS", 
                      "INTERFACE", "FUN", "OBJECT", "VAL", "VAR", "TYPE_ALIAS", 
                      "CONSTRUCTOR", "BY", "COMPANION", "INIT", "THIS", 
                      "SUPER", "TYPEOF", "WHERE", "IF", "ELSE", "WHEN", 
                      "TRY", "CATCH", "FINALLY", "FOR", "DO", "WHILE", "THROW", 
                      "RETURN", "CONTINUE", "BREAK", "AS", "IS", "IN", "NOT_IS", 
                      "NOT_IN", "OUT", "FIELD", "PROPERTY", "GET", "SET", 
                      "GETTER", "SETTER", "RECEIVER", "PARAM", "SETPARAM", 
                      "DELEGATE", "DYNAMIC", "PUBLIC", "PRIVATE", "PROTECTED", 
                      "INTERNAL", "ENUM", "SEALED", "ANNOTATION", "DATA", 
                      "INNER", "TAILREC", "OPERATOR", "INLINE", "INFIX", 
                      "EXTERNAL", "SUSPEND", "OVERRIDE", "ABSTRACT", "FINAL", 
                      "OPEN", "CONST", "LATEINIT", "VARARG", "NOINLINE", 
                      "CROSSINLINE", "REIFIED", "QUOTE_OPEN", "TRIPLE_QUOTE_OPEN", 
                      "RealLiteral", "FloatLiteral", "DoubleLiteral", "LongLiteral", 
                      "IntegerLiteral", "HexLiteral", "BinLiteral", "BooleanLiteral", 
                      "NullLiteral", "Identifier", "PineIdentifier", "LabelReference", 
                      "LabelDefinition", "FieldIdentifier", "CharacterLiteral", 
                      "UNICODE_CLASS_LL", "UNICODE_CLASS_LM", "UNICODE_CLASS_LO", 
                      "UNICODE_CLASS_LT", "UNICODE_CLASS_LU", "UNICODE_CLASS_ND", 
                      "UNICODE_CLASS_NL", "Inside_Comment", "Inside_WS", 
                      "Inside_NL", "QUOTE_CLOSE", "LineStrRef", "LineStrText", 
                      "LineStrEscapedChar", "LineStrExprStart", "TRIPLE_QUOTE_CLOSE", 
                      "MultiLineStringQuote", "MultiLineStrRef", "MultiLineStrText", 
                      "MultiLineStrEscapedChar", "MultiLineStrExprStart", 
                      "MultiLineNL", "StrExpr_IN", "StrExpr_Comment", "StrExpr_WS", 
                      "StrExpr_NL", "COLOR" ]

    RULE_kotlinFile = 0
    RULE_script = 1
    RULE_preamble = 2
    RULE_fileAnnotations = 3
    RULE_fileAnnotation = 4
    RULE_packageHeader = 5
    RULE_importList = 6
    RULE_importHeader = 7
    RULE_importAlias = 8
    RULE_topLevelObject = 9
    RULE_classDeclaration = 10
    RULE_primaryConstructor = 11
    RULE_classParameters = 12
    RULE_classParameter = 13
    RULE_delegationSpecifiers = 14
    RULE_delegationSpecifier = 15
    RULE_constructorInvocation = 16
    RULE_explicitDelegation = 17
    RULE_classBody = 18
    RULE_classMemberDeclaration = 19
    RULE_anonymousInitializer = 20
    RULE_secondaryConstructor = 21
    RULE_constructorDelegationCall = 22
    RULE_enumClassBody = 23
    RULE_enumEntries = 24
    RULE_enumEntry = 25
    RULE_functionDeclaration = 26
    RULE_functionValueParameters = 27
    RULE_functionValueParameter = 28
    RULE_parameter = 29
    RULE_receiverType = 30
    RULE_functionBody = 31
    RULE_objectDeclaration = 32
    RULE_companionObject = 33
    RULE_propertyDeclaration = 34
    RULE_multiVariableDeclaration = 35
    RULE_variableDeclaration = 36
    RULE_getter = 37
    RULE_setter = 38
    RULE_typeAlias = 39
    RULE_typeParameters = 40
    RULE_typeParameter = 41
    RULE_type = 42
    RULE_typeModifierList = 43
    RULE_parenthesizedType = 44
    RULE_nullableType = 45
    RULE_typeReference = 46
    RULE_functionType = 47
    RULE_functionTypeReceiver = 48
    RULE_userType = 49
    RULE_simpleUserType = 50
    RULE_functionTypeParameters = 51
    RULE_typeConstraints = 52
    RULE_typeConstraint = 53
    RULE_block = 54
    RULE_statements = 55
    RULE_statement = 56
    RULE_blockLevelExpression = 57
    RULE_declaration = 58
    RULE_expression = 59
    RULE_disjunction = 60
    RULE_conjunction = 61
    RULE_equalityComparison = 62
    RULE_comparison = 63
    RULE_namedInfix = 64
    RULE_elvisExpression = 65
    RULE_infixFunctionCall = 66
    RULE_rangeExpression = 67
    RULE_additiveExpression = 68
    RULE_multiplicativeExpression = 69
    RULE_typeRHS = 70
    RULE_prefixUnaryExpression = 71
    RULE_postfixUnaryExpression = 72
    RULE_atomicExpression = 73
    RULE_parenthesizedExpression = 74
    RULE_callSuffix = 75
    RULE_annotatedLambda = 76
    RULE_arrayAccess = 77
    RULE_valueArguments = 78
    RULE_typeArguments = 79
    RULE_typeProjection = 80
    RULE_typeProjectionModifierList = 81
    RULE_valueArgument = 82
    RULE_literalConstant = 83
    RULE_stringLiteral = 84
    RULE_lineStringLiteral = 85
    RULE_multiLineStringLiteral = 86
    RULE_lineStringContent = 87
    RULE_lineStringExpression = 88
    RULE_multiLineStringContent = 89
    RULE_multiLineStringExpression = 90
    RULE_functionLiteral = 91
    RULE_lambdaParameters = 92
    RULE_lambdaParameter = 93
    RULE_objectLiteral = 94
    RULE_collectionLiteral = 95
    RULE_thisExpression = 96
    RULE_superExpression = 97
    RULE_conditionalExpression = 98
    RULE_ifExpression = 99
    RULE_controlStructureBody = 100
    RULE_whenExpression = 101
    RULE_whenEntry = 102
    RULE_whenCondition = 103
    RULE_rangeTest = 104
    RULE_typeTest = 105
    RULE_tryExpression = 106
    RULE_catchBlock = 107
    RULE_finallyBlock = 108
    RULE_loopExpression = 109
    RULE_forExpression = 110
    RULE_whileExpression = 111
    RULE_doWhileExpression = 112
    RULE_jumpExpression = 113
    RULE_callableReference = 114
    RULE_assignmentOperator = 115
    RULE_equalityOperation = 116
    RULE_comparisonOperator = 117
    RULE_inOperator = 118
    RULE_isOperator = 119
    RULE_additiveOperator = 120
    RULE_multiplicativeOperation = 121
    RULE_typeOperation = 122
    RULE_prefixUnaryOperation = 123
    RULE_postfixUnaryOperation = 124
    RULE_memberAccessOperator = 125
    RULE_modifierList = 126
    RULE_modifier = 127
    RULE_classModifier = 128
    RULE_memberModifier = 129
    RULE_visibilityModifier = 130
    RULE_varianceAnnotation = 131
    RULE_functionModifier = 132
    RULE_propertyModifier = 133
    RULE_inheritanceModifier = 134
    RULE_parameterModifier = 135
    RULE_typeParameterModifier = 136
    RULE_labelDefinition = 137
    RULE_annotations = 138
    RULE_annotation = 139
    RULE_annotationList = 140
    RULE_annotationUseSiteTarget = 141
    RULE_unescapedAnnotation = 142
    RULE_identifier = 143
    RULE_simpleIdentifier = 144
    RULE_semi = 145
    RULE_anysemi = 146

    ruleNames =  [ "kotlinFile", "script", "preamble", "fileAnnotations", 
                   "fileAnnotation", "packageHeader", "importList", "importHeader", 
                   "importAlias", "topLevelObject", "classDeclaration", 
                   "primaryConstructor", "classParameters", "classParameter", 
                   "delegationSpecifiers", "delegationSpecifier", "constructorInvocation", 
                   "explicitDelegation", "classBody", "classMemberDeclaration", 
                   "anonymousInitializer", "secondaryConstructor", "constructorDelegationCall", 
                   "enumClassBody", "enumEntries", "enumEntry", "functionDeclaration", 
                   "functionValueParameters", "functionValueParameter", 
                   "parameter", "receiverType", "functionBody", "objectDeclaration", 
                   "companionObject", "propertyDeclaration", "multiVariableDeclaration", 
                   "variableDeclaration", "getter", "setter", "typeAlias", 
                   "typeParameters", "typeParameter", "type", "typeModifierList", 
                   "parenthesizedType", "nullableType", "typeReference", 
                   "functionType", "functionTypeReceiver", "userType", "simpleUserType", 
                   "functionTypeParameters", "typeConstraints", "typeConstraint", 
                   "block", "statements", "statement", "blockLevelExpression", 
                   "declaration", "expression", "disjunction", "conjunction", 
                   "equalityComparison", "comparison", "namedInfix", "elvisExpression", 
                   "infixFunctionCall", "rangeExpression", "additiveExpression", 
                   "multiplicativeExpression", "typeRHS", "prefixUnaryExpression", 
                   "postfixUnaryExpression", "atomicExpression", "parenthesizedExpression", 
                   "callSuffix", "annotatedLambda", "arrayAccess", "valueArguments", 
                   "typeArguments", "typeProjection", "typeProjectionModifierList", 
                   "valueArgument", "literalConstant", "stringLiteral", 
                   "lineStringLiteral", "multiLineStringLiteral", "lineStringContent", 
                   "lineStringExpression", "multiLineStringContent", "multiLineStringExpression", 
                   "functionLiteral", "lambdaParameters", "lambdaParameter", 
                   "objectLiteral", "collectionLiteral", "thisExpression", 
                   "superExpression", "conditionalExpression", "ifExpression", 
                   "controlStructureBody", "whenExpression", "whenEntry", 
                   "whenCondition", "rangeTest", "typeTest", "tryExpression", 
                   "catchBlock", "finallyBlock", "loopExpression", "forExpression", 
                   "whileExpression", "doWhileExpression", "jumpExpression", 
                   "callableReference", "assignmentOperator", "equalityOperation", 
                   "comparisonOperator", "inOperator", "isOperator", "additiveOperator", 
                   "multiplicativeOperation", "typeOperation", "prefixUnaryOperation", 
                   "postfixUnaryOperation", "memberAccessOperator", "modifierList", 
                   "modifier", "classModifier", "memberModifier", "visibilityModifier", 
                   "varianceAnnotation", "functionModifier", "propertyModifier", 
                   "inheritanceModifier", "parameterModifier", "typeParameterModifier", 
                   "labelDefinition", "annotations", "annotation", "annotationList", 
                   "annotationUseSiteTarget", "unescapedAnnotation", "identifier", 
                   "simpleIdentifier", "semi", "anysemi" ]

    EOF = Token.EOF
    ShebangLine=1
    DelimitedComment=2
    LineComment=3
    WS=4
    NL=5
    RESERVED=6
    DOT=7
    COMMA=8
    LPAREN=9
    RPAREN=10
    LSQUARE=11
    RSQUARE=12
    LCURL=13
    RCURL=14
    MULT=15
    MOD=16
    DIV=17
    ADD=18
    SUB=19
    INCR=20
    DECR=21
    CONJ=22
    DISJ=23
    EXCL=24
    COLON=25
    SEMICOLON=26
    ASSIGNMENT=27
    ADD_ASSIGNMENT=28
    SUB_ASSIGNMENT=29
    MULT_ASSIGNMENT=30
    DIV_ASSIGNMENT=31
    MOD_ASSIGNMENT=32
    ARROW=33
    DOUBLE_ARROW=34
    RANGE=35
    COLONCOLON=36
    Q_COLONCOLON=37
    DOUBLE_SEMICOLON=38
    HASH=39
    AT=40
    QUEST=41
    ELVIS=42
    LANGLE=43
    RANGLE=44
    LE=45
    GE=46
    EXCL_EQ=47
    EXCL_EQEQ=48
    AS_SAFE=49
    EQEQ=50
    EQEQEQ=51
    SINGLE_QUOTE=52
    RETURN_AT=53
    CONTINUE_AT=54
    BREAK_AT=55
    FILE=56
    PACKAGE=57
    IMPORT=58
    CLASS=59
    INTERFACE=60
    FUN=61
    OBJECT=62
    VAL=63
    VAR=64
    TYPE_ALIAS=65
    CONSTRUCTOR=66
    BY=67
    COMPANION=68
    INIT=69
    THIS=70
    SUPER=71
    TYPEOF=72
    WHERE=73
    IF=74
    ELSE=75
    WHEN=76
    TRY=77
    CATCH=78
    FINALLY=79
    FOR=80
    DO=81
    WHILE=82
    THROW=83
    RETURN=84
    CONTINUE=85
    BREAK=86
    AS=87
    IS=88
    IN=89
    NOT_IS=90
    NOT_IN=91
    OUT=92
    FIELD=93
    PROPERTY=94
    GET=95
    SET=96
    GETTER=97
    SETTER=98
    RECEIVER=99
    PARAM=100
    SETPARAM=101
    DELEGATE=102
    DYNAMIC=103
    PUBLIC=104
    PRIVATE=105
    PROTECTED=106
    INTERNAL=107
    ENUM=108
    SEALED=109
    ANNOTATION=110
    DATA=111
    INNER=112
    TAILREC=113
    OPERATOR=114
    INLINE=115
    INFIX=116
    EXTERNAL=117
    SUSPEND=118
    OVERRIDE=119
    ABSTRACT=120
    FINAL=121
    OPEN=122
    CONST=123
    LATEINIT=124
    VARARG=125
    NOINLINE=126
    CROSSINLINE=127
    REIFIED=128
    QUOTE_OPEN=129
    TRIPLE_QUOTE_OPEN=130
    RealLiteral=131
    FloatLiteral=132
    DoubleLiteral=133
    LongLiteral=134
    IntegerLiteral=135
    HexLiteral=136
    BinLiteral=137
    BooleanLiteral=138
    NullLiteral=139
    Identifier=140
    PineIdentifier=141
    LabelReference=142
    LabelDefinition=143
    FieldIdentifier=144
    CharacterLiteral=145
    UNICODE_CLASS_LL=146
    UNICODE_CLASS_LM=147
    UNICODE_CLASS_LO=148
    UNICODE_CLASS_LT=149
    UNICODE_CLASS_LU=150
    UNICODE_CLASS_ND=151
    UNICODE_CLASS_NL=152
    Inside_Comment=153
    Inside_WS=154
    Inside_NL=155
    QUOTE_CLOSE=156
    LineStrRef=157
    LineStrText=158
    LineStrEscapedChar=159
    LineStrExprStart=160
    TRIPLE_QUOTE_CLOSE=161
    MultiLineStringQuote=162
    MultiLineStrRef=163
    MultiLineStrText=164
    MultiLineStrEscapedChar=165
    MultiLineStrExprStart=166
    MultiLineNL=167
    StrExpr_IN=168
    StrExpr_Comment=169
    StrExpr_WS=170
    StrExpr_NL=171
    COLOR=172

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class KotlinFileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def preamble(self):
            return self.getTypedRuleContext(KotlinParser.PreambleContext,0)


        def EOF(self):
            return self.getToken(KotlinParser.EOF, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def anysemi(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnysemiContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnysemiContext,i)


        def topLevelObject(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TopLevelObjectContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TopLevelObjectContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_kotlinFile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKotlinFile" ):
                listener.enterKotlinFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKotlinFile" ):
                listener.exitKotlinFile(self)




    def kotlinFile(self):

        localctx = KotlinParser.KotlinFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_kotlinFile)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 297
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 294
                    self.match(KotlinParser.NL) 
                self.state = 299
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 300
            self.preamble()
            self.state = 304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5 or _la==26:
                self.state = 301
                self.anysemi()
                self.state = 306
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & 8787085823019909121) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 274911461375) != 0):
                self.state = 307
                self.topLevelObject()
                self.state = 318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5 or _la==26:
                    self.state = 309 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 308
                            self.anysemi()

                        else:
                            raise NoViableAltException(self)
                        self.state = 311 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

                    self.state = 314
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & 8787085823019909121) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 274911461375) != 0):
                        self.state = 313
                        self.topLevelObject()


                    self.state = 320
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 323
            self.match(KotlinParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def preamble(self):
            return self.getTypedRuleContext(KotlinParser.PreambleContext,0)


        def EOF(self):
            return self.getToken(KotlinParser.EOF, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def anysemi(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnysemiContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnysemiContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ExpressionContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_script

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScript" ):
                listener.enterScript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScript" ):
                listener.exitScript(self)




    def script(self):

        localctx = KotlinParser.ScriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_script)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 328
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 325
                    self.match(KotlinParser.NL) 
                self.state = 330
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

            self.state = 331
            self.preamble()
            self.state = 335
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 332
                    self.anysemi() 
                self.state = 337
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

            self.state = 352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4188346347763783136) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -65012289) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 47091) != 0):
                self.state = 338
                self.expression()
                self.state = 349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5 or _la==26:
                    self.state = 340 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 339
                            self.anysemi()

                        else:
                            raise NoViableAltException(self)
                        self.state = 342 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

                    self.state = 345
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                    if la_ == 1:
                        self.state = 344
                        self.expression()


                    self.state = 351
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 354
            self.match(KotlinParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreambleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def packageHeader(self):
            return self.getTypedRuleContext(KotlinParser.PackageHeaderContext,0)


        def importList(self):
            return self.getTypedRuleContext(KotlinParser.ImportListContext,0)


        def fileAnnotations(self):
            return self.getTypedRuleContext(KotlinParser.FileAnnotationsContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_preamble

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreamble" ):
                listener.enterPreamble(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreamble" ):
                listener.exitPreamble(self)




    def preamble(self):

        localctx = KotlinParser.PreambleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_preamble)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 356
                self.fileAnnotations()


            self.state = 359
            self.packageHeader()
            self.state = 360
            self.importList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileAnnotationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fileAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.FileAnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.FileAnnotationContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_fileAnnotations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileAnnotations" ):
                listener.enterFileAnnotations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileAnnotations" ):
                listener.exitFileAnnotations(self)




    def fileAnnotations(self):

        localctx = KotlinParser.FileAnnotationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_fileAnnotations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 362
                    self.fileAnnotation()

                else:
                    raise NoViableAltException(self)
                self.state = 365 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileAnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILE(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.FILE)
            else:
                return self.getToken(KotlinParser.FILE, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COLON)
            else:
                return self.getToken(KotlinParser.COLON, i)

        def LSQUARE(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.LSQUARE)
            else:
                return self.getToken(KotlinParser.LSQUARE, i)

        def RSQUARE(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.RSQUARE)
            else:
                return self.getToken(KotlinParser.RSQUARE, i)

        def unescapedAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.UnescapedAnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.UnescapedAnnotationContext,i)


        def semi(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.SemiContext)
            else:
                return self.getTypedRuleContext(KotlinParser.SemiContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_fileAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileAnnotation" ):
                listener.enterFileAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileAnnotation" ):
                listener.exitFileAnnotation(self)




    def fileAnnotation(self):

        localctx = KotlinParser.FileAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_fileAnnotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 383 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 367
                    self.match(KotlinParser.FILE)
                    self.state = 368
                    self.match(KotlinParser.COLON)
                    self.state = 378
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [11]:
                        self.state = 369
                        self.match(KotlinParser.LSQUARE)
                        self.state = 371 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 370
                            self.unescapedAnnotation()
                            self.state = 373 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & -33517921595647) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & 262271) != 0)):
                                break

                        self.state = 375
                        self.match(KotlinParser.RSQUARE)
                        pass
                    elif token in [58, 66, 67, 68, 69, 73, 78, 79, 92, 97, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 140]:
                        self.state = 377
                        self.unescapedAnnotation()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 381
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                    if la_ == 1:
                        self.state = 380
                        self.semi()



                else:
                    raise NoViableAltException(self)
                self.state = 385 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PackageHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACKAGE(self):
            return self.getToken(KotlinParser.PACKAGE, 0)

        def identifier(self):
            return self.getTypedRuleContext(KotlinParser.IdentifierContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def semi(self):
            return self.getTypedRuleContext(KotlinParser.SemiContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_packageHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageHeader" ):
                listener.enterPackageHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageHeader" ):
                listener.exitPackageHeader(self)




    def packageHeader(self):

        localctx = KotlinParser.PackageHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_packageHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==40 or _la==56 or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & 9008298766351609) != 0):
                    self.state = 387
                    self.modifierList()


                self.state = 390
                self.match(KotlinParser.PACKAGE)
                self.state = 391
                self.identifier()
                self.state = 393
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                if la_ == 1:
                    self.state = 392
                    self.semi()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importHeader(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ImportHeaderContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ImportHeaderContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_importList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportList" ):
                listener.enterImportList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportList" ):
                listener.exitImportList(self)




    def importList(self):

        localctx = KotlinParser.ImportListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_importList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 397
                    self.importHeader() 
                self.state = 402
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(KotlinParser.IMPORT, 0)

        def identifier(self):
            return self.getTypedRuleContext(KotlinParser.IdentifierContext,0)


        def DOT(self):
            return self.getToken(KotlinParser.DOT, 0)

        def MULT(self):
            return self.getToken(KotlinParser.MULT, 0)

        def importAlias(self):
            return self.getTypedRuleContext(KotlinParser.ImportAliasContext,0)


        def semi(self):
            return self.getTypedRuleContext(KotlinParser.SemiContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_importHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportHeader" ):
                listener.enterImportHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportHeader" ):
                listener.exitImportHeader(self)




    def importHeader(self):

        localctx = KotlinParser.ImportHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_importHeader)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 403
            self.match(KotlinParser.IMPORT)
            self.state = 404
            self.identifier()
            self.state = 408
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.state = 405
                self.match(KotlinParser.DOT)
                self.state = 406
                self.match(KotlinParser.MULT)
                pass
            elif token in [87]:
                self.state = 407
                self.importAlias()
                pass
            elif token in [-1, 5, 9, 11, 13, 18, 19, 20, 21, 24, 26, 36, 37, 40, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145]:
                pass
            else:
                pass
            self.state = 411
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 410
                self.semi()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(KotlinParser.AS, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_importAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportAlias" ):
                listener.enterImportAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportAlias" ):
                listener.exitImportAlias(self)




    def importAlias(self):

        localctx = KotlinParser.ImportAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_importAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self.match(KotlinParser.AS)
            self.state = 414
            self.simpleIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelObjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.ClassDeclarationContext,0)


        def objectDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.ObjectDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.FunctionDeclarationContext,0)


        def propertyDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.PropertyDeclarationContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(KotlinParser.TypeAliasContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_topLevelObject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelObject" ):
                listener.enterTopLevelObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelObject" ):
                listener.exitTopLevelObject(self)




    def topLevelObject(self):

        localctx = KotlinParser.TopLevelObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_topLevelObject)
        try:
            self.state = 421
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 416
                self.classDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 417
                self.objectDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 418
                self.functionDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 419
                self.propertyDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 420
                self.typeAlias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def CLASS(self):
            return self.getToken(KotlinParser.CLASS, 0)

        def INTERFACE(self):
            return self.getToken(KotlinParser.INTERFACE, 0)

        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def typeParameters(self):
            return self.getTypedRuleContext(KotlinParser.TypeParametersContext,0)


        def primaryConstructor(self):
            return self.getTypedRuleContext(KotlinParser.PrimaryConstructorContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def delegationSpecifiers(self):
            return self.getTypedRuleContext(KotlinParser.DelegationSpecifiersContext,0)


        def typeConstraints(self):
            return self.getTypedRuleContext(KotlinParser.TypeConstraintsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(KotlinParser.ClassBodyContext,0)


        def enumClassBody(self):
            return self.getTypedRuleContext(KotlinParser.EnumClassBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclaration" ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclaration" ):
                listener.exitClassDeclaration(self)




    def classDeclaration(self):

        localctx = KotlinParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_classDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40 or _la==56 or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & 9008298766351609) != 0):
                self.state = 423
                self.modifierList()


            self.state = 426
            _la = self._input.LA(1)
            if not(_la==59 or _la==60):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 427
                self.match(KotlinParser.NL)
                self.state = 432
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 433
            self.simpleIdentifier()
            self.state = 441
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 434
                    self.match(KotlinParser.NL)
                    self.state = 439
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 440
                self.typeParameters()


            self.state = 450
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 446
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 443
                    self.match(KotlinParser.NL)
                    self.state = 448
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 449
                self.primaryConstructor()


            self.state = 466
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 452
                    self.match(KotlinParser.NL)
                    self.state = 457
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 458
                self.match(KotlinParser.COLON)
                self.state = 462
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 459
                    self.match(KotlinParser.NL)
                    self.state = 464
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 465
                self.delegationSpecifiers()


            self.state = 475
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 468
                    self.match(KotlinParser.NL)
                    self.state = 473
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 474
                self.typeConstraints()


            self.state = 491
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 477
                    self.match(KotlinParser.NL)
                    self.state = 482
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 483
                self.classBody()

            elif la_ == 2:
                self.state = 487
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 484
                    self.match(KotlinParser.NL)
                    self.state = 489
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 490
                self.enumClassBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryConstructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classParameters(self):
            return self.getTypedRuleContext(KotlinParser.ClassParametersContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def CONSTRUCTOR(self):
            return self.getToken(KotlinParser.CONSTRUCTOR, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_primaryConstructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryConstructor" ):
                listener.enterPrimaryConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryConstructor" ):
                listener.exitPrimaryConstructor(self)




    def primaryConstructor(self):

        localctx = KotlinParser.PrimaryConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_primaryConstructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40 or _la==56 or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & 9008298766351609) != 0):
                self.state = 493
                self.modifierList()


            self.state = 503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 496
                self.match(KotlinParser.CONSTRUCTOR)
                self.state = 500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 497
                    self.match(KotlinParser.NL)
                    self.state = 502
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 505
            self.classParameters()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def classParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ClassParameterContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ClassParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_classParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassParameters" ):
                listener.enterClassParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassParameters" ):
                listener.exitClassParameters(self)




    def classParameters(self):

        localctx = KotlinParser.ClassParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_classParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            self.match(KotlinParser.LPAREN)
            self.state = 519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & -3939815418167295) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 343630938111) != 0):
                self.state = 508
                self.classParameter()
                self.state = 513
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 509
                        self.match(KotlinParser.COMMA)
                        self.state = 510
                        self.classParameter() 
                    self.state = 515
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

                self.state = 517
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 516
                    self.match(KotlinParser.COMMA)




            self.state = 521
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def VAL(self):
            return self.getToken(KotlinParser.VAL, 0)

        def VAR(self):
            return self.getToken(KotlinParser.VAR, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_classParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassParameter" ):
                listener.enterClassParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassParameter" ):
                listener.exitClassParameter(self)




    def classParameter(self):

        localctx = KotlinParser.ClassParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_classParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 524
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.state = 523
                self.modifierList()


            self.state = 527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63 or _la==64:
                self.state = 526
                _la = self._input.LA(1)
                if not(_la==63 or _la==64):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 529
            self.simpleIdentifier()
            self.state = 530
            self.match(KotlinParser.COLON)
            self.state = 531
            self.type_()
            self.state = 534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 532
                self.match(KotlinParser.ASSIGNMENT)
                self.state = 533
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelegationSpecifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def delegationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.DelegationSpecifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.DelegationSpecifierContext,i)


        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_delegationSpecifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelegationSpecifiers" ):
                listener.enterDelegationSpecifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelegationSpecifiers" ):
                listener.exitDelegationSpecifiers(self)




    def delegationSpecifiers(self):

        localctx = KotlinParser.DelegationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_delegationSpecifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==40 or _la==56 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 562949953422287) != 0):
                self.state = 536
                self.annotations()
                self.state = 541
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 542
            self.delegationSpecifier()
            self.state = 565
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 546
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 543
                        self.match(KotlinParser.NL)
                        self.state = 548
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 549
                    self.match(KotlinParser.COMMA)
                    self.state = 553
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 550
                        self.match(KotlinParser.NL)
                        self.state = 555
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 559
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==40 or _la==56 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 562949953422287) != 0):
                        self.state = 556
                        self.annotations()
                        self.state = 561
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 562
                    self.delegationSpecifier() 
                self.state = 567
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelegationSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructorInvocation(self):
            return self.getTypedRuleContext(KotlinParser.ConstructorInvocationContext,0)


        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def explicitDelegation(self):
            return self.getTypedRuleContext(KotlinParser.ExplicitDelegationContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_delegationSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelegationSpecifier" ):
                listener.enterDelegationSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelegationSpecifier" ):
                listener.exitDelegationSpecifier(self)




    def delegationSpecifier(self):

        localctx = KotlinParser.DelegationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_delegationSpecifier)
        try:
            self.state = 571
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 568
                self.constructorInvocation()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 569
                self.userType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 570
                self.explicitDelegation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def callSuffix(self):
            return self.getTypedRuleContext(KotlinParser.CallSuffixContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_constructorInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorInvocation" ):
                listener.enterConstructorInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorInvocation" ):
                listener.exitConstructorInvocation(self)




    def constructorInvocation(self):

        localctx = KotlinParser.ConstructorInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_constructorInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 573
            self.userType()
            self.state = 574
            self.callSuffix()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitDelegationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def BY(self):
            return self.getToken(KotlinParser.BY, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_explicitDelegation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitDelegation" ):
                listener.enterExplicitDelegation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitDelegation" ):
                listener.exitExplicitDelegation(self)




    def explicitDelegation(self):

        localctx = KotlinParser.ExplicitDelegationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_explicitDelegation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self.userType()
            self.state = 580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 577
                self.match(KotlinParser.NL)
                self.state = 582
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 583
            self.match(KotlinParser.BY)
            self.state = 587
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 584
                    self.match(KotlinParser.NL) 
                self.state = 589
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

            self.state = 590
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self):
            return self.getToken(KotlinParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def classMemberDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ClassMemberDeclarationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ClassMemberDeclarationContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_classBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBody" ):
                listener.enterClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBody" ):
                listener.exitClassBody(self)




    def classBody(self):

        localctx = KotlinParser.ClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_classBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.match(KotlinParser.LCURL)
            self.state = 596
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 593
                    self.match(KotlinParser.NL) 
                self.state = 598
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

            self.state = 602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & 8787085823892324353) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 274911461375) != 0):
                self.state = 599
                self.classMemberDeclaration()
                self.state = 604
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 605
                self.match(KotlinParser.NL)
                self.state = 610
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 611
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassMemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.ClassDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.FunctionDeclarationContext,0)


        def objectDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.ObjectDeclarationContext,0)


        def companionObject(self):
            return self.getTypedRuleContext(KotlinParser.CompanionObjectContext,0)


        def propertyDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.PropertyDeclarationContext,0)


        def anonymousInitializer(self):
            return self.getTypedRuleContext(KotlinParser.AnonymousInitializerContext,0)


        def secondaryConstructor(self):
            return self.getTypedRuleContext(KotlinParser.SecondaryConstructorContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(KotlinParser.TypeAliasContext,0)


        def anysemi(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnysemiContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnysemiContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_classMemberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassMemberDeclaration" ):
                listener.enterClassMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassMemberDeclaration" ):
                listener.exitClassMemberDeclaration(self)




    def classMemberDeclaration(self):

        localctx = KotlinParser.ClassMemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_classMemberDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 613
                self.classDeclaration()
                pass

            elif la_ == 2:
                self.state = 614
                self.functionDeclaration()
                pass

            elif la_ == 3:
                self.state = 615
                self.objectDeclaration()
                pass

            elif la_ == 4:
                self.state = 616
                self.companionObject()
                pass

            elif la_ == 5:
                self.state = 617
                self.propertyDeclaration()
                pass

            elif la_ == 6:
                self.state = 618
                self.anonymousInitializer()
                pass

            elif la_ == 7:
                self.state = 619
                self.secondaryConstructor()
                pass

            elif la_ == 8:
                self.state = 620
                self.typeAlias()
                pass


            self.state = 624 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 623
                    self.anysemi()

                else:
                    raise NoViableAltException(self)
                self.state = 626 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnonymousInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INIT(self):
            return self.getToken(KotlinParser.INIT, 0)

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_anonymousInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymousInitializer" ):
                listener.enterAnonymousInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymousInitializer" ):
                listener.exitAnonymousInitializer(self)




    def anonymousInitializer(self):

        localctx = KotlinParser.AnonymousInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_anonymousInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.match(KotlinParser.INIT)
            self.state = 632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 629
                self.match(KotlinParser.NL)
                self.state = 634
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 635
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SecondaryConstructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRUCTOR(self):
            return self.getToken(KotlinParser.CONSTRUCTOR, 0)

        def functionValueParameters(self):
            return self.getTypedRuleContext(KotlinParser.FunctionValueParametersContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def constructorDelegationCall(self):
            return self.getTypedRuleContext(KotlinParser.ConstructorDelegationCallContext,0)


        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_secondaryConstructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecondaryConstructor" ):
                listener.enterSecondaryConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecondaryConstructor" ):
                listener.exitSecondaryConstructor(self)




    def secondaryConstructor(self):

        localctx = KotlinParser.SecondaryConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_secondaryConstructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40 or _la==56 or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & 9008298766351609) != 0):
                self.state = 637
                self.modifierList()


            self.state = 640
            self.match(KotlinParser.CONSTRUCTOR)
            self.state = 644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 641
                self.match(KotlinParser.NL)
                self.state = 646
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 647
            self.functionValueParameters()
            self.state = 662
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 648
                    self.match(KotlinParser.NL)
                    self.state = 653
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 654
                self.match(KotlinParser.COLON)
                self.state = 658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 655
                    self.match(KotlinParser.NL)
                    self.state = 660
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 661
                self.constructorDelegationCall()


            self.state = 667
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 664
                    self.match(KotlinParser.NL) 
                self.state = 669
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

            self.state = 671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 670
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorDelegationCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THIS(self):
            return self.getToken(KotlinParser.THIS, 0)

        def valueArguments(self):
            return self.getTypedRuleContext(KotlinParser.ValueArgumentsContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def SUPER(self):
            return self.getToken(KotlinParser.SUPER, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_constructorDelegationCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDelegationCall" ):
                listener.enterConstructorDelegationCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDelegationCall" ):
                listener.exitConstructorDelegationCall(self)




    def constructorDelegationCall(self):

        localctx = KotlinParser.ConstructorDelegationCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_constructorDelegationCall)
        self._la = 0 # Token type
        try:
            self.state = 689
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [70]:
                self.enterOuterAlt(localctx, 1)
                self.state = 673
                self.match(KotlinParser.THIS)
                self.state = 677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 674
                    self.match(KotlinParser.NL)
                    self.state = 679
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 680
                self.valueArguments()
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 2)
                self.state = 681
                self.match(KotlinParser.SUPER)
                self.state = 685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 682
                    self.match(KotlinParser.NL)
                    self.state = 687
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 688
                self.valueArguments()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumClassBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self):
            return self.getToken(KotlinParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def enumEntries(self):
            return self.getTypedRuleContext(KotlinParser.EnumEntriesContext,0)


        def SEMICOLON(self):
            return self.getToken(KotlinParser.SEMICOLON, 0)

        def classMemberDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ClassMemberDeclarationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ClassMemberDeclarationContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_enumClassBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumClassBody" ):
                listener.enterEnumClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumClassBody" ):
                listener.exitEnumClassBody(self)




    def enumClassBody(self):

        localctx = KotlinParser.EnumClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_enumClassBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self.match(KotlinParser.LCURL)
            self.state = 695
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 692
                    self.match(KotlinParser.NL) 
                self.state = 697
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

            self.state = 699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & -4502765396754431) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 343630938111) != 0):
                self.state = 698
                self.enumEntries()


            self.state = 720
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 701
                    self.match(KotlinParser.NL)
                    self.state = 706
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 707
                self.match(KotlinParser.SEMICOLON)
                self.state = 711
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 708
                        self.match(KotlinParser.NL) 
                    self.state = 713
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

                self.state = 717
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & 8787085823892324353) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 274911461375) != 0):
                    self.state = 714
                    self.classMemberDeclaration()
                    self.state = 719
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 725
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 722
                self.match(KotlinParser.NL)
                self.state = 727
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 728
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumEntriesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.EnumEntryContext)
            else:
                return self.getTypedRuleContext(KotlinParser.EnumEntryContext,i)


        def SEMICOLON(self):
            return self.getToken(KotlinParser.SEMICOLON, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_enumEntries

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumEntries" ):
                listener.enterEnumEntries(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumEntries" ):
                listener.exitEnumEntries(self)




    def enumEntries(self):

        localctx = KotlinParser.EnumEntriesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_enumEntries)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 737 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 730
                self.enumEntry()
                self.state = 734
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 731
                        self.match(KotlinParser.NL) 
                    self.state = 736
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

                self.state = 739 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & -4502765396754431) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 343630938111) != 0)):
                    break

            self.state = 742
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 741
                self.match(KotlinParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumEntryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def valueArguments(self):
            return self.getTypedRuleContext(KotlinParser.ValueArgumentsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(KotlinParser.ClassBodyContext,0)


        def COMMA(self):
            return self.getToken(KotlinParser.COMMA, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_enumEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumEntry" ):
                listener.enterEnumEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumEntry" ):
                listener.exitEnumEntry(self)




    def enumEntry(self):

        localctx = KotlinParser.EnumEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_enumEntry)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==40 or _la==56 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 562949953422287) != 0):
                self.state = 744
                self.annotations()
                self.state = 749
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 750
            self.simpleIdentifier()
            self.state = 758
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 751
                    self.match(KotlinParser.NL)
                    self.state = 756
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 757
                self.valueArguments()


            self.state = 767
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 760
                    self.match(KotlinParser.NL)
                    self.state = 765
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 766
                self.classBody()


            self.state = 776
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 769
                    self.match(KotlinParser.NL)
                    self.state = 774
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 775
                self.match(KotlinParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUN(self):
            return self.getToken(KotlinParser.FUN, 0)

        def functionValueParameters(self):
            return self.getTypedRuleContext(KotlinParser.FunctionValueParametersContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.DOT)
            else:
                return self.getToken(KotlinParser.DOT, i)

        def typeParameters(self):
            return self.getTypedRuleContext(KotlinParser.TypeParametersContext,0)


        def receiverType(self):
            return self.getTypedRuleContext(KotlinParser.ReceiverTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(KotlinParser.IdentifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def typeConstraints(self):
            return self.getTypedRuleContext(KotlinParser.TypeConstraintsContext,0)


        def functionBody(self):
            return self.getTypedRuleContext(KotlinParser.FunctionBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_functionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDeclaration" ):
                listener.enterFunctionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDeclaration" ):
                listener.exitFunctionDeclaration(self)




    def functionDeclaration(self):

        localctx = KotlinParser.FunctionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_functionDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40 or _la==56 or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & 9008298766351609) != 0):
                self.state = 778
                self.modifierList()


            self.state = 781
            self.match(KotlinParser.FUN)
            self.state = 797
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 782
                    self.match(KotlinParser.NL)
                    self.state = 787
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 788
                self.type_()
                self.state = 792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 789
                    self.match(KotlinParser.NL)
                    self.state = 794
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 795
                self.match(KotlinParser.DOT)


            self.state = 806
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 802
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 799
                    self.match(KotlinParser.NL)
                    self.state = 804
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 805
                self.typeParameters()


            self.state = 823
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 808
                    self.match(KotlinParser.NL)
                    self.state = 813
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 814
                self.receiverType()
                self.state = 818
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 815
                    self.match(KotlinParser.NL)
                    self.state = 820
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 821
                self.match(KotlinParser.DOT)


            self.state = 832
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 825
                    self.match(KotlinParser.NL)
                    self.state = 830
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 831
                self.identifier()


            self.state = 837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 834
                self.match(KotlinParser.NL)
                self.state = 839
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 840
            self.functionValueParameters()
            self.state = 855
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 841
                    self.match(KotlinParser.NL)
                    self.state = 846
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 847
                self.match(KotlinParser.COLON)
                self.state = 851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 848
                    self.match(KotlinParser.NL)
                    self.state = 853
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 854
                self.type_()


            self.state = 864
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 857
                    self.match(KotlinParser.NL)
                    self.state = 862
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 863
                self.typeConstraints()


            self.state = 873
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 866
                    self.match(KotlinParser.NL)
                    self.state = 871
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 872
                self.functionBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionValueParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def functionValueParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.FunctionValueParameterContext)
            else:
                return self.getTypedRuleContext(KotlinParser.FunctionValueParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionValueParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionValueParameters" ):
                listener.enterFunctionValueParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionValueParameters" ):
                listener.exitFunctionValueParameters(self)




    def functionValueParameters(self):

        localctx = KotlinParser.FunctionValueParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_functionValueParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self.match(KotlinParser.LPAREN)
            self.state = 887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & -3939815443333119) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 343630938111) != 0):
                self.state = 876
                self.functionValueParameter()
                self.state = 881
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 877
                        self.match(KotlinParser.COMMA)
                        self.state = 878
                        self.functionValueParameter() 
                    self.state = 883
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

                self.state = 885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 884
                    self.match(KotlinParser.COMMA)




            self.state = 889
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionValueParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self):
            return self.getTypedRuleContext(KotlinParser.ParameterContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_functionValueParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionValueParameter" ):
                listener.enterFunctionValueParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionValueParameter" ):
                listener.exitFunctionValueParameter(self)




    def functionValueParameter(self):

        localctx = KotlinParser.FunctionValueParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_functionValueParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 891
                self.modifierList()


            self.state = 894
            self.parameter()
            self.state = 897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 895
                self.match(KotlinParser.ASSIGNMENT)
                self.state = 896
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)




    def parameter(self):

        localctx = KotlinParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 899
            self.simpleIdentifier()
            self.state = 900
            self.match(KotlinParser.COLON)
            self.state = 901
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiverTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parenthesizedType(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedTypeContext,0)


        def nullableType(self):
            return self.getTypedRuleContext(KotlinParser.NullableTypeContext,0)


        def typeReference(self):
            return self.getTypedRuleContext(KotlinParser.TypeReferenceContext,0)


        def typeModifierList(self):
            return self.getTypedRuleContext(KotlinParser.TypeModifierListContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_receiverType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiverType" ):
                listener.enterReceiverType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiverType" ):
                listener.exitReceiverType(self)




    def receiverType(self):

        localctx = KotlinParser.ReceiverTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_receiverType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 904
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 903
                self.typeModifierList()


            self.state = 909
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 906
                self.parenthesizedType()
                pass

            elif la_ == 2:
                self.state = 907
                self.nullableType()
                pass

            elif la_ == 3:
                self.state = 908
                self.typeReference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionBody" ):
                listener.enterFunctionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionBody" ):
                listener.exitFunctionBody(self)




    def functionBody(self):

        localctx = KotlinParser.FunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_functionBody)
        try:
            self.state = 920
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.enterOuterAlt(localctx, 1)
                self.state = 911
                self.block()
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 2)
                self.state = 912
                self.match(KotlinParser.ASSIGNMENT)
                self.state = 916
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 913
                        self.match(KotlinParser.NL) 
                    self.state = 918
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

                self.state = 919
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT(self):
            return self.getToken(KotlinParser.OBJECT, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def primaryConstructor(self):
            return self.getTypedRuleContext(KotlinParser.PrimaryConstructorContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def delegationSpecifiers(self):
            return self.getTypedRuleContext(KotlinParser.DelegationSpecifiersContext,0)


        def classBody(self):
            return self.getTypedRuleContext(KotlinParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_objectDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectDeclaration" ):
                listener.enterObjectDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectDeclaration" ):
                listener.exitObjectDeclaration(self)




    def objectDeclaration(self):

        localctx = KotlinParser.ObjectDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_objectDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 923
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40 or _la==56 or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & 9008298766351609) != 0):
                self.state = 922
                self.modifierList()


            self.state = 925
            self.match(KotlinParser.OBJECT)
            self.state = 929
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 926
                self.match(KotlinParser.NL)
                self.state = 931
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 932
            self.simpleIdentifier()
            self.state = 940
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 933
                    self.match(KotlinParser.NL)
                    self.state = 938
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 939
                self.primaryConstructor()


            self.state = 956
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 945
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 942
                    self.match(KotlinParser.NL)
                    self.state = 947
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 948
                self.match(KotlinParser.COLON)
                self.state = 952
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 949
                    self.match(KotlinParser.NL)
                    self.state = 954
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 955
                self.delegationSpecifiers()


            self.state = 965
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 961
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 958
                    self.match(KotlinParser.NL)
                    self.state = 963
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 964
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompanionObjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPANION(self):
            return self.getToken(KotlinParser.COMPANION, 0)

        def OBJECT(self):
            return self.getToken(KotlinParser.OBJECT, 0)

        def modifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ModifierListContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ModifierListContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def delegationSpecifiers(self):
            return self.getTypedRuleContext(KotlinParser.DelegationSpecifiersContext,0)


        def classBody(self):
            return self.getTypedRuleContext(KotlinParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_companionObject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompanionObject" ):
                listener.enterCompanionObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompanionObject" ):
                listener.exitCompanionObject(self)




    def companionObject(self):

        localctx = KotlinParser.CompanionObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_companionObject)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 968
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40 or _la==56 or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & 9008298766351609) != 0):
                self.state = 967
                self.modifierList()


            self.state = 970
            self.match(KotlinParser.COMPANION)
            self.state = 974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 971
                self.match(KotlinParser.NL)
                self.state = 976
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40 or _la==56 or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & 9008298766351609) != 0):
                self.state = 977
                self.modifierList()


            self.state = 980
            self.match(KotlinParser.OBJECT)
            self.state = 988
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.state = 984
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 981
                    self.match(KotlinParser.NL)
                    self.state = 986
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 987
                self.simpleIdentifier()


            self.state = 1004
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.state = 993
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 990
                    self.match(KotlinParser.NL)
                    self.state = 995
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 996
                self.match(KotlinParser.COLON)
                self.state = 1000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 997
                    self.match(KotlinParser.NL)
                    self.state = 1002
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1003
                self.delegationSpecifiers()


            self.state = 1013
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.state = 1009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1006
                    self.match(KotlinParser.NL)
                    self.state = 1011
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1012
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAL(self):
            return self.getToken(KotlinParser.VAL, 0)

        def VAR(self):
            return self.getToken(KotlinParser.VAR, 0)

        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(KotlinParser.TypeParametersContext,0)


        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def DOT(self):
            return self.getToken(KotlinParser.DOT, 0)

        def typeConstraints(self):
            return self.getTypedRuleContext(KotlinParser.TypeConstraintsContext,0)


        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def getter(self):
            return self.getTypedRuleContext(KotlinParser.GetterContext,0)


        def setter(self):
            return self.getTypedRuleContext(KotlinParser.SetterContext,0)


        def multiVariableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.MultiVariableDeclarationContext,0)


        def variableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.VariableDeclarationContext,0)


        def BY(self):
            return self.getToken(KotlinParser.BY, 0)

        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def semi(self):
            return self.getTypedRuleContext(KotlinParser.SemiContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_propertyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyDeclaration" ):
                listener.enterPropertyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyDeclaration" ):
                listener.exitPropertyDeclaration(self)




    def propertyDeclaration(self):

        localctx = KotlinParser.PropertyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_propertyDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1016
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40 or _la==56 or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & 9008298766351609) != 0):
                self.state = 1015
                self.modifierList()


            self.state = 1018
            _la = self._input.LA(1)
            if not(_la==63 or _la==64):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1026
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.state = 1022
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1019
                    self.match(KotlinParser.NL)
                    self.state = 1024
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1025
                self.typeParameters()


            self.state = 1043
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.state = 1031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1028
                    self.match(KotlinParser.NL)
                    self.state = 1033
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1034
                self.type_()
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1035
                    self.match(KotlinParser.NL)
                    self.state = 1040
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1041
                self.match(KotlinParser.DOT)


            self.state = 1048
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1045
                self.match(KotlinParser.NL)
                self.state = 1050
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1053
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9]:
                self.state = 1051
                self.multiVariableDeclaration()
                pass
            elif token in [140, 141]:
                self.state = 1052
                self.variableDeclaration()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1062
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.state = 1058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1055
                    self.match(KotlinParser.NL)
                    self.state = 1060
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1061
                self.typeConstraints()


            self.state = 1078
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.state = 1067
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1064
                    self.match(KotlinParser.NL)
                    self.state = 1069
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1070
                _la = self._input.LA(1)
                if not(_la==27 or _la==67):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1074
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,147,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1071
                        self.match(KotlinParser.NL) 
                    self.state = 1076
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,147,self._ctx)

                self.state = 1077
                self.expression()


            self.state = 1104
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.state = 1083
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1080
                    self.match(KotlinParser.NL)
                    self.state = 1085
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1086
                self.getter()
                self.state = 1090
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
                if la_ == 1:
                    self.state = 1087
                    self.semi()
                    self.state = 1088
                    self.setter()



            elif la_ == 2:
                self.state = 1095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1092
                    self.match(KotlinParser.NL)
                    self.state = 1097
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1098
                self.setter()
                self.state = 1102
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
                if la_ == 1:
                    self.state = 1099
                    self.semi()
                    self.state = 1100
                    self.getter()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.VariableDeclarationContext,i)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiVariableDeclaration" ):
                listener.enterMultiVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiVariableDeclaration" ):
                listener.exitMultiVariableDeclaration(self)




    def multiVariableDeclaration(self):

        localctx = KotlinParser.MultiVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_multiVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1106
            self.match(KotlinParser.LPAREN)
            self.state = 1107
            self.variableDeclaration()
            self.state = 1112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==8:
                self.state = 1108
                self.match(KotlinParser.COMMA)
                self.state = 1109
                self.variableDeclaration()
                self.state = 1114
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1115
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PineIdentifier(self):
            return self.getToken(KotlinParser.PineIdentifier, 0)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def Identifier(self):
            return self.getToken(KotlinParser.Identifier, 0)

        def COLOR(self):
            return self.getToken(KotlinParser.COLOR, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)




    def variableDeclaration(self):

        localctx = KotlinParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_variableDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1127
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [141]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1117
                self.match(KotlinParser.PineIdentifier)
                self.state = 1120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==25:
                    self.state = 1118
                    self.match(KotlinParser.COLON)
                    self.state = 1119
                    self.type_()


                pass
            elif token in [140]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1122
                self.match(KotlinParser.Identifier)
                self.state = 1125
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==172:
                    self.state = 1123
                    self.match(KotlinParser.COLOR)
                    self.state = 1124
                    self.type_()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GETTER(self):
            return self.getToken(KotlinParser.GETTER, 0)

        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_getter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetter" ):
                listener.enterGetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetter" ):
                listener.exitGetter(self)




    def getter(self):

        localctx = KotlinParser.GetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_getter)
        self._la = 0 # Token type
        try:
            self.state = 1178
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1130
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==40 or _la==56 or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & 9008298766351609) != 0):
                    self.state = 1129
                    self.modifierList()


                self.state = 1132
                self.match(KotlinParser.GETTER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1134
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==40 or _la==56 or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & 9008298766351609) != 0):
                    self.state = 1133
                    self.modifierList()


                self.state = 1136
                self.match(KotlinParser.GETTER)
                self.state = 1140
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1137
                    self.match(KotlinParser.NL)
                    self.state = 1142
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1143
                self.match(KotlinParser.LPAREN)
                self.state = 1144
                self.match(KotlinParser.RPAREN)
                self.state = 1159
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
                if la_ == 1:
                    self.state = 1148
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1145
                        self.match(KotlinParser.NL)
                        self.state = 1150
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1151
                    self.match(KotlinParser.COLON)
                    self.state = 1155
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1152
                        self.match(KotlinParser.NL)
                        self.state = 1157
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1158
                    self.type_()


                self.state = 1164
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1161
                    self.match(KotlinParser.NL)
                    self.state = 1166
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1176
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13]:
                    self.state = 1167
                    self.block()
                    pass
                elif token in [27]:
                    self.state = 1168
                    self.match(KotlinParser.ASSIGNMENT)
                    self.state = 1172
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,165,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1169
                            self.match(KotlinParser.NL) 
                        self.state = 1174
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,165,self._ctx)

                    self.state = 1175
                    self.expression()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETTER(self):
            return self.getToken(KotlinParser.SETTER, 0)

        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def functionBody(self):
            return self.getTypedRuleContext(KotlinParser.FunctionBodyContext,0)


        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def parameter(self):
            return self.getTypedRuleContext(KotlinParser.ParameterContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def parameterModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ParameterModifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ParameterModifierContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_setter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetter" ):
                listener.enterSetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetter" ):
                listener.exitSetter(self)




    def setter(self):

        localctx = KotlinParser.SetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_setter)
        self._la = 0 # Token type
        try:
            self.state = 1215
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==40 or _la==56 or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & 9008298766351609) != 0):
                    self.state = 1180
                    self.modifierList()


                self.state = 1183
                self.match(KotlinParser.SETTER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1185
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==40 or _la==56 or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & 9008298766351609) != 0):
                    self.state = 1184
                    self.modifierList()


                self.state = 1187
                self.match(KotlinParser.SETTER)
                self.state = 1191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1188
                    self.match(KotlinParser.NL)
                    self.state = 1193
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1194
                self.match(KotlinParser.LPAREN)
                self.state = 1199
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,172,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1197
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [40, 56, 93, 94, 95, 96, 99, 100, 101, 102, 142]:
                            self.state = 1195
                            self.annotations()
                            pass
                        elif token in [125, 126, 127]:
                            self.state = 1196
                            self.parameterModifier()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 1201
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,172,self._ctx)

                self.state = 1204
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
                if la_ == 1:
                    self.state = 1202
                    self.simpleIdentifier()
                    pass

                elif la_ == 2:
                    self.state = 1203
                    self.parameter()
                    pass


                self.state = 1206
                self.match(KotlinParser.RPAREN)
                self.state = 1210
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1207
                    self.match(KotlinParser.NL)
                    self.state = 1212
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1213
                self.functionBody()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE_ALIAS(self):
            return self.getToken(KotlinParser.TYPE_ALIAS, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def typeParameters(self):
            return self.getTypedRuleContext(KotlinParser.TypeParametersContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_typeAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAlias" ):
                listener.enterTypeAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAlias" ):
                listener.exitTypeAlias(self)




    def typeAlias(self):

        localctx = KotlinParser.TypeAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_typeAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40 or _la==56 or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & 9008298766351609) != 0):
                self.state = 1217
                self.modifierList()


            self.state = 1220
            self.match(KotlinParser.TYPE_ALIAS)
            self.state = 1224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1221
                self.match(KotlinParser.NL)
                self.state = 1226
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1227
            self.simpleIdentifier()
            self.state = 1235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.state = 1231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1228
                    self.match(KotlinParser.NL)
                    self.state = 1233
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1234
                self.typeParameters()


            self.state = 1240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1237
                self.match(KotlinParser.NL)
                self.state = 1242
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1243
            self.match(KotlinParser.ASSIGNMENT)
            self.state = 1247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1244
                self.match(KotlinParser.NL)
                self.state = 1249
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1250
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGLE(self):
            return self.getToken(KotlinParser.LANGLE, 0)

        def typeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeParameterContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeParameterContext,i)


        def RANGLE(self):
            return self.getToken(KotlinParser.RANGLE, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameters" ):
                listener.enterTypeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameters" ):
                listener.exitTypeParameters(self)




    def typeParameters(self):

        localctx = KotlinParser.TypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_typeParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1252
            self.match(KotlinParser.LANGLE)
            self.state = 1256
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,182,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1253
                    self.match(KotlinParser.NL) 
                self.state = 1258
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,182,self._ctx)

            self.state = 1259
            self.typeParameter()
            self.state = 1276
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,185,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1263
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1260
                        self.match(KotlinParser.NL)
                        self.state = 1265
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1266
                    self.match(KotlinParser.COMMA)
                    self.state = 1270
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,184,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1267
                            self.match(KotlinParser.NL) 
                        self.state = 1272
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,184,self._ctx)

                    self.state = 1273
                    self.typeParameter() 
                self.state = 1278
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,185,self._ctx)

            self.state = 1286
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
            if la_ == 1:
                self.state = 1282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1279
                    self.match(KotlinParser.NL)
                    self.state = 1284
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1285
                self.match(KotlinParser.COMMA)


            self.state = 1291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1288
                self.match(KotlinParser.NL)
                self.state = 1293
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1294
            self.match(KotlinParser.RANGLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def MULT(self):
            return self.getToken(KotlinParser.MULT, 0)

        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_typeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameter" ):
                listener.enterTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameter" ):
                listener.exitTypeParameter(self)




    def typeParameter(self):

        localctx = KotlinParser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_typeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1297
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.state = 1296
                self.modifierList()


            self.state = 1302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1299
                self.match(KotlinParser.NL)
                self.state = 1304
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1307
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58, 66, 67, 68, 69, 73, 78, 79, 92, 97, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 140]:
                self.state = 1305
                self.simpleIdentifier()
                pass
            elif token in [15]:
                self.state = 1306
                self.match(KotlinParser.MULT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1323
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.state = 1312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1309
                    self.match(KotlinParser.NL)
                    self.state = 1314
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1315
                self.match(KotlinParser.COLON)
                self.state = 1319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1316
                    self.match(KotlinParser.NL)
                    self.state = 1321
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1322
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionType(self):
            return self.getTypedRuleContext(KotlinParser.FunctionTypeContext,0)


        def parenthesizedType(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedTypeContext,0)


        def nullableType(self):
            return self.getTypedRuleContext(KotlinParser.NullableTypeContext,0)


        def typeReference(self):
            return self.getTypedRuleContext(KotlinParser.TypeReferenceContext,0)


        def typeModifierList(self):
            return self.getTypedRuleContext(KotlinParser.TypeModifierListContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)




    def type_(self):

        localctx = KotlinParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1326
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.state = 1325
                self.typeModifierList()


            self.state = 1332
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
            if la_ == 1:
                self.state = 1328
                self.functionType()
                pass

            elif la_ == 2:
                self.state = 1329
                self.parenthesizedType()
                pass

            elif la_ == 3:
                self.state = 1330
                self.nullableType()
                pass

            elif la_ == 4:
                self.state = 1331
                self.typeReference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeModifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def SUSPEND(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.SUSPEND)
            else:
                return self.getToken(KotlinParser.SUSPEND, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeModifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeModifierList" ):
                listener.enterTypeModifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeModifierList" ):
                listener.exitTypeModifierList(self)




    def typeModifierList(self):

        localctx = KotlinParser.TypeModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_typeModifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1342 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1342
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [40, 56, 93, 94, 95, 96, 99, 100, 101, 102, 142]:
                        self.state = 1334
                        self.annotations()
                        pass
                    elif token in [118]:
                        self.state = 1335
                        self.match(KotlinParser.SUSPEND)
                        self.state = 1339
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==5:
                            self.state = 1336
                            self.match(KotlinParser.NL)
                            self.state = 1341
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 1344 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,199,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesizedTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_parenthesizedType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedType" ):
                listener.enterParenthesizedType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedType" ):
                listener.exitParenthesizedType(self)




    def parenthesizedType(self):

        localctx = KotlinParser.ParenthesizedTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_parenthesizedType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1346
            self.match(KotlinParser.LPAREN)
            self.state = 1347
            self.type_()
            self.state = 1348
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullableTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeReference(self):
            return self.getTypedRuleContext(KotlinParser.TypeReferenceContext,0)


        def parenthesizedType(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedTypeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def QUEST(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.QUEST)
            else:
                return self.getToken(KotlinParser.QUEST, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_nullableType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullableType" ):
                listener.enterNullableType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullableType" ):
                listener.exitNullableType(self)




    def nullableType(self):

        localctx = KotlinParser.NullableTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_nullableType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1352
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.state = 1350
                self.typeReference()
                pass

            elif la_ == 2:
                self.state = 1351
                self.parenthesizedType()
                pass


            self.state = 1357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1354
                self.match(KotlinParser.NL)
                self.state = 1359
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1361 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1360
                    self.match(KotlinParser.QUEST)

                else:
                    raise NoViableAltException(self)
                self.state = 1363 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,202,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def typeReference(self):
            return self.getTypedRuleContext(KotlinParser.TypeReferenceContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def DYNAMIC(self):
            return self.getToken(KotlinParser.DYNAMIC, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeReference" ):
                listener.enterTypeReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeReference" ):
                listener.exitTypeReference(self)




    def typeReference(self):

        localctx = KotlinParser.TypeReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_typeReference)
        try:
            self.state = 1371
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1365
                self.match(KotlinParser.LPAREN)
                self.state = 1366
                self.typeReference()
                self.state = 1367
                self.match(KotlinParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1369
                self.userType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1370
                self.match(KotlinParser.DYNAMIC)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameters(self):
            return self.getTypedRuleContext(KotlinParser.FunctionTypeParametersContext,0)


        def ARROW(self):
            return self.getToken(KotlinParser.ARROW, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def functionTypeReceiver(self):
            return self.getTypedRuleContext(KotlinParser.FunctionTypeReceiverContext,0)


        def DOT(self):
            return self.getToken(KotlinParser.DOT, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionType" ):
                listener.enterFunctionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionType" ):
                listener.exitFunctionType(self)




    def functionType(self):

        localctx = KotlinParser.FunctionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_functionType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1387
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.state = 1373
                self.functionTypeReceiver()
                self.state = 1377
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1374
                    self.match(KotlinParser.NL)
                    self.state = 1379
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1380
                self.match(KotlinParser.DOT)
                self.state = 1384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1381
                    self.match(KotlinParser.NL)
                    self.state = 1386
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1389
            self.functionTypeParameters()
            self.state = 1393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1390
                self.match(KotlinParser.NL)
                self.state = 1395
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1396
            self.match(KotlinParser.ARROW)

            self.state = 1400
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1397
                self.match(KotlinParser.NL)
                self.state = 1402
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1403
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeReceiverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parenthesizedType(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedTypeContext,0)


        def nullableType(self):
            return self.getTypedRuleContext(KotlinParser.NullableTypeContext,0)


        def typeReference(self):
            return self.getTypedRuleContext(KotlinParser.TypeReferenceContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_functionTypeReceiver

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeReceiver" ):
                listener.enterFunctionTypeReceiver(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeReceiver" ):
                listener.exitFunctionTypeReceiver(self)




    def functionTypeReceiver(self):

        localctx = KotlinParser.FunctionTypeReceiverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_functionTypeReceiver)
        try:
            self.state = 1408
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1405
                self.parenthesizedType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1406
                self.nullableType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1407
                self.typeReference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleUserType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.SimpleUserTypeContext)
            else:
                return self.getTypedRuleContext(KotlinParser.SimpleUserTypeContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.DOT)
            else:
                return self.getToken(KotlinParser.DOT, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_userType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserType" ):
                listener.enterUserType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserType" ):
                listener.exitUserType(self)




    def userType(self):

        localctx = KotlinParser.UserTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_userType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1410
            self.simpleUserType()
            self.state = 1427
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,212,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1414
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1411
                        self.match(KotlinParser.NL)
                        self.state = 1416
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1417
                    self.match(KotlinParser.DOT)
                    self.state = 1421
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1418
                        self.match(KotlinParser.NL)
                        self.state = 1423
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1424
                    self.simpleUserType() 
                self.state = 1429
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,212,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleUserTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(KotlinParser.TypeArgumentsContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_simpleUserType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleUserType" ):
                listener.enterSimpleUserType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleUserType" ):
                listener.exitSimpleUserType(self)




    def simpleUserType(self):

        localctx = KotlinParser.SimpleUserTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_simpleUserType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1430
            self.simpleIdentifier()
            self.state = 1438
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.state = 1434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1431
                    self.match(KotlinParser.NL)
                    self.state = 1436
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1437
                self.typeArguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ParameterContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ParameterContext,i)


        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionTypeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameters" ):
                listener.enterFunctionTypeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameters" ):
                listener.exitFunctionTypeParameters(self)




    def functionTypeParameters(self):

        localctx = KotlinParser.FunctionTypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_functionTypeParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1440
            self.match(KotlinParser.LPAREN)
            self.state = 1444
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,215,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1441
                    self.match(KotlinParser.NL) 
                self.state = 1446
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,215,self._ctx)

            self.state = 1449
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.state = 1447
                self.parameter()

            elif la_ == 2:
                self.state = 1448
                self.type_()


            self.state = 1470
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,220,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1454
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1451
                        self.match(KotlinParser.NL)
                        self.state = 1456
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1457
                    self.match(KotlinParser.COMMA)
                    self.state = 1461
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1458
                        self.match(KotlinParser.NL)
                        self.state = 1463
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1466
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
                    if la_ == 1:
                        self.state = 1464
                        self.parameter()
                        pass

                    elif la_ == 2:
                        self.state = 1465
                        self.type_()
                        pass

             
                self.state = 1472
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,220,self._ctx)

            self.state = 1480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
            if la_ == 1:
                self.state = 1476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1473
                    self.match(KotlinParser.NL)
                    self.state = 1478
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1479
                self.match(KotlinParser.COMMA)


            self.state = 1485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1482
                self.match(KotlinParser.NL)
                self.state = 1487
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1488
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeConstraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(KotlinParser.WHERE, 0)

        def typeConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeConstraintContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeConstraintContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeConstraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConstraints" ):
                listener.enterTypeConstraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConstraints" ):
                listener.exitTypeConstraints(self)




    def typeConstraints(self):

        localctx = KotlinParser.TypeConstraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_typeConstraints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1490
            self.match(KotlinParser.WHERE)
            self.state = 1494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1491
                self.match(KotlinParser.NL)
                self.state = 1496
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1497
            self.typeConstraint()
            self.state = 1514
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,227,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1501
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1498
                        self.match(KotlinParser.NL)
                        self.state = 1503
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1504
                    self.match(KotlinParser.COMMA)
                    self.state = 1508
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1505
                        self.match(KotlinParser.NL)
                        self.state = 1510
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1511
                    self.typeConstraint() 
                self.state = 1516
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,227,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConstraint" ):
                listener.enterTypeConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConstraint" ):
                listener.exitTypeConstraint(self)




    def typeConstraint(self):

        localctx = KotlinParser.TypeConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_typeConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==40 or _la==56 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 562949953422287) != 0):
                self.state = 1517
                self.annotations()
                self.state = 1522
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1523
            self.simpleIdentifier()
            self.state = 1527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1524
                self.match(KotlinParser.NL)
                self.state = 1529
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1530
            self.match(KotlinParser.COLON)
            self.state = 1534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1531
                self.match(KotlinParser.NL)
                self.state = 1536
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1537
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self):
            return self.getToken(KotlinParser.LCURL, 0)

        def statements(self):
            return self.getTypedRuleContext(KotlinParser.StatementsContext,0)


        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = KotlinParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1539
            self.match(KotlinParser.LCURL)
            self.state = 1540
            self.statements()
            self.state = 1541
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anysemi(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnysemiContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnysemiContext,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.StatementContext)
            else:
                return self.getTypedRuleContext(KotlinParser.StatementContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatements" ):
                listener.enterStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatements" ):
                listener.exitStatements(self)




    def statements(self):

        localctx = KotlinParser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_statements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1546
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,231,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1543
                    self.anysemi() 
                self.state = 1548
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,231,self._ctx)

            self.state = 1563
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
            if la_ == 1:
                self.state = 1549
                self.statement()
                self.state = 1560
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,234,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1551 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1550
                                self.anysemi()

                            else:
                                raise NoViableAltException(self)
                            self.state = 1553 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,232,self._ctx)

                        self.state = 1556
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
                        if la_ == 1:
                            self.state = 1555
                            self.statement()

                 
                    self.state = 1562
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,234,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(KotlinParser.DeclarationContext,0)


        def blockLevelExpression(self):
            return self.getTypedRuleContext(KotlinParser.BlockLevelExpressionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = KotlinParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_statement)
        try:
            self.state = 1567
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1565
                self.declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1566
                self.blockLevelExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockLevelExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_blockLevelExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockLevelExpression" ):
                listener.enterBlockLevelExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockLevelExpression" ):
                listener.exitBlockLevelExpression(self)




    def blockLevelExpression(self):

        localctx = KotlinParser.BlockLevelExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_blockLevelExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1572
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,237,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1569
                    self.annotations() 
                self.state = 1574
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,237,self._ctx)

            self.state = 1578
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,238,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1575
                    self.match(KotlinParser.NL) 
                self.state = 1580
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,238,self._ctx)

            self.state = 1581
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.ClassDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.FunctionDeclarationContext,0)


        def propertyDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.PropertyDeclarationContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(KotlinParser.TypeAliasContext,0)


        def labelDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.LabelDefinitionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.LabelDefinitionContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = KotlinParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==143:
                self.state = 1583
                self.labelDefinition()
                self.state = 1588
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1593
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                self.state = 1589
                self.classDeclaration()
                pass

            elif la_ == 2:
                self.state = 1590
                self.functionDeclaration()
                pass

            elif la_ == 3:
                self.state = 1591
                self.propertyDeclaration()
                pass

            elif la_ == 4:
                self.state = 1592
                self.typeAlias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def disjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.DisjunctionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.DisjunctionContext,i)


        def assignmentOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AssignmentOperatorContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AssignmentOperatorContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = KotlinParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1595
            self.disjunction()
            self.state = 1601
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,241,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1596
                    self.assignmentOperator()
                    self.state = 1597
                    self.disjunction() 
                self.state = 1603
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,241,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisjunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ConjunctionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ConjunctionContext,i)


        def DISJ(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.DISJ)
            else:
                return self.getToken(KotlinParser.DISJ, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_disjunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisjunction" ):
                listener.enterDisjunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisjunction" ):
                listener.exitDisjunction(self)




    def disjunction(self):

        localctx = KotlinParser.DisjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_disjunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1604
            self.conjunction()
            self.state = 1621
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,244,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1608
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1605
                        self.match(KotlinParser.NL)
                        self.state = 1610
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1611
                    self.match(KotlinParser.DISJ)
                    self.state = 1615
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,243,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1612
                            self.match(KotlinParser.NL) 
                        self.state = 1617
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,243,self._ctx)

                    self.state = 1618
                    self.conjunction() 
                self.state = 1623
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,244,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConjunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityComparison(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.EqualityComparisonContext)
            else:
                return self.getTypedRuleContext(KotlinParser.EqualityComparisonContext,i)


        def CONJ(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.CONJ)
            else:
                return self.getToken(KotlinParser.CONJ, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_conjunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConjunction" ):
                listener.enterConjunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConjunction" ):
                listener.exitConjunction(self)




    def conjunction(self):

        localctx = KotlinParser.ConjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_conjunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1624
            self.equalityComparison()
            self.state = 1641
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,247,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1628
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1625
                        self.match(KotlinParser.NL)
                        self.state = 1630
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1631
                    self.match(KotlinParser.CONJ)
                    self.state = 1635
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,246,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1632
                            self.match(KotlinParser.NL) 
                        self.state = 1637
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,246,self._ctx)

                    self.state = 1638
                    self.equalityComparison() 
                self.state = 1643
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,247,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comparison(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ComparisonContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ComparisonContext,i)


        def equalityOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.EqualityOperationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.EqualityOperationContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_equalityComparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityComparison" ):
                listener.enterEqualityComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityComparison" ):
                listener.exitEqualityComparison(self)




    def equalityComparison(self):

        localctx = KotlinParser.EqualityComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_equalityComparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1644
            self.comparison()
            self.state = 1656
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,249,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1645
                    self.equalityOperation()
                    self.state = 1649
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,248,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1646
                            self.match(KotlinParser.NL) 
                        self.state = 1651
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,248,self._ctx)

                    self.state = 1652
                    self.comparison() 
                self.state = 1658
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,249,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedInfix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.NamedInfixContext)
            else:
                return self.getTypedRuleContext(KotlinParser.NamedInfixContext,i)


        def comparisonOperator(self):
            return self.getTypedRuleContext(KotlinParser.ComparisonOperatorContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)




    def comparison(self):

        localctx = KotlinParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_comparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1659
            self.namedInfix()
            self.state = 1669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                self.state = 1660
                self.comparisonOperator()
                self.state = 1664
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,250,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1661
                        self.match(KotlinParser.NL) 
                    self.state = 1666
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,250,self._ctx)

                self.state = 1667
                self.namedInfix()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedInfixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elvisExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ElvisExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ElvisExpressionContext,i)


        def isOperator(self):
            return self.getTypedRuleContext(KotlinParser.IsOperatorContext,0)


        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def inOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.InOperatorContext)
            else:
                return self.getTypedRuleContext(KotlinParser.InOperatorContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_namedInfix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedInfix" ):
                listener.enterNamedInfix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedInfix" ):
                listener.exitNamedInfix(self)




    def namedInfix(self):

        localctx = KotlinParser.NamedInfixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_namedInfix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1671
            self.elvisExpression()
            self.state = 1694
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                self.state = 1681 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1672
                        self.inOperator()
                        self.state = 1676
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,252,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1673
                                self.match(KotlinParser.NL) 
                            self.state = 1678
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,252,self._ctx)

                        self.state = 1679
                        self.elvisExpression()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1683 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,253,self._ctx)


            elif la_ == 2:
                self.state = 1685
                self.isOperator()
                self.state = 1689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1686
                    self.match(KotlinParser.NL)
                    self.state = 1691
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1692
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElvisExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def infixFunctionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.InfixFunctionCallContext)
            else:
                return self.getTypedRuleContext(KotlinParser.InfixFunctionCallContext,i)


        def ELVIS(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.ELVIS)
            else:
                return self.getToken(KotlinParser.ELVIS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_elvisExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElvisExpression" ):
                listener.enterElvisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElvisExpression" ):
                listener.exitElvisExpression(self)




    def elvisExpression(self):

        localctx = KotlinParser.ElvisExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_elvisExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1696
            self.infixFunctionCall()
            self.state = 1713
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,258,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1700
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1697
                        self.match(KotlinParser.NL)
                        self.state = 1702
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1703
                    self.match(KotlinParser.ELVIS)
                    self.state = 1707
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,257,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1704
                            self.match(KotlinParser.NL) 
                        self.state = 1709
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,257,self._ctx)

                    self.state = 1710
                    self.infixFunctionCall() 
                self.state = 1715
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,258,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InfixFunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rangeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.RangeExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.RangeExpressionContext,i)


        def simpleIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.SimpleIdentifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_infixFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInfixFunctionCall" ):
                listener.enterInfixFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInfixFunctionCall" ):
                listener.exitInfixFunctionCall(self)




    def infixFunctionCall(self):

        localctx = KotlinParser.InfixFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_infixFunctionCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1716
            self.rangeExpression()
            self.state = 1728
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,260,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1717
                    self.simpleIdentifier()
                    self.state = 1721
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,259,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1718
                            self.match(KotlinParser.NL) 
                        self.state = 1723
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,259,self._ctx)

                    self.state = 1724
                    self.rangeExpression() 
                self.state = 1730
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,260,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AdditiveExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AdditiveExpressionContext,i)


        def RANGE(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.RANGE)
            else:
                return self.getToken(KotlinParser.RANGE, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_rangeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeExpression" ):
                listener.enterRangeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeExpression" ):
                listener.exitRangeExpression(self)




    def rangeExpression(self):

        localctx = KotlinParser.RangeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_rangeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1731
            self.additiveExpression()
            self.state = 1742
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,262,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1732
                    self.match(KotlinParser.RANGE)
                    self.state = 1736
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,261,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1733
                            self.match(KotlinParser.NL) 
                        self.state = 1738
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,261,self._ctx)

                    self.state = 1739
                    self.additiveExpression() 
                self.state = 1744
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,262,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.MultiplicativeExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.MultiplicativeExpressionContext,i)


        def additiveOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AdditiveOperatorContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AdditiveOperatorContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)




    def additiveExpression(self):

        localctx = KotlinParser.AdditiveExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_additiveExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1745
            self.multiplicativeExpression()
            self.state = 1757
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,264,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1746
                    self.additiveOperator()
                    self.state = 1750
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,263,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1747
                            self.match(KotlinParser.NL) 
                        self.state = 1752
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,263,self._ctx)

                    self.state = 1753
                    self.multiplicativeExpression() 
                self.state = 1759
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,264,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeRHS(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeRHSContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeRHSContext,i)


        def multiplicativeOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.MultiplicativeOperationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.MultiplicativeOperationContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)




    def multiplicativeExpression(self):

        localctx = KotlinParser.MultiplicativeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_multiplicativeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1760
            self.typeRHS()
            self.state = 1772
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,266,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1761
                    self.multiplicativeOperation()
                    self.state = 1765
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,265,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1762
                            self.match(KotlinParser.NL) 
                        self.state = 1767
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,265,self._ctx)

                    self.state = 1768
                    self.typeRHS() 
                self.state = 1774
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,266,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeRHSContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefixUnaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.PrefixUnaryExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.PrefixUnaryExpressionContext,i)


        def typeOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeOperationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeOperationContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeRHS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeRHS" ):
                listener.enterTypeRHS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeRHS" ):
                listener.exitTypeRHS(self)




    def typeRHS(self):

        localctx = KotlinParser.TypeRHSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_typeRHS)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1775
            self.prefixUnaryExpression()
            self.state = 1787
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,268,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1779
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1776
                        self.match(KotlinParser.NL)
                        self.state = 1781
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1782
                    self.typeOperation()
                    self.state = 1783
                    self.prefixUnaryExpression() 
                self.state = 1789
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,268,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixUnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixUnaryExpression(self):
            return self.getTypedRuleContext(KotlinParser.PostfixUnaryExpressionContext,0)


        def prefixUnaryOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.PrefixUnaryOperationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.PrefixUnaryOperationContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_prefixUnaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixUnaryExpression" ):
                listener.enterPrefixUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixUnaryExpression" ):
                listener.exitPrefixUnaryExpression(self)




    def prefixUnaryExpression(self):

        localctx = KotlinParser.PrefixUnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_prefixUnaryExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1793
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,269,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1790
                    self.prefixUnaryOperation() 
                self.state = 1795
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,269,self._ctx)

            self.state = 1796
            self.postfixUnaryExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixUnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomicExpression(self):
            return self.getTypedRuleContext(KotlinParser.AtomicExpressionContext,0)


        def callableReference(self):
            return self.getTypedRuleContext(KotlinParser.CallableReferenceContext,0)


        def postfixUnaryOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.PostfixUnaryOperationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.PostfixUnaryOperationContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_postfixUnaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixUnaryExpression" ):
                listener.enterPostfixUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixUnaryExpression" ):
                listener.exitPostfixUnaryExpression(self)




    def postfixUnaryExpression(self):

        localctx = KotlinParser.PostfixUnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_postfixUnaryExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1800
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
            if la_ == 1:
                self.state = 1798
                self.atomicExpression()
                pass

            elif la_ == 2:
                self.state = 1799
                self.callableReference()
                pass


            self.state = 1805
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,271,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1802
                    self.postfixUnaryOperation() 
                self.state = 1807
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,271,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomicExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parenthesizedExpression(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedExpressionContext,0)


        def literalConstant(self):
            return self.getTypedRuleContext(KotlinParser.LiteralConstantContext,0)


        def functionLiteral(self):
            return self.getTypedRuleContext(KotlinParser.FunctionLiteralContext,0)


        def thisExpression(self):
            return self.getTypedRuleContext(KotlinParser.ThisExpressionContext,0)


        def superExpression(self):
            return self.getTypedRuleContext(KotlinParser.SuperExpressionContext,0)


        def conditionalExpression(self):
            return self.getTypedRuleContext(KotlinParser.ConditionalExpressionContext,0)


        def tryExpression(self):
            return self.getTypedRuleContext(KotlinParser.TryExpressionContext,0)


        def objectLiteral(self):
            return self.getTypedRuleContext(KotlinParser.ObjectLiteralContext,0)


        def jumpExpression(self):
            return self.getTypedRuleContext(KotlinParser.JumpExpressionContext,0)


        def loopExpression(self):
            return self.getTypedRuleContext(KotlinParser.LoopExpressionContext,0)


        def collectionLiteral(self):
            return self.getTypedRuleContext(KotlinParser.CollectionLiteralContext,0)


        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def VAL(self):
            return self.getToken(KotlinParser.VAL, 0)

        def identifier(self):
            return self.getTypedRuleContext(KotlinParser.IdentifierContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_atomicExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicExpression" ):
                listener.enterAtomicExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicExpression" ):
                listener.exitAtomicExpression(self)




    def atomicExpression(self):

        localctx = KotlinParser.AtomicExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_atomicExpression)
        try:
            self.state = 1822
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1808
                self.parenthesizedExpression()
                pass
            elif token in [129, 130, 131, 134, 135, 136, 137, 138, 139, 145]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1809
                self.literalConstant()
                pass
            elif token in [13, 40, 56, 93, 94, 95, 96, 99, 100, 101, 102, 142]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1810
                self.functionLiteral()
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1811
                self.thisExpression()
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1812
                self.superExpression()
                pass
            elif token in [74, 76]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1813
                self.conditionalExpression()
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1814
                self.tryExpression()
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1815
                self.objectLiteral()
                pass
            elif token in [53, 54, 55, 83, 84, 85, 86]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1816
                self.jumpExpression()
                pass
            elif token in [80, 81, 82]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1817
                self.loopExpression()
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1818
                self.collectionLiteral()
                pass
            elif token in [58, 66, 67, 68, 69, 73, 78, 79, 92, 97, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 140]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1819
                self.simpleIdentifier()
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1820
                self.match(KotlinParser.VAL)
                self.state = 1821
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_parenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)




    def parenthesizedExpression(self):

        localctx = KotlinParser.ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_parenthesizedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1824
            self.match(KotlinParser.LPAREN)
            self.state = 1825
            self.expression()
            self.state = 1826
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeArguments(self):
            return self.getTypedRuleContext(KotlinParser.TypeArgumentsContext,0)


        def valueArguments(self):
            return self.getTypedRuleContext(KotlinParser.ValueArgumentsContext,0)


        def annotatedLambda(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotatedLambdaContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotatedLambdaContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_callSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallSuffix" ):
                listener.enterCallSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallSuffix" ):
                listener.exitCallSuffix(self)




    def callSuffix(self):

        localctx = KotlinParser.CallSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_callSuffix)
        try:
            self.state = 1850
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [43]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1828
                self.typeArguments()
                self.state = 1830
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
                if la_ == 1:
                    self.state = 1829
                    self.valueArguments()


                self.state = 1835
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,274,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1832
                        self.annotatedLambda() 
                    self.state = 1837
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,274,self._ctx)

                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1838
                self.valueArguments()
                self.state = 1842
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,275,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1839
                        self.annotatedLambda() 
                    self.state = 1844
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,275,self._ctx)

                pass
            elif token in [5, 13, 40, 56, 58, 66, 67, 68, 69, 73, 78, 79, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 140, 142, 143]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1846 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1845
                        self.annotatedLambda()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1848 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,276,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotatedLambdaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionLiteral(self):
            return self.getTypedRuleContext(KotlinParser.FunctionLiteralContext,0)


        def unescapedAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.UnescapedAnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.UnescapedAnnotationContext,i)


        def LabelDefinition(self):
            return self.getToken(KotlinParser.LabelDefinition, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_annotatedLambda

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotatedLambda" ):
                listener.enterAnnotatedLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotatedLambda" ):
                listener.exitAnnotatedLambda(self)




    def annotatedLambda(self):

        localctx = KotlinParser.AnnotatedLambdaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_annotatedLambda)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & -33517921595647) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & 262271) != 0):
                self.state = 1852
                self.unescapedAnnotation()
                self.state = 1857
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 1858
                self.match(KotlinParser.LabelDefinition)


            self.state = 1864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1861
                self.match(KotlinParser.NL)
                self.state = 1866
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1867
            self.functionLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayAccessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(KotlinParser.LSQUARE, 0)

        def RSQUARE(self):
            return self.getToken(KotlinParser.RSQUARE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_arrayAccess

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayAccess" ):
                listener.enterArrayAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayAccess" ):
                listener.exitArrayAccess(self)




    def arrayAccess(self):

        localctx = KotlinParser.ArrayAccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_arrayAccess)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1869
            self.match(KotlinParser.LSQUARE)
            self.state = 1878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4188346347763783136) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -65012289) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 47091) != 0):
                self.state = 1870
                self.expression()
                self.state = 1875
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==8:
                    self.state = 1871
                    self.match(KotlinParser.COMMA)
                    self.state = 1872
                    self.expression()
                    self.state = 1877
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1880
            self.match(KotlinParser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def valueArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ValueArgumentContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ValueArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_valueArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueArguments" ):
                listener.enterValueArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueArguments" ):
                listener.exitValueArguments(self)




    def valueArguments(self):

        localctx = KotlinParser.ValueArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_valueArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1882
            self.match(KotlinParser.LPAREN)
            self.state = 1900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4188346347763750368) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -65012289) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 47091) != 0):
                self.state = 1883
                self.valueArgument()
                self.state = 1888
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,283,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1884
                        self.match(KotlinParser.COMMA)
                        self.state = 1885
                        self.valueArgument() 
                    self.state = 1890
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,283,self._ctx)

                self.state = 1898
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==5 or _la==8:
                    self.state = 1894
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1891
                        self.match(KotlinParser.NL)
                        self.state = 1896
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1897
                    self.match(KotlinParser.COMMA)




            self.state = 1902
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGLE(self):
            return self.getToken(KotlinParser.LANGLE, 0)

        def typeProjection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeProjectionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeProjectionContext,i)


        def RANGLE(self):
            return self.getToken(KotlinParser.RANGLE, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def QUEST(self):
            return self.getToken(KotlinParser.QUEST, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArguments" ):
                listener.enterTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArguments" ):
                listener.exitTypeArguments(self)




    def typeArguments(self):

        localctx = KotlinParser.TypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_typeArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1904
            self.match(KotlinParser.LANGLE)
            self.state = 1908
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1905
                self.match(KotlinParser.NL)
                self.state = 1910
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1911
            self.typeProjection()
            self.state = 1922
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,289,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1915
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1912
                        self.match(KotlinParser.NL)
                        self.state = 1917
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1918
                    self.match(KotlinParser.COMMA)
                    self.state = 1919
                    self.typeProjection() 
                self.state = 1924
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,289,self._ctx)

            self.state = 1932
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
            if la_ == 1:
                self.state = 1928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1925
                    self.match(KotlinParser.NL)
                    self.state = 1930
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1931
                self.match(KotlinParser.COMMA)


            self.state = 1937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1934
                self.match(KotlinParser.NL)
                self.state = 1939
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1940
            self.match(KotlinParser.RANGLE)
            self.state = 1942
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
            if la_ == 1:
                self.state = 1941
                self.match(KotlinParser.QUEST)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeProjectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def typeProjectionModifierList(self):
            return self.getTypedRuleContext(KotlinParser.TypeProjectionModifierListContext,0)


        def MULT(self):
            return self.getToken(KotlinParser.MULT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeProjection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeProjection" ):
                listener.enterTypeProjection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeProjection" ):
                listener.exitTypeProjection(self)




    def typeProjection(self):

        localctx = KotlinParser.TypeProjectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_typeProjection)
        try:
            self.state = 1949
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 40, 56, 58, 66, 67, 68, 69, 73, 78, 79, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 140, 142]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1945
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
                if la_ == 1:
                    self.state = 1944
                    self.typeProjectionModifierList()


                self.state = 1947
                self.type_()
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1948
                self.match(KotlinParser.MULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeProjectionModifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varianceAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.VarianceAnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.VarianceAnnotationContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_typeProjectionModifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeProjectionModifierList" ):
                listener.enterTypeProjectionModifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeProjectionModifierList" ):
                listener.exitTypeProjectionModifierList(self)




    def typeProjectionModifierList(self):

        localctx = KotlinParser.TypeProjectionModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_typeProjectionModifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1952 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1951
                    self.varianceAnnotation()

                else:
                    raise NoViableAltException(self)
                self.state = 1954 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,296,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def MULT(self):
            return self.getToken(KotlinParser.MULT, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_valueArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueArgument" ):
                listener.enterValueArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueArgument" ):
                listener.exitValueArgument(self)




    def valueArgument(self):

        localctx = KotlinParser.ValueArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_valueArgument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1970
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
            if la_ == 1:
                self.state = 1956
                self.simpleIdentifier()
                self.state = 1960
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 1957
                    self.match(KotlinParser.NL)
                    self.state = 1962
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1963
                self.match(KotlinParser.ASSIGNMENT)
                self.state = 1967
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,298,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1964
                        self.match(KotlinParser.NL) 
                    self.state = 1969
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,298,self._ctx)



            self.state = 1973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 1972
                self.match(KotlinParser.MULT)


            self.state = 1978
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,301,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1975
                    self.match(KotlinParser.NL) 
                self.state = 1980
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,301,self._ctx)

            self.state = 1981
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BooleanLiteral(self):
            return self.getToken(KotlinParser.BooleanLiteral, 0)

        def IntegerLiteral(self):
            return self.getToken(KotlinParser.IntegerLiteral, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(KotlinParser.StringLiteralContext,0)


        def HexLiteral(self):
            return self.getToken(KotlinParser.HexLiteral, 0)

        def BinLiteral(self):
            return self.getToken(KotlinParser.BinLiteral, 0)

        def CharacterLiteral(self):
            return self.getToken(KotlinParser.CharacterLiteral, 0)

        def RealLiteral(self):
            return self.getToken(KotlinParser.RealLiteral, 0)

        def NullLiteral(self):
            return self.getToken(KotlinParser.NullLiteral, 0)

        def LongLiteral(self):
            return self.getToken(KotlinParser.LongLiteral, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_literalConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralConstant" ):
                listener.enterLiteralConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralConstant" ):
                listener.exitLiteralConstant(self)




    def literalConstant(self):

        localctx = KotlinParser.LiteralConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_literalConstant)
        try:
            self.state = 1992
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [138]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1983
                self.match(KotlinParser.BooleanLiteral)
                pass
            elif token in [135]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1984
                self.match(KotlinParser.IntegerLiteral)
                pass
            elif token in [129, 130]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1985
                self.stringLiteral()
                pass
            elif token in [136]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1986
                self.match(KotlinParser.HexLiteral)
                pass
            elif token in [137]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1987
                self.match(KotlinParser.BinLiteral)
                pass
            elif token in [145]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1988
                self.match(KotlinParser.CharacterLiteral)
                pass
            elif token in [131]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1989
                self.match(KotlinParser.RealLiteral)
                pass
            elif token in [139]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1990
                self.match(KotlinParser.NullLiteral)
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1991
                self.match(KotlinParser.LongLiteral)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lineStringLiteral(self):
            return self.getTypedRuleContext(KotlinParser.LineStringLiteralContext,0)


        def multiLineStringLiteral(self):
            return self.getTypedRuleContext(KotlinParser.MultiLineStringLiteralContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)




    def stringLiteral(self):

        localctx = KotlinParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_stringLiteral)
        try:
            self.state = 1996
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1994
                self.lineStringLiteral()
                pass
            elif token in [130]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1995
                self.multiLineStringLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTE_OPEN(self):
            return self.getToken(KotlinParser.QUOTE_OPEN, 0)

        def QUOTE_CLOSE(self):
            return self.getToken(KotlinParser.QUOTE_CLOSE, 0)

        def lineStringContent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.LineStringContentContext)
            else:
                return self.getTypedRuleContext(KotlinParser.LineStringContentContext,i)


        def lineStringExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.LineStringExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.LineStringExpressionContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_lineStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineStringLiteral" ):
                listener.enterLineStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineStringLiteral" ):
                listener.exitLineStringLiteral(self)




    def lineStringLiteral(self):

        localctx = KotlinParser.LineStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_lineStringLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1998
            self.match(KotlinParser.QUOTE_OPEN)
            self.state = 2003
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 157)) & ~0x3f) == 0 and ((1 << (_la - 157)) & 15) != 0):
                self.state = 2001
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [157, 158, 159]:
                    self.state = 1999
                    self.lineStringContent()
                    pass
                elif token in [160]:
                    self.state = 2000
                    self.lineStringExpression()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2005
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2006
            self.match(KotlinParser.QUOTE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiLineStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRIPLE_QUOTE_OPEN(self):
            return self.getToken(KotlinParser.TRIPLE_QUOTE_OPEN, 0)

        def TRIPLE_QUOTE_CLOSE(self):
            return self.getToken(KotlinParser.TRIPLE_QUOTE_CLOSE, 0)

        def multiLineStringContent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.MultiLineStringContentContext)
            else:
                return self.getTypedRuleContext(KotlinParser.MultiLineStringContentContext,i)


        def multiLineStringExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.MultiLineStringExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.MultiLineStringExpressionContext,i)


        def lineStringLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.LineStringLiteralContext)
            else:
                return self.getTypedRuleContext(KotlinParser.LineStringLiteralContext,i)


        def MultiLineStringQuote(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.MultiLineStringQuote)
            else:
                return self.getToken(KotlinParser.MultiLineStringQuote, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiLineStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiLineStringLiteral" ):
                listener.enterMultiLineStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiLineStringLiteral" ):
                listener.exitMultiLineStringLiteral(self)




    def multiLineStringLiteral(self):

        localctx = KotlinParser.MultiLineStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_multiLineStringLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2008
            self.match(KotlinParser.TRIPLE_QUOTE_OPEN)
            self.state = 2015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 266287972353) != 0):
                self.state = 2013
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [163, 164, 165]:
                    self.state = 2009
                    self.multiLineStringContent()
                    pass
                elif token in [166]:
                    self.state = 2010
                    self.multiLineStringExpression()
                    pass
                elif token in [129]:
                    self.state = 2011
                    self.lineStringLiteral()
                    pass
                elif token in [162]:
                    self.state = 2012
                    self.match(KotlinParser.MultiLineStringQuote)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2017
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2018
            self.match(KotlinParser.TRIPLE_QUOTE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineStringContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LineStrText(self):
            return self.getToken(KotlinParser.LineStrText, 0)

        def LineStrEscapedChar(self):
            return self.getToken(KotlinParser.LineStrEscapedChar, 0)

        def LineStrRef(self):
            return self.getToken(KotlinParser.LineStrRef, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_lineStringContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineStringContent" ):
                listener.enterLineStringContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineStringContent" ):
                listener.exitLineStringContent(self)




    def lineStringContent(self):

        localctx = KotlinParser.LineStringContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_lineStringContent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2020
            _la = self._input.LA(1)
            if not(((((_la - 157)) & ~0x3f) == 0 and ((1 << (_la - 157)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineStringExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LineStrExprStart(self):
            return self.getToken(KotlinParser.LineStrExprStart, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_lineStringExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineStringExpression" ):
                listener.enterLineStringExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineStringExpression" ):
                listener.exitLineStringExpression(self)




    def lineStringExpression(self):

        localctx = KotlinParser.LineStringExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_lineStringExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2022
            self.match(KotlinParser.LineStrExprStart)
            self.state = 2023
            self.expression()
            self.state = 2024
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiLineStringContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MultiLineStrText(self):
            return self.getToken(KotlinParser.MultiLineStrText, 0)

        def MultiLineStrEscapedChar(self):
            return self.getToken(KotlinParser.MultiLineStrEscapedChar, 0)

        def MultiLineStrRef(self):
            return self.getToken(KotlinParser.MultiLineStrRef, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiLineStringContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiLineStringContent" ):
                listener.enterMultiLineStringContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiLineStringContent" ):
                listener.exitMultiLineStringContent(self)




    def multiLineStringContent(self):

        localctx = KotlinParser.MultiLineStringContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_multiLineStringContent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2026
            _la = self._input.LA(1)
            if not(((((_la - 163)) & ~0x3f) == 0 and ((1 << (_la - 163)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiLineStringExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MultiLineStrExprStart(self):
            return self.getToken(KotlinParser.MultiLineStrExprStart, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiLineStringExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiLineStringExpression" ):
                listener.enterMultiLineStringExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiLineStringExpression" ):
                listener.exitMultiLineStringExpression(self)




    def multiLineStringExpression(self):

        localctx = KotlinParser.MultiLineStringExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_multiLineStringExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2028
            self.match(KotlinParser.MultiLineStrExprStart)
            self.state = 2029
            self.expression()
            self.state = 2030
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self):
            return self.getToken(KotlinParser.LCURL, 0)

        def statements(self):
            return self.getTypedRuleContext(KotlinParser.StatementsContext,0)


        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def lambdaParameters(self):
            return self.getTypedRuleContext(KotlinParser.LambdaParametersContext,0)


        def ARROW(self):
            return self.getToken(KotlinParser.ARROW, 0)

        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionLiteral" ):
                listener.enterFunctionLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionLiteral" ):
                listener.exitFunctionLiteral(self)




    def functionLiteral(self):

        localctx = KotlinParser.FunctionLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_functionLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2035
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==40 or _la==56 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 562949953422287) != 0):
                self.state = 2032
                self.annotations()
                self.state = 2037
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2084
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,315,self._ctx)
            if la_ == 1:
                self.state = 2038
                self.match(KotlinParser.LCURL)
                self.state = 2042
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,309,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2039
                        self.match(KotlinParser.NL) 
                    self.state = 2044
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,309,self._ctx)

                self.state = 2045
                self.statements()
                self.state = 2049
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2046
                    self.match(KotlinParser.NL)
                    self.state = 2051
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2052
                self.match(KotlinParser.RCURL)
                pass

            elif la_ == 2:
                self.state = 2054
                self.match(KotlinParser.LCURL)
                self.state = 2058
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,311,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2055
                        self.match(KotlinParser.NL) 
                    self.state = 2060
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,311,self._ctx)

                self.state = 2061
                self.lambdaParameters()
                self.state = 2065
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2062
                    self.match(KotlinParser.NL)
                    self.state = 2067
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2068
                self.match(KotlinParser.ARROW)
                self.state = 2072
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,313,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2069
                        self.match(KotlinParser.NL) 
                    self.state = 2074
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,313,self._ctx)

                self.state = 2075
                self.statements()
                self.state = 2079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2076
                    self.match(KotlinParser.NL)
                    self.state = 2081
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2082
                self.match(KotlinParser.RCURL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.LambdaParameterContext)
            else:
                return self.getTypedRuleContext(KotlinParser.LambdaParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_lambdaParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaParameters" ):
                listener.enterLambdaParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaParameters" ):
                listener.exitLambdaParameters(self)




    def lambdaParameters(self):

        localctx = KotlinParser.LambdaParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_lambdaParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2087
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9 or _la==140 or _la==141:
                self.state = 2086
                self.lambdaParameter()


            self.state = 2105
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,319,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2092
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 2089
                        self.match(KotlinParser.NL)
                        self.state = 2094
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2095
                    self.match(KotlinParser.COMMA)
                    self.state = 2099
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 2096
                        self.match(KotlinParser.NL)
                        self.state = 2101
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2102
                    self.lambdaParameter() 
                self.state = 2107
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,319,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.VariableDeclarationContext,0)


        def multiVariableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.MultiVariableDeclarationContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_lambdaParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaParameter" ):
                listener.enterLambdaParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaParameter" ):
                listener.exitLambdaParameter(self)




    def lambdaParameter(self):

        localctx = KotlinParser.LambdaParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_lambdaParameter)
        self._la = 0 # Token type
        try:
            self.state = 2126
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [140, 141]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2108
                self.variableDeclaration()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2109
                self.multiVariableDeclaration()
                self.state = 2124
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,322,self._ctx)
                if la_ == 1:
                    self.state = 2113
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 2110
                        self.match(KotlinParser.NL)
                        self.state = 2115
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2116
                    self.match(KotlinParser.COLON)
                    self.state = 2120
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 2117
                        self.match(KotlinParser.NL)
                        self.state = 2122
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2123
                    self.type_()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT(self):
            return self.getToken(KotlinParser.OBJECT, 0)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def delegationSpecifiers(self):
            return self.getTypedRuleContext(KotlinParser.DelegationSpecifiersContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def classBody(self):
            return self.getTypedRuleContext(KotlinParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_objectLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectLiteral" ):
                listener.enterObjectLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectLiteral" ):
                listener.exitObjectLiteral(self)




    def objectLiteral(self):

        localctx = KotlinParser.ObjectLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_objectLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2128
            self.match(KotlinParser.OBJECT)
            self.state = 2143
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
            if la_ == 1:
                self.state = 2132
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2129
                    self.match(KotlinParser.NL)
                    self.state = 2134
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2135
                self.match(KotlinParser.COLON)
                self.state = 2139
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2136
                    self.match(KotlinParser.NL)
                    self.state = 2141
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2142
                self.delegationSpecifiers()


            self.state = 2148
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,327,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2145
                    self.match(KotlinParser.NL) 
                self.state = 2150
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,327,self._ctx)

            self.state = 2152
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
            if la_ == 1:
                self.state = 2151
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollectionLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(KotlinParser.LSQUARE, 0)

        def RSQUARE(self):
            return self.getToken(KotlinParser.RSQUARE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_collectionLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionLiteral" ):
                listener.enterCollectionLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionLiteral" ):
                listener.exitCollectionLiteral(self)




    def collectionLiteral(self):

        localctx = KotlinParser.CollectionLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_collectionLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2154
            self.match(KotlinParser.LSQUARE)
            self.state = 2156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4188346347763783136) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -65012289) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 47091) != 0):
                self.state = 2155
                self.expression()


            self.state = 2162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==8:
                self.state = 2158
                self.match(KotlinParser.COMMA)
                self.state = 2159
                self.expression()
                self.state = 2164
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2165
            self.match(KotlinParser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThisExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THIS(self):
            return self.getToken(KotlinParser.THIS, 0)

        def LabelReference(self):
            return self.getToken(KotlinParser.LabelReference, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_thisExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThisExpression" ):
                listener.enterThisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThisExpression" ):
                listener.exitThisExpression(self)




    def thisExpression(self):

        localctx = KotlinParser.ThisExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_thisExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2167
            self.match(KotlinParser.THIS)
            self.state = 2169
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
            if la_ == 1:
                self.state = 2168
                self.match(KotlinParser.LabelReference)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuperExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUPER(self):
            return self.getToken(KotlinParser.SUPER, 0)

        def LANGLE(self):
            return self.getToken(KotlinParser.LANGLE, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def RANGLE(self):
            return self.getToken(KotlinParser.RANGLE, 0)

        def LabelReference(self):
            return self.getToken(KotlinParser.LabelReference, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_superExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperExpression" ):
                listener.enterSuperExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperExpression" ):
                listener.exitSuperExpression(self)




    def superExpression(self):

        localctx = KotlinParser.SuperExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_superExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2171
            self.match(KotlinParser.SUPER)
            self.state = 2188
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
            if la_ == 1:
                self.state = 2172
                self.match(KotlinParser.LANGLE)
                self.state = 2176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2173
                    self.match(KotlinParser.NL)
                    self.state = 2178
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2179
                self.type_()
                self.state = 2183
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2180
                    self.match(KotlinParser.NL)
                    self.state = 2185
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2186
                self.match(KotlinParser.RANGLE)


            self.state = 2191
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
            if la_ == 1:
                self.state = 2190
                self.match(KotlinParser.LabelReference)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifExpression(self):
            return self.getTypedRuleContext(KotlinParser.IfExpressionContext,0)


        def whenExpression(self):
            return self.getTypedRuleContext(KotlinParser.WhenExpressionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_conditionalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExpression" ):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExpression" ):
                listener.exitConditionalExpression(self)




    def conditionalExpression(self):

        localctx = KotlinParser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_conditionalExpression)
        try:
            self.state = 2195
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [74]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2193
                self.ifExpression()
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2194
                self.whenExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(KotlinParser.IF, 0)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def controlStructureBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ControlStructureBodyContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ControlStructureBodyContext,i)


        def SEMICOLON(self):
            return self.getToken(KotlinParser.SEMICOLON, 0)

        def ELSE(self):
            return self.getToken(KotlinParser.ELSE, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_ifExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExpression" ):
                listener.enterIfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExpression" ):
                listener.exitIfExpression(self)




    def ifExpression(self):

        localctx = KotlinParser.IfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_ifExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2197
            self.match(KotlinParser.IF)
            self.state = 2201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2198
                self.match(KotlinParser.NL)
                self.state = 2203
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2204
            self.match(KotlinParser.LPAREN)
            self.state = 2205
            self.expression()
            self.state = 2206
            self.match(KotlinParser.RPAREN)
            self.state = 2210
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,338,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2207
                    self.match(KotlinParser.NL) 
                self.state = 2212
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,338,self._ctx)

            self.state = 2214
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,339,self._ctx)
            if la_ == 1:
                self.state = 2213
                self.controlStructureBody()


            self.state = 2217
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
            if la_ == 1:
                self.state = 2216
                self.match(KotlinParser.SEMICOLON)


            self.state = 2235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,344,self._ctx)
            if la_ == 1:
                self.state = 2222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2219
                    self.match(KotlinParser.NL)
                    self.state = 2224
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2225
                self.match(KotlinParser.ELSE)
                self.state = 2229
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,342,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2226
                        self.match(KotlinParser.NL) 
                    self.state = 2231
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,342,self._ctx)

                self.state = 2233
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,343,self._ctx)
                if la_ == 1:
                    self.state = 2232
                    self.controlStructureBody()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControlStructureBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_controlStructureBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlStructureBody" ):
                listener.enterControlStructureBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlStructureBody" ):
                listener.exitControlStructureBody(self)




    def controlStructureBody(self):

        localctx = KotlinParser.ControlStructureBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_controlStructureBody)
        try:
            self.state = 2239
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2237
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2238
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(KotlinParser.WHEN, 0)

        def LCURL(self):
            return self.getToken(KotlinParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def whenEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.WhenEntryContext)
            else:
                return self.getTypedRuleContext(KotlinParser.WhenEntryContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_whenExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenExpression" ):
                listener.enterWhenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenExpression" ):
                listener.exitWhenExpression(self)




    def whenExpression(self):

        localctx = KotlinParser.WhenExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_whenExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2241
            self.match(KotlinParser.WHEN)
            self.state = 2245
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,346,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2242
                    self.match(KotlinParser.NL) 
                self.state = 2247
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,346,self._ctx)

            self.state = 2252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 2248
                self.match(KotlinParser.LPAREN)
                self.state = 2249
                self.expression()
                self.state = 2250
                self.match(KotlinParser.RPAREN)


            self.state = 2257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2254
                self.match(KotlinParser.NL)
                self.state = 2259
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2260
            self.match(KotlinParser.LCURL)
            self.state = 2264
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,349,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2261
                    self.match(KotlinParser.NL) 
                self.state = 2266
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,349,self._ctx)

            self.state = 2276
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,351,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2267
                    self.whenEntry()
                    self.state = 2271
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,350,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2268
                            self.match(KotlinParser.NL) 
                        self.state = 2273
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,350,self._ctx)
             
                self.state = 2278
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,351,self._ctx)

            self.state = 2282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2279
                self.match(KotlinParser.NL)
                self.state = 2284
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2285
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenEntryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whenCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.WhenConditionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.WhenConditionContext,i)


        def ARROW(self):
            return self.getToken(KotlinParser.ARROW, 0)

        def controlStructureBody(self):
            return self.getTypedRuleContext(KotlinParser.ControlStructureBodyContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def semi(self):
            return self.getTypedRuleContext(KotlinParser.SemiContext,0)


        def ELSE(self):
            return self.getToken(KotlinParser.ELSE, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_whenEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenEntry" ):
                listener.enterWhenEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenEntry" ):
                listener.exitWhenEntry(self)




    def whenEntry(self):

        localctx = KotlinParser.WhenEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_whenEntry)
        self._la = 0 # Token type
        try:
            self.state = 2339
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 9, 11, 13, 18, 19, 20, 21, 24, 36, 37, 40, 53, 54, 55, 56, 58, 62, 63, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2287
                self.whenCondition()
                self.state = 2304
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,355,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2291
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==5:
                            self.state = 2288
                            self.match(KotlinParser.NL)
                            self.state = 2293
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2294
                        self.match(KotlinParser.COMMA)
                        self.state = 2298
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,354,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 2295
                                self.match(KotlinParser.NL) 
                            self.state = 2300
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,354,self._ctx)

                        self.state = 2301
                        self.whenCondition() 
                    self.state = 2306
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,355,self._ctx)

                self.state = 2310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2307
                    self.match(KotlinParser.NL)
                    self.state = 2312
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2313
                self.match(KotlinParser.ARROW)
                self.state = 2317
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,357,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2314
                        self.match(KotlinParser.NL) 
                    self.state = 2319
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,357,self._ctx)

                self.state = 2320
                self.controlStructureBody()
                self.state = 2322
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,358,self._ctx)
                if la_ == 1:
                    self.state = 2321
                    self.semi()


                pass
            elif token in [75]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2324
                self.match(KotlinParser.ELSE)
                self.state = 2328
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2325
                    self.match(KotlinParser.NL)
                    self.state = 2330
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2331
                self.match(KotlinParser.ARROW)
                self.state = 2335
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,360,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2332
                        self.match(KotlinParser.NL) 
                    self.state = 2337
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,360,self._ctx)

                self.state = 2338
                self.controlStructureBody()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def rangeTest(self):
            return self.getTypedRuleContext(KotlinParser.RangeTestContext,0)


        def typeTest(self):
            return self.getTypedRuleContext(KotlinParser.TypeTestContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_whenCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenCondition" ):
                listener.enterWhenCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenCondition" ):
                listener.exitWhenCondition(self)




    def whenCondition(self):

        localctx = KotlinParser.WhenConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_whenCondition)
        try:
            self.state = 2344
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 9, 11, 13, 18, 19, 20, 21, 24, 36, 37, 40, 53, 54, 55, 56, 58, 62, 63, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2341
                self.expression()
                pass
            elif token in [89, 91]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2342
                self.rangeTest()
                pass
            elif token in [88, 90]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2343
                self.typeTest()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeTestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inOperator(self):
            return self.getTypedRuleContext(KotlinParser.InOperatorContext,0)


        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_rangeTest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeTest" ):
                listener.enterRangeTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeTest" ):
                listener.exitRangeTest(self)




    def rangeTest(self):

        localctx = KotlinParser.RangeTestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_rangeTest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2346
            self.inOperator()
            self.state = 2350
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,363,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2347
                    self.match(KotlinParser.NL) 
                self.state = 2352
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,363,self._ctx)

            self.state = 2353
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeTestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def isOperator(self):
            return self.getTypedRuleContext(KotlinParser.IsOperatorContext,0)


        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeTest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeTest" ):
                listener.enterTypeTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeTest" ):
                listener.exitTypeTest(self)




    def typeTest(self):

        localctx = KotlinParser.TypeTestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_typeTest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2355
            self.isOperator()
            self.state = 2359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2356
                self.match(KotlinParser.NL)
                self.state = 2361
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2362
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(KotlinParser.TRY, 0)

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def catchBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.CatchBlockContext)
            else:
                return self.getTypedRuleContext(KotlinParser.CatchBlockContext,i)


        def finallyBlock(self):
            return self.getTypedRuleContext(KotlinParser.FinallyBlockContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_tryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryExpression" ):
                listener.enterTryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryExpression" ):
                listener.exitTryExpression(self)




    def tryExpression(self):

        localctx = KotlinParser.TryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_tryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2364
            self.match(KotlinParser.TRY)
            self.state = 2368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2365
                self.match(KotlinParser.NL)
                self.state = 2370
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2371
            self.block()
            self.state = 2381
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,367,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2375
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 2372
                        self.match(KotlinParser.NL)
                        self.state = 2377
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2378
                    self.catchBlock() 
                self.state = 2383
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,367,self._ctx)

            self.state = 2391
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,369,self._ctx)
            if la_ == 1:
                self.state = 2387
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2384
                    self.match(KotlinParser.NL)
                    self.state = 2389
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2390
                self.finallyBlock()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(KotlinParser.CATCH, 0)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_catchBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchBlock" ):
                listener.enterCatchBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchBlock" ):
                listener.exitCatchBlock(self)




    def catchBlock(self):

        localctx = KotlinParser.CatchBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_catchBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2393
            self.match(KotlinParser.CATCH)
            self.state = 2397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2394
                self.match(KotlinParser.NL)
                self.state = 2399
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2400
            self.match(KotlinParser.LPAREN)
            self.state = 2404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==40 or _la==56 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 562949953422287) != 0):
                self.state = 2401
                self.annotations()
                self.state = 2406
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2407
            self.simpleIdentifier()
            self.state = 2408
            self.match(KotlinParser.COLON)
            self.state = 2409
            self.userType()
            self.state = 2410
            self.match(KotlinParser.RPAREN)
            self.state = 2414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2411
                self.match(KotlinParser.NL)
                self.state = 2416
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2417
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FinallyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(KotlinParser.FINALLY, 0)

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_finallyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyBlock" ):
                listener.enterFinallyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyBlock" ):
                listener.exitFinallyBlock(self)




    def finallyBlock(self):

        localctx = KotlinParser.FinallyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_finallyBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2419
            self.match(KotlinParser.FINALLY)
            self.state = 2423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2420
                self.match(KotlinParser.NL)
                self.state = 2425
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2426
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forExpression(self):
            return self.getTypedRuleContext(KotlinParser.ForExpressionContext,0)


        def whileExpression(self):
            return self.getTypedRuleContext(KotlinParser.WhileExpressionContext,0)


        def doWhileExpression(self):
            return self.getTypedRuleContext(KotlinParser.DoWhileExpressionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_loopExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopExpression" ):
                listener.enterLoopExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopExpression" ):
                listener.exitLoopExpression(self)




    def loopExpression(self):

        localctx = KotlinParser.LoopExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_loopExpression)
        try:
            self.state = 2431
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [80]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2428
                self.forExpression()
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2429
                self.whileExpression()
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2430
                self.doWhileExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(KotlinParser.FOR, 0)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def IN(self):
            return self.getToken(KotlinParser.IN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def variableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.VariableDeclarationContext,0)


        def multiVariableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.MultiVariableDeclarationContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def controlStructureBody(self):
            return self.getTypedRuleContext(KotlinParser.ControlStructureBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_forExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForExpression" ):
                listener.enterForExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForExpression" ):
                listener.exitForExpression(self)




    def forExpression(self):

        localctx = KotlinParser.ForExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_forExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2433
            self.match(KotlinParser.FOR)
            self.state = 2437
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2434
                self.match(KotlinParser.NL)
                self.state = 2439
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2440
            self.match(KotlinParser.LPAREN)
            self.state = 2444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==40 or _la==56 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 562949953422287) != 0):
                self.state = 2441
                self.annotations()
                self.state = 2446
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2449
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [140, 141]:
                self.state = 2447
                self.variableDeclaration()
                pass
            elif token in [9]:
                self.state = 2448
                self.multiVariableDeclaration()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2451
            self.match(KotlinParser.IN)
            self.state = 2452
            self.expression()
            self.state = 2453
            self.match(KotlinParser.RPAREN)
            self.state = 2457
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,378,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2454
                    self.match(KotlinParser.NL) 
                self.state = 2459
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,378,self._ctx)

            self.state = 2461
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,379,self._ctx)
            if la_ == 1:
                self.state = 2460
                self.controlStructureBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(KotlinParser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def controlStructureBody(self):
            return self.getTypedRuleContext(KotlinParser.ControlStructureBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_whileExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileExpression" ):
                listener.enterWhileExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileExpression" ):
                listener.exitWhileExpression(self)




    def whileExpression(self):

        localctx = KotlinParser.WhileExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_whileExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2463
            self.match(KotlinParser.WHILE)
            self.state = 2467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2464
                self.match(KotlinParser.NL)
                self.state = 2469
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2470
            self.match(KotlinParser.LPAREN)
            self.state = 2471
            self.expression()
            self.state = 2472
            self.match(KotlinParser.RPAREN)
            self.state = 2476
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,381,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2473
                    self.match(KotlinParser.NL) 
                self.state = 2478
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,381,self._ctx)

            self.state = 2480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,382,self._ctx)
            if la_ == 1:
                self.state = 2479
                self.controlStructureBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoWhileExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(KotlinParser.DO, 0)

        def WHILE(self):
            return self.getToken(KotlinParser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def controlStructureBody(self):
            return self.getTypedRuleContext(KotlinParser.ControlStructureBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_doWhileExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileExpression" ):
                listener.enterDoWhileExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileExpression" ):
                listener.exitDoWhileExpression(self)




    def doWhileExpression(self):

        localctx = KotlinParser.DoWhileExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_doWhileExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2482
            self.match(KotlinParser.DO)
            self.state = 2486
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,383,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2483
                    self.match(KotlinParser.NL) 
                self.state = 2488
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,383,self._ctx)

            self.state = 2490
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,384,self._ctx)
            if la_ == 1:
                self.state = 2489
                self.controlStructureBody()


            self.state = 2495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2492
                self.match(KotlinParser.NL)
                self.state = 2497
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2498
            self.match(KotlinParser.WHILE)
            self.state = 2502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2499
                self.match(KotlinParser.NL)
                self.state = 2504
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2505
            self.match(KotlinParser.LPAREN)
            self.state = 2506
            self.expression()
            self.state = 2507
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JumpExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(KotlinParser.THROW, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def RETURN(self):
            return self.getToken(KotlinParser.RETURN, 0)

        def RETURN_AT(self):
            return self.getToken(KotlinParser.RETURN_AT, 0)

        def CONTINUE(self):
            return self.getToken(KotlinParser.CONTINUE, 0)

        def CONTINUE_AT(self):
            return self.getToken(KotlinParser.CONTINUE_AT, 0)

        def BREAK(self):
            return self.getToken(KotlinParser.BREAK, 0)

        def BREAK_AT(self):
            return self.getToken(KotlinParser.BREAK_AT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_jumpExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpExpression" ):
                listener.enterJumpExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpExpression" ):
                listener.exitJumpExpression(self)




    def jumpExpression(self):

        localctx = KotlinParser.JumpExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_jumpExpression)
        self._la = 0 # Token type
        try:
            self.state = 2525
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [83]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2509
                self.match(KotlinParser.THROW)
                self.state = 2513
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,387,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2510
                        self.match(KotlinParser.NL) 
                    self.state = 2515
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,387,self._ctx)

                self.state = 2516
                self.expression()
                pass
            elif token in [53, 84]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2517
                _la = self._input.LA(1)
                if not(_la==53 or _la==84):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2519
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,388,self._ctx)
                if la_ == 1:
                    self.state = 2518
                    self.expression()


                pass
            elif token in [85]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2521
                self.match(KotlinParser.CONTINUE)
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2522
                self.match(KotlinParser.CONTINUE_AT)
                pass
            elif token in [86]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2523
                self.match(KotlinParser.BREAK)
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2524
                self.match(KotlinParser.BREAK_AT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallableReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLONCOLON(self):
            return self.getToken(KotlinParser.COLONCOLON, 0)

        def Q_COLONCOLON(self):
            return self.getToken(KotlinParser.Q_COLONCOLON, 0)

        def identifier(self):
            return self.getTypedRuleContext(KotlinParser.IdentifierContext,0)


        def CLASS(self):
            return self.getToken(KotlinParser.CLASS, 0)

        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def QUEST(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.QUEST)
            else:
                return self.getToken(KotlinParser.QUEST, i)

        def THIS(self):
            return self.getToken(KotlinParser.THIS, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_callableReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallableReference" ):
                listener.enterCallableReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallableReference" ):
                listener.exitCallableReference(self)




    def callableReference(self):

        localctx = KotlinParser.CallableReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_callableReference)
        self._la = 0 # Token type
        try:
            self.state = 2574
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 36, 37, 58, 66, 67, 68, 69, 73, 78, 79, 92, 97, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 140]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & -33517921595647) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & 262271) != 0):
                    self.state = 2527
                    self.userType()
                    self.state = 2537
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==41:
                        self.state = 2528
                        self.match(KotlinParser.QUEST)
                        self.state = 2532
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,390,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 2529
                                self.match(KotlinParser.NL) 
                            self.state = 2534
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,390,self._ctx)

                        self.state = 2539
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2542
                    self.match(KotlinParser.NL)
                    self.state = 2547
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2548
                _la = self._input.LA(1)
                if not(_la==36 or _la==37):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2549
                    self.match(KotlinParser.NL)
                    self.state = 2554
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2557
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [58, 66, 67, 68, 69, 73, 78, 79, 92, 97, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 140]:
                    self.state = 2555
                    self.identifier()
                    pass
                elif token in [59]:
                    self.state = 2556
                    self.match(KotlinParser.CLASS)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2559
                self.match(KotlinParser.THIS)
                self.state = 2563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2560
                    self.match(KotlinParser.NL)
                    self.state = 2565
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2566
                self.match(KotlinParser.COLONCOLON)
                self.state = 2570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2567
                    self.match(KotlinParser.NL)
                    self.state = 2572
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2573
                self.match(KotlinParser.CLASS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def ADD_ASSIGNMENT(self):
            return self.getToken(KotlinParser.ADD_ASSIGNMENT, 0)

        def SUB_ASSIGNMENT(self):
            return self.getToken(KotlinParser.SUB_ASSIGNMENT, 0)

        def MULT_ASSIGNMENT(self):
            return self.getToken(KotlinParser.MULT_ASSIGNMENT, 0)

        def DIV_ASSIGNMENT(self):
            return self.getToken(KotlinParser.DIV_ASSIGNMENT, 0)

        def MOD_ASSIGNMENT(self):
            return self.getToken(KotlinParser.MOD_ASSIGNMENT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)




    def assignmentOperator(self):

        localctx = KotlinParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2576
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 8455716864) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCL_EQ(self):
            return self.getToken(KotlinParser.EXCL_EQ, 0)

        def EXCL_EQEQ(self):
            return self.getToken(KotlinParser.EXCL_EQEQ, 0)

        def EQEQ(self):
            return self.getToken(KotlinParser.EQEQ, 0)

        def EQEQEQ(self):
            return self.getToken(KotlinParser.EQEQEQ, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_equalityOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityOperation" ):
                listener.enterEqualityOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityOperation" ):
                listener.exitEqualityOperation(self)




    def equalityOperation(self):

        localctx = KotlinParser.EqualityOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_equalityOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2578
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 3799912185593856) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGLE(self):
            return self.getToken(KotlinParser.LANGLE, 0)

        def RANGLE(self):
            return self.getToken(KotlinParser.RANGLE, 0)

        def LE(self):
            return self.getToken(KotlinParser.LE, 0)

        def GE(self):
            return self.getToken(KotlinParser.GE, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)




    def comparisonOperator(self):

        localctx = KotlinParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2580
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 131941395333120) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(KotlinParser.IN, 0)

        def NOT_IN(self):
            return self.getToken(KotlinParser.NOT_IN, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_inOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInOperator" ):
                listener.enterInOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInOperator" ):
                listener.exitInOperator(self)




    def inOperator(self):

        localctx = KotlinParser.InOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_inOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2582
            _la = self._input.LA(1)
            if not(_la==89 or _la==91):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(KotlinParser.IS, 0)

        def NOT_IS(self):
            return self.getToken(KotlinParser.NOT_IS, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_isOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsOperator" ):
                listener.enterIsOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsOperator" ):
                listener.exitIsOperator(self)




    def isOperator(self):

        localctx = KotlinParser.IsOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_isOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2584
            _la = self._input.LA(1)
            if not(_la==88 or _la==90):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(KotlinParser.ADD, 0)

        def SUB(self):
            return self.getToken(KotlinParser.SUB, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_additiveOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveOperator" ):
                listener.enterAdditiveOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveOperator" ):
                listener.exitAdditiveOperator(self)




    def additiveOperator(self):

        localctx = KotlinParser.AdditiveOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_additiveOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2586
            _la = self._input.LA(1)
            if not(_la==18 or _la==19):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MULT(self):
            return self.getToken(KotlinParser.MULT, 0)

        def DIV(self):
            return self.getToken(KotlinParser.DIV, 0)

        def MOD(self):
            return self.getToken(KotlinParser.MOD, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiplicativeOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeOperation" ):
                listener.enterMultiplicativeOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeOperation" ):
                listener.exitMultiplicativeOperation(self)




    def multiplicativeOperation(self):

        localctx = KotlinParser.MultiplicativeOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_multiplicativeOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2588
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 229376) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(KotlinParser.AS, 0)

        def AS_SAFE(self):
            return self.getToken(KotlinParser.AS_SAFE, 0)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeOperation" ):
                listener.enterTypeOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeOperation" ):
                listener.exitTypeOperation(self)




    def typeOperation(self):

        localctx = KotlinParser.TypeOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_typeOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2590
            _la = self._input.LA(1)
            if not(((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & 4611686018444165121) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixUnaryOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCR(self):
            return self.getToken(KotlinParser.INCR, 0)

        def DECR(self):
            return self.getToken(KotlinParser.DECR, 0)

        def ADD(self):
            return self.getToken(KotlinParser.ADD, 0)

        def SUB(self):
            return self.getToken(KotlinParser.SUB, 0)

        def EXCL(self):
            return self.getToken(KotlinParser.EXCL, 0)

        def annotations(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationsContext,0)


        def labelDefinition(self):
            return self.getTypedRuleContext(KotlinParser.LabelDefinitionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_prefixUnaryOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixUnaryOperation" ):
                listener.enterPrefixUnaryOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixUnaryOperation" ):
                listener.exitPrefixUnaryOperation(self)




    def prefixUnaryOperation(self):

        localctx = KotlinParser.PrefixUnaryOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_prefixUnaryOperation)
        try:
            self.state = 2599
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2592
                self.match(KotlinParser.INCR)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2593
                self.match(KotlinParser.DECR)
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2594
                self.match(KotlinParser.ADD)
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2595
                self.match(KotlinParser.SUB)
                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2596
                self.match(KotlinParser.EXCL)
                pass
            elif token in [40, 56, 93, 94, 95, 96, 99, 100, 101, 102, 142]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2597
                self.annotations()
                pass
            elif token in [143]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2598
                self.labelDefinition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixUnaryOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCR(self):
            return self.getToken(KotlinParser.INCR, 0)

        def DECR(self):
            return self.getToken(KotlinParser.DECR, 0)

        def EXCL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.EXCL)
            else:
                return self.getToken(KotlinParser.EXCL, i)

        def callSuffix(self):
            return self.getTypedRuleContext(KotlinParser.CallSuffixContext,0)


        def arrayAccess(self):
            return self.getTypedRuleContext(KotlinParser.ArrayAccessContext,0)


        def memberAccessOperator(self):
            return self.getTypedRuleContext(KotlinParser.MemberAccessOperatorContext,0)


        def postfixUnaryExpression(self):
            return self.getTypedRuleContext(KotlinParser.PostfixUnaryExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_postfixUnaryOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixUnaryOperation" ):
                listener.enterPostfixUnaryOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixUnaryOperation" ):
                listener.exitPostfixUnaryOperation(self)




    def postfixUnaryOperation(self):

        localctx = KotlinParser.PostfixUnaryOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_postfixUnaryOperation)
        self._la = 0 # Token type
        try:
            self.state = 2616
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,401,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2601
                self.match(KotlinParser.INCR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2602
                self.match(KotlinParser.DECR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2603
                self.match(KotlinParser.EXCL)
                self.state = 2604
                self.match(KotlinParser.EXCL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2605
                self.callSuffix()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2606
                self.arrayAccess()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2607
                    self.match(KotlinParser.NL)
                    self.state = 2612
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2613
                self.memberAccessOperator()
                self.state = 2614
                self.postfixUnaryExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberAccessOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(KotlinParser.DOT, 0)

        def QUEST(self):
            return self.getToken(KotlinParser.QUEST, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_memberAccessOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccessOperator" ):
                listener.enterMemberAccessOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccessOperator" ):
                listener.exitMemberAccessOperator(self)




    def memberAccessOperator(self):

        localctx = KotlinParser.MemberAccessOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_memberAccessOperator)
        try:
            self.state = 2621
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2618
                self.match(KotlinParser.DOT)
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2619
                self.match(KotlinParser.QUEST)
                self.state = 2620
                self.match(KotlinParser.DOT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ModifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ModifierContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_modifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierList" ):
                listener.enterModifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierList" ):
                listener.exitModifierList(self)




    def modifierList(self):

        localctx = KotlinParser.ModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_modifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2625 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2625
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [40, 56, 93, 94, 95, 96, 99, 100, 101, 102, 142]:
                        self.state = 2623
                        self.annotations()
                        pass
                    elif token in [89, 92, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128]:
                        self.state = 2624
                        self.modifier()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 2627 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,404,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classModifier(self):
            return self.getTypedRuleContext(KotlinParser.ClassModifierContext,0)


        def memberModifier(self):
            return self.getTypedRuleContext(KotlinParser.MemberModifierContext,0)


        def visibilityModifier(self):
            return self.getTypedRuleContext(KotlinParser.VisibilityModifierContext,0)


        def varianceAnnotation(self):
            return self.getTypedRuleContext(KotlinParser.VarianceAnnotationContext,0)


        def functionModifier(self):
            return self.getTypedRuleContext(KotlinParser.FunctionModifierContext,0)


        def propertyModifier(self):
            return self.getTypedRuleContext(KotlinParser.PropertyModifierContext,0)


        def inheritanceModifier(self):
            return self.getTypedRuleContext(KotlinParser.InheritanceModifierContext,0)


        def parameterModifier(self):
            return self.getTypedRuleContext(KotlinParser.ParameterModifierContext,0)


        def typeParameterModifier(self):
            return self.getTypedRuleContext(KotlinParser.TypeParameterModifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier" ):
                listener.enterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier" ):
                listener.exitModifier(self)




    def modifier(self):

        localctx = KotlinParser.ModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_modifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2638
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [108, 109, 110, 111, 112]:
                self.state = 2629
                self.classModifier()
                pass
            elif token in [119, 124]:
                self.state = 2630
                self.memberModifier()
                pass
            elif token in [104, 105, 106, 107]:
                self.state = 2631
                self.visibilityModifier()
                pass
            elif token in [89, 92]:
                self.state = 2632
                self.varianceAnnotation()
                pass
            elif token in [113, 114, 115, 116, 117, 118]:
                self.state = 2633
                self.functionModifier()
                pass
            elif token in [123]:
                self.state = 2634
                self.propertyModifier()
                pass
            elif token in [120, 121, 122]:
                self.state = 2635
                self.inheritanceModifier()
                pass
            elif token in [125, 126, 127]:
                self.state = 2636
                self.parameterModifier()
                pass
            elif token in [128]:
                self.state = 2637
                self.typeParameterModifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2643
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,406,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2640
                    self.match(KotlinParser.NL) 
                self.state = 2645
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,406,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(KotlinParser.ENUM, 0)

        def SEALED(self):
            return self.getToken(KotlinParser.SEALED, 0)

        def ANNOTATION(self):
            return self.getToken(KotlinParser.ANNOTATION, 0)

        def DATA(self):
            return self.getToken(KotlinParser.DATA, 0)

        def INNER(self):
            return self.getToken(KotlinParser.INNER, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_classModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModifier" ):
                listener.enterClassModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModifier" ):
                listener.exitClassModifier(self)




    def classModifier(self):

        localctx = KotlinParser.ClassModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_classModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2646
            _la = self._input.LA(1)
            if not(((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 31) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVERRIDE(self):
            return self.getToken(KotlinParser.OVERRIDE, 0)

        def LATEINIT(self):
            return self.getToken(KotlinParser.LATEINIT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_memberModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberModifier" ):
                listener.enterMemberModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberModifier" ):
                listener.exitMemberModifier(self)




    def memberModifier(self):

        localctx = KotlinParser.MemberModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_memberModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2648
            _la = self._input.LA(1)
            if not(_la==119 or _la==124):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLIC(self):
            return self.getToken(KotlinParser.PUBLIC, 0)

        def PRIVATE(self):
            return self.getToken(KotlinParser.PRIVATE, 0)

        def INTERNAL(self):
            return self.getToken(KotlinParser.INTERNAL, 0)

        def PROTECTED(self):
            return self.getToken(KotlinParser.PROTECTED, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_visibilityModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibilityModifier" ):
                listener.enterVisibilityModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibilityModifier" ):
                listener.exitVisibilityModifier(self)




    def visibilityModifier(self):

        localctx = KotlinParser.VisibilityModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_visibilityModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2650
            _la = self._input.LA(1)
            if not(((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarianceAnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(KotlinParser.IN, 0)

        def OUT(self):
            return self.getToken(KotlinParser.OUT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_varianceAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarianceAnnotation" ):
                listener.enterVarianceAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarianceAnnotation" ):
                listener.exitVarianceAnnotation(self)




    def varianceAnnotation(self):

        localctx = KotlinParser.VarianceAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_varianceAnnotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2652
            _la = self._input.LA(1)
            if not(_la==89 or _la==92):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAILREC(self):
            return self.getToken(KotlinParser.TAILREC, 0)

        def OPERATOR(self):
            return self.getToken(KotlinParser.OPERATOR, 0)

        def INFIX(self):
            return self.getToken(KotlinParser.INFIX, 0)

        def INLINE(self):
            return self.getToken(KotlinParser.INLINE, 0)

        def EXTERNAL(self):
            return self.getToken(KotlinParser.EXTERNAL, 0)

        def SUSPEND(self):
            return self.getToken(KotlinParser.SUSPEND, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionModifier" ):
                listener.enterFunctionModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionModifier" ):
                listener.exitFunctionModifier(self)




    def functionModifier(self):

        localctx = KotlinParser.FunctionModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_functionModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2654
            _la = self._input.LA(1)
            if not(((((_la - 113)) & ~0x3f) == 0 and ((1 << (_la - 113)) & 63) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(KotlinParser.CONST, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_propertyModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyModifier" ):
                listener.enterPropertyModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyModifier" ):
                listener.exitPropertyModifier(self)




    def propertyModifier(self):

        localctx = KotlinParser.PropertyModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_propertyModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2656
            self.match(KotlinParser.CONST)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InheritanceModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABSTRACT(self):
            return self.getToken(KotlinParser.ABSTRACT, 0)

        def FINAL(self):
            return self.getToken(KotlinParser.FINAL, 0)

        def OPEN(self):
            return self.getToken(KotlinParser.OPEN, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_inheritanceModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInheritanceModifier" ):
                listener.enterInheritanceModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInheritanceModifier" ):
                listener.exitInheritanceModifier(self)




    def inheritanceModifier(self):

        localctx = KotlinParser.InheritanceModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_inheritanceModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2658
            _la = self._input.LA(1)
            if not(((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARARG(self):
            return self.getToken(KotlinParser.VARARG, 0)

        def NOINLINE(self):
            return self.getToken(KotlinParser.NOINLINE, 0)

        def CROSSINLINE(self):
            return self.getToken(KotlinParser.CROSSINLINE, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_parameterModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterModifier" ):
                listener.enterParameterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterModifier" ):
                listener.exitParameterModifier(self)




    def parameterModifier(self):

        localctx = KotlinParser.ParameterModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_parameterModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2660
            _la = self._input.LA(1)
            if not(((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REIFIED(self):
            return self.getToken(KotlinParser.REIFIED, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeParameterModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterModifier" ):
                listener.enterTypeParameterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterModifier" ):
                listener.exitTypeParameterModifier(self)




    def typeParameterModifier(self):

        localctx = KotlinParser.TypeParameterModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_typeParameterModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2662
            self.match(KotlinParser.REIFIED)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LabelDefinition(self):
            return self.getToken(KotlinParser.LabelDefinition, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_labelDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelDefinition" ):
                listener.enterLabelDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelDefinition" ):
                listener.exitLabelDefinition(self)




    def labelDefinition(self):

        localctx = KotlinParser.LabelDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_labelDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2664
            self.match(KotlinParser.LabelDefinition)
            self.state = 2668
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,407,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2665
                    self.match(KotlinParser.NL) 
                self.state = 2670
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,407,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationContext,0)


        def annotationList(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_annotations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotations" ):
                listener.enterAnnotations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotations" ):
                listener.exitAnnotations(self)




    def annotations(self):

        localctx = KotlinParser.AnnotationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_annotations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2673
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,408,self._ctx)
            if la_ == 1:
                self.state = 2671
                self.annotation()
                pass

            elif la_ == 2:
                self.state = 2672
                self.annotationList()
                pass


            self.state = 2678
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,409,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2675
                    self.match(KotlinParser.NL) 
                self.state = 2680
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,409,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationUseSiteTarget(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationUseSiteTargetContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def unescapedAnnotation(self):
            return self.getTypedRuleContext(KotlinParser.UnescapedAnnotationContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def LabelReference(self):
            return self.getToken(KotlinParser.LabelReference, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.DOT)
            else:
                return self.getToken(KotlinParser.DOT, i)

        def simpleIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.SimpleIdentifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,i)


        def typeArguments(self):
            return self.getTypedRuleContext(KotlinParser.TypeArgumentsContext,0)


        def valueArguments(self):
            return self.getTypedRuleContext(KotlinParser.ValueArgumentsContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)




    def annotation(self):

        localctx = KotlinParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_annotation)
        self._la = 0 # Token type
        try:
            self.state = 2735
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [56, 93, 94, 95, 96, 99, 100, 101, 102]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2681
                self.annotationUseSiteTarget()
                self.state = 2685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2682
                    self.match(KotlinParser.NL)
                    self.state = 2687
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2688
                self.match(KotlinParser.COLON)
                self.state = 2692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2689
                    self.match(KotlinParser.NL)
                    self.state = 2694
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2695
                self.unescapedAnnotation()
                pass
            elif token in [142]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2697
                self.match(KotlinParser.LabelReference)
                self.state = 2714
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,414,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2701
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==5:
                            self.state = 2698
                            self.match(KotlinParser.NL)
                            self.state = 2703
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2704
                        self.match(KotlinParser.DOT)
                        self.state = 2708
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==5:
                            self.state = 2705
                            self.match(KotlinParser.NL)
                            self.state = 2710
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2711
                        self.simpleIdentifier() 
                    self.state = 2716
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,414,self._ctx)

                self.state = 2724
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,416,self._ctx)
                if la_ == 1:
                    self.state = 2720
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 2717
                        self.match(KotlinParser.NL)
                        self.state = 2722
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2723
                    self.typeArguments()


                self.state = 2733
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,418,self._ctx)
                if la_ == 1:
                    self.state = 2729
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 2726
                        self.match(KotlinParser.NL)
                        self.state = 2731
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2732
                    self.valueArguments()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationUseSiteTarget(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationUseSiteTargetContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def LSQUARE(self):
            return self.getToken(KotlinParser.LSQUARE, 0)

        def RSQUARE(self):
            return self.getToken(KotlinParser.RSQUARE, 0)

        def unescapedAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.UnescapedAnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.UnescapedAnnotationContext,i)


        def AT(self):
            return self.getToken(KotlinParser.AT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_annotationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationList" ):
                listener.enterAnnotationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationList" ):
                listener.exitAnnotationList(self)




    def annotationList(self):

        localctx = KotlinParser.AnnotationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_annotationList)
        self._la = 0 # Token type
        try:
            self.state = 2756
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [56, 93, 94, 95, 96, 99, 100, 101, 102]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2737
                self.annotationUseSiteTarget()
                self.state = 2738
                self.match(KotlinParser.COLON)
                self.state = 2739
                self.match(KotlinParser.LSQUARE)
                self.state = 2741 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2740
                    self.unescapedAnnotation()
                    self.state = 2743 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & -33517921595647) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & 262271) != 0)):
                        break

                self.state = 2745
                self.match(KotlinParser.RSQUARE)
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2747
                self.match(KotlinParser.AT)
                self.state = 2748
                self.match(KotlinParser.LSQUARE)
                self.state = 2750 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2749
                    self.unescapedAnnotation()
                    self.state = 2752 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & -33517921595647) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & 262271) != 0)):
                        break

                self.state = 2754
                self.match(KotlinParser.RSQUARE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationUseSiteTargetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIELD(self):
            return self.getToken(KotlinParser.FIELD, 0)

        def FILE(self):
            return self.getToken(KotlinParser.FILE, 0)

        def PROPERTY(self):
            return self.getToken(KotlinParser.PROPERTY, 0)

        def GET(self):
            return self.getToken(KotlinParser.GET, 0)

        def SET(self):
            return self.getToken(KotlinParser.SET, 0)

        def RECEIVER(self):
            return self.getToken(KotlinParser.RECEIVER, 0)

        def PARAM(self):
            return self.getToken(KotlinParser.PARAM, 0)

        def SETPARAM(self):
            return self.getToken(KotlinParser.SETPARAM, 0)

        def DELEGATE(self):
            return self.getToken(KotlinParser.DELEGATE, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_annotationUseSiteTarget

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationUseSiteTarget" ):
                listener.enterAnnotationUseSiteTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationUseSiteTarget" ):
                listener.exitAnnotationUseSiteTarget(self)




    def annotationUseSiteTarget(self):

        localctx = KotlinParser.AnnotationUseSiteTargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_annotationUseSiteTarget)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2758
            _la = self._input.LA(1)
            if not(((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & 134002979635201) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnescapedAnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(KotlinParser.IdentifierContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(KotlinParser.TypeArgumentsContext,0)


        def valueArguments(self):
            return self.getTypedRuleContext(KotlinParser.ValueArgumentsContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_unescapedAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnescapedAnnotation" ):
                listener.enterUnescapedAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnescapedAnnotation" ):
                listener.exitUnescapedAnnotation(self)




    def unescapedAnnotation(self):

        localctx = KotlinParser.UnescapedAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_unescapedAnnotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2760
            self.identifier()
            self.state = 2762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 2761
                self.typeArguments()


            self.state = 2765
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,424,self._ctx)
            if la_ == 1:
                self.state = 2764
                self.valueArguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.SimpleIdentifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.DOT)
            else:
                return self.getToken(KotlinParser.DOT, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = KotlinParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2767
            self.simpleIdentifier()
            self.state = 2778
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,426,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2771
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 2768
                        self.match(KotlinParser.NL)
                        self.state = 2773
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2774
                    self.match(KotlinParser.DOT)
                    self.state = 2775
                    self.simpleIdentifier() 
                self.state = 2780
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,426,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(KotlinParser.Identifier, 0)

        def ABSTRACT(self):
            return self.getToken(KotlinParser.ABSTRACT, 0)

        def ANNOTATION(self):
            return self.getToken(KotlinParser.ANNOTATION, 0)

        def BY(self):
            return self.getToken(KotlinParser.BY, 0)

        def CATCH(self):
            return self.getToken(KotlinParser.CATCH, 0)

        def COMPANION(self):
            return self.getToken(KotlinParser.COMPANION, 0)

        def CONSTRUCTOR(self):
            return self.getToken(KotlinParser.CONSTRUCTOR, 0)

        def CROSSINLINE(self):
            return self.getToken(KotlinParser.CROSSINLINE, 0)

        def DATA(self):
            return self.getToken(KotlinParser.DATA, 0)

        def DYNAMIC(self):
            return self.getToken(KotlinParser.DYNAMIC, 0)

        def ENUM(self):
            return self.getToken(KotlinParser.ENUM, 0)

        def EXTERNAL(self):
            return self.getToken(KotlinParser.EXTERNAL, 0)

        def FINAL(self):
            return self.getToken(KotlinParser.FINAL, 0)

        def FINALLY(self):
            return self.getToken(KotlinParser.FINALLY, 0)

        def GETTER(self):
            return self.getToken(KotlinParser.GETTER, 0)

        def IMPORT(self):
            return self.getToken(KotlinParser.IMPORT, 0)

        def INFIX(self):
            return self.getToken(KotlinParser.INFIX, 0)

        def INIT(self):
            return self.getToken(KotlinParser.INIT, 0)

        def INLINE(self):
            return self.getToken(KotlinParser.INLINE, 0)

        def INNER(self):
            return self.getToken(KotlinParser.INNER, 0)

        def INTERNAL(self):
            return self.getToken(KotlinParser.INTERNAL, 0)

        def LATEINIT(self):
            return self.getToken(KotlinParser.LATEINIT, 0)

        def NOINLINE(self):
            return self.getToken(KotlinParser.NOINLINE, 0)

        def OPEN(self):
            return self.getToken(KotlinParser.OPEN, 0)

        def OPERATOR(self):
            return self.getToken(KotlinParser.OPERATOR, 0)

        def OUT(self):
            return self.getToken(KotlinParser.OUT, 0)

        def OVERRIDE(self):
            return self.getToken(KotlinParser.OVERRIDE, 0)

        def PRIVATE(self):
            return self.getToken(KotlinParser.PRIVATE, 0)

        def PROTECTED(self):
            return self.getToken(KotlinParser.PROTECTED, 0)

        def PUBLIC(self):
            return self.getToken(KotlinParser.PUBLIC, 0)

        def REIFIED(self):
            return self.getToken(KotlinParser.REIFIED, 0)

        def SEALED(self):
            return self.getToken(KotlinParser.SEALED, 0)

        def TAILREC(self):
            return self.getToken(KotlinParser.TAILREC, 0)

        def SETTER(self):
            return self.getToken(KotlinParser.SETTER, 0)

        def VARARG(self):
            return self.getToken(KotlinParser.VARARG, 0)

        def WHERE(self):
            return self.getToken(KotlinParser.WHERE, 0)

        def CONST(self):
            return self.getToken(KotlinParser.CONST, 0)

        def SUSPEND(self):
            return self.getToken(KotlinParser.SUSPEND, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_simpleIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIdentifier" ):
                listener.enterSimpleIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIdentifier" ):
                listener.exitSimpleIdentifier(self)




    def simpleIdentifier(self):

        localctx = KotlinParser.SimpleIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_simpleIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2781
            _la = self._input.LA(1)
            if not(((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & -33517921595647) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & 262271) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SemiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def SEMICOLON(self):
            return self.getToken(KotlinParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_semi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSemi" ):
                listener.enterSemi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSemi" ):
                listener.exitSemi(self)




    def semi(self):

        localctx = KotlinParser.SemiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_semi)
        self._la = 0 # Token type
        try:
            self.state = 2801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,430,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2784 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2783
                        self.match(KotlinParser.NL)

                    else:
                        raise NoViableAltException(self)
                    self.state = 2786 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,427,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==5:
                    self.state = 2788
                    self.match(KotlinParser.NL)
                    self.state = 2793
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2794
                self.match(KotlinParser.SEMICOLON)
                self.state = 2798
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,429,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2795
                        self.match(KotlinParser.NL) 
                    self.state = 2800
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,429,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnysemiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self):
            return self.getToken(KotlinParser.NL, 0)

        def SEMICOLON(self):
            return self.getToken(KotlinParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_anysemi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnysemi" ):
                listener.enterAnysemi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnysemi" ):
                listener.exitAnysemi(self)




    def anysemi(self):

        localctx = KotlinParser.AnysemiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_anysemi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2803
            _la = self._input.LA(1)
            if not(_la==5 or _la==26):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





