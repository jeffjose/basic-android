# Generated from KotlinParser.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00ae")
        buf.write("\u0af8\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\3\2\7\2\u012a")
        buf.write("\n\2\f\2\16\2\u012d\13\2\3\2\3\2\7\2\u0131\n\2\f\2\16")
        buf.write("\2\u0134\13\2\3\2\3\2\6\2\u0138\n\2\r\2\16\2\u0139\3\2")
        buf.write("\5\2\u013d\n\2\7\2\u013f\n\2\f\2\16\2\u0142\13\2\5\2\u0144")
        buf.write("\n\2\3\2\3\2\3\3\7\3\u0149\n\3\f\3\16\3\u014c\13\3\3\3")
        buf.write("\3\3\7\3\u0150\n\3\f\3\16\3\u0153\13\3\3\3\3\3\6\3\u0157")
        buf.write("\n\3\r\3\16\3\u0158\3\3\5\3\u015c\n\3\7\3\u015e\n\3\f")
        buf.write("\3\16\3\u0161\13\3\5\3\u0163\n\3\3\3\3\3\3\4\5\4\u0168")
        buf.write("\n\4\3\4\3\4\3\4\3\5\6\5\u016e\n\5\r\5\16\5\u016f\3\6")
        buf.write("\3\6\3\6\3\6\6\6\u0176\n\6\r\6\16\6\u0177\3\6\3\6\3\6")
        buf.write("\5\6\u017d\n\6\3\6\5\6\u0180\n\6\6\6\u0182\n\6\r\6\16")
        buf.write("\6\u0183\3\7\5\7\u0187\n\7\3\7\3\7\3\7\5\7\u018c\n\7\5")
        buf.write("\7\u018e\n\7\3\b\7\b\u0191\n\b\f\b\16\b\u0194\13\b\3\t")
        buf.write("\3\t\3\t\3\t\3\t\5\t\u019b\n\t\3\t\5\t\u019e\n\t\3\n\3")
        buf.write("\n\3\n\3\13\3\13\3\13\3\13\3\13\5\13\u01a8\n\13\3\f\5")
        buf.write("\f\u01ab\n\f\3\f\3\f\7\f\u01af\n\f\f\f\16\f\u01b2\13\f")
        buf.write("\3\f\3\f\7\f\u01b6\n\f\f\f\16\f\u01b9\13\f\3\f\5\f\u01bc")
        buf.write("\n\f\3\f\7\f\u01bf\n\f\f\f\16\f\u01c2\13\f\3\f\5\f\u01c5")
        buf.write("\n\f\3\f\7\f\u01c8\n\f\f\f\16\f\u01cb\13\f\3\f\3\f\7\f")
        buf.write("\u01cf\n\f\f\f\16\f\u01d2\13\f\3\f\5\f\u01d5\n\f\3\f\7")
        buf.write("\f\u01d8\n\f\f\f\16\f\u01db\13\f\3\f\5\f\u01de\n\f\3\f")
        buf.write("\7\f\u01e1\n\f\f\f\16\f\u01e4\13\f\3\f\3\f\7\f\u01e8\n")
        buf.write("\f\f\f\16\f\u01eb\13\f\3\f\5\f\u01ee\n\f\3\r\5\r\u01f1")
        buf.write("\n\r\3\r\3\r\7\r\u01f5\n\r\f\r\16\r\u01f8\13\r\5\r\u01fa")
        buf.write("\n\r\3\r\3\r\3\16\3\16\3\16\3\16\7\16\u0202\n\16\f\16")
        buf.write("\16\16\u0205\13\16\3\16\5\16\u0208\n\16\5\16\u020a\n\16")
        buf.write("\3\16\3\16\3\17\5\17\u020f\n\17\3\17\5\17\u0212\n\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\5\17\u0219\n\17\3\20\7\20\u021c")
        buf.write("\n\20\f\20\16\20\u021f\13\20\3\20\3\20\7\20\u0223\n\20")
        buf.write("\f\20\16\20\u0226\13\20\3\20\3\20\7\20\u022a\n\20\f\20")
        buf.write("\16\20\u022d\13\20\3\20\7\20\u0230\n\20\f\20\16\20\u0233")
        buf.write("\13\20\3\20\7\20\u0236\n\20\f\20\16\20\u0239\13\20\3\21")
        buf.write("\3\21\3\21\5\21\u023e\n\21\3\22\3\22\3\22\3\23\3\23\7")
        buf.write("\23\u0245\n\23\f\23\16\23\u0248\13\23\3\23\3\23\7\23\u024c")
        buf.write("\n\23\f\23\16\23\u024f\13\23\3\23\3\23\3\24\3\24\7\24")
        buf.write("\u0255\n\24\f\24\16\24\u0258\13\24\3\24\7\24\u025b\n\24")
        buf.write("\f\24\16\24\u025e\13\24\3\24\7\24\u0261\n\24\f\24\16\24")
        buf.write("\u0264\13\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\25\3")
        buf.write("\25\3\25\5\25\u0270\n\25\3\25\6\25\u0273\n\25\r\25\16")
        buf.write("\25\u0274\3\26\3\26\7\26\u0279\n\26\f\26\16\26\u027c\13")
        buf.write("\26\3\26\3\26\3\27\5\27\u0281\n\27\3\27\3\27\7\27\u0285")
        buf.write("\n\27\f\27\16\27\u0288\13\27\3\27\3\27\7\27\u028c\n\27")
        buf.write("\f\27\16\27\u028f\13\27\3\27\3\27\7\27\u0293\n\27\f\27")
        buf.write("\16\27\u0296\13\27\3\27\5\27\u0299\n\27\3\27\7\27\u029c")
        buf.write("\n\27\f\27\16\27\u029f\13\27\3\27\5\27\u02a2\n\27\3\30")
        buf.write("\3\30\7\30\u02a6\n\30\f\30\16\30\u02a9\13\30\3\30\3\30")
        buf.write("\3\30\7\30\u02ae\n\30\f\30\16\30\u02b1\13\30\3\30\5\30")
        buf.write("\u02b4\n\30\3\31\3\31\7\31\u02b8\n\31\f\31\16\31\u02bb")
        buf.write("\13\31\3\31\5\31\u02be\n\31\3\31\7\31\u02c1\n\31\f\31")
        buf.write("\16\31\u02c4\13\31\3\31\3\31\7\31\u02c8\n\31\f\31\16\31")
        buf.write("\u02cb\13\31\3\31\7\31\u02ce\n\31\f\31\16\31\u02d1\13")
        buf.write("\31\5\31\u02d3\n\31\3\31\7\31\u02d6\n\31\f\31\16\31\u02d9")
        buf.write("\13\31\3\31\3\31\3\32\3\32\7\32\u02df\n\32\f\32\16\32")
        buf.write("\u02e2\13\32\6\32\u02e4\n\32\r\32\16\32\u02e5\3\32\5\32")
        buf.write("\u02e9\n\32\3\33\7\33\u02ec\n\33\f\33\16\33\u02ef\13\33")
        buf.write("\3\33\3\33\7\33\u02f3\n\33\f\33\16\33\u02f6\13\33\3\33")
        buf.write("\5\33\u02f9\n\33\3\33\7\33\u02fc\n\33\f\33\16\33\u02ff")
        buf.write("\13\33\3\33\5\33\u0302\n\33\3\33\7\33\u0305\n\33\f\33")
        buf.write("\16\33\u0308\13\33\3\33\5\33\u030b\n\33\3\34\5\34\u030e")
        buf.write("\n\34\3\34\3\34\7\34\u0312\n\34\f\34\16\34\u0315\13\34")
        buf.write("\3\34\3\34\7\34\u0319\n\34\f\34\16\34\u031c\13\34\3\34")
        buf.write("\3\34\5\34\u0320\n\34\3\34\7\34\u0323\n\34\f\34\16\34")
        buf.write("\u0326\13\34\3\34\5\34\u0329\n\34\3\34\7\34\u032c\n\34")
        buf.write("\f\34\16\34\u032f\13\34\3\34\3\34\7\34\u0333\n\34\f\34")
        buf.write("\16\34\u0336\13\34\3\34\3\34\5\34\u033a\n\34\3\34\7\34")
        buf.write("\u033d\n\34\f\34\16\34\u0340\13\34\3\34\5\34\u0343\n\34")
        buf.write("\3\34\7\34\u0346\n\34\f\34\16\34\u0349\13\34\3\34\3\34")
        buf.write("\7\34\u034d\n\34\f\34\16\34\u0350\13\34\3\34\3\34\7\34")
        buf.write("\u0354\n\34\f\34\16\34\u0357\13\34\3\34\5\34\u035a\n\34")
        buf.write("\3\34\7\34\u035d\n\34\f\34\16\34\u0360\13\34\3\34\5\34")
        buf.write("\u0363\n\34\3\34\7\34\u0366\n\34\f\34\16\34\u0369\13\34")
        buf.write("\3\34\5\34\u036c\n\34\3\35\3\35\3\35\3\35\7\35\u0372\n")
        buf.write("\35\f\35\16\35\u0375\13\35\3\35\5\35\u0378\n\35\5\35\u037a")
        buf.write("\n\35\3\35\3\35\3\36\5\36\u037f\n\36\3\36\3\36\3\36\5")
        buf.write("\36\u0384\n\36\3\37\3\37\3\37\3\37\3 \5 \u038b\n \3 \3")
        buf.write(" \3 \5 \u0390\n \3!\3!\3!\7!\u0395\n!\f!\16!\u0398\13")
        buf.write("!\3!\5!\u039b\n!\3\"\5\"\u039e\n\"\3\"\3\"\7\"\u03a2\n")
        buf.write("\"\f\"\16\"\u03a5\13\"\3\"\3\"\7\"\u03a9\n\"\f\"\16\"")
        buf.write("\u03ac\13\"\3\"\5\"\u03af\n\"\3\"\7\"\u03b2\n\"\f\"\16")
        buf.write("\"\u03b5\13\"\3\"\3\"\7\"\u03b9\n\"\f\"\16\"\u03bc\13")
        buf.write("\"\3\"\5\"\u03bf\n\"\3\"\7\"\u03c2\n\"\f\"\16\"\u03c5")
        buf.write("\13\"\3\"\5\"\u03c8\n\"\3#\5#\u03cb\n#\3#\3#\7#\u03cf")
        buf.write("\n#\f#\16#\u03d2\13#\3#\5#\u03d5\n#\3#\3#\7#\u03d9\n#")
        buf.write("\f#\16#\u03dc\13#\3#\5#\u03df\n#\3#\7#\u03e2\n#\f#\16")
        buf.write("#\u03e5\13#\3#\3#\7#\u03e9\n#\f#\16#\u03ec\13#\3#\5#\u03ef")
        buf.write("\n#\3#\7#\u03f2\n#\f#\16#\u03f5\13#\3#\5#\u03f8\n#\3$")
        buf.write("\5$\u03fb\n$\3$\3$\7$\u03ff\n$\f$\16$\u0402\13$\3$\5$")
        buf.write("\u0405\n$\3$\7$\u0408\n$\f$\16$\u040b\13$\3$\3$\7$\u040f")
        buf.write("\n$\f$\16$\u0412\13$\3$\3$\5$\u0416\n$\3$\7$\u0419\n$")
        buf.write("\f$\16$\u041c\13$\3$\3$\5$\u0420\n$\3$\7$\u0423\n$\f$")
        buf.write("\16$\u0426\13$\3$\5$\u0429\n$\3$\7$\u042c\n$\f$\16$\u042f")
        buf.write("\13$\3$\3$\7$\u0433\n$\f$\16$\u0436\13$\3$\5$\u0439\n")
        buf.write("$\3$\7$\u043c\n$\f$\16$\u043f\13$\3$\3$\3$\3$\5$\u0445")
        buf.write("\n$\3$\7$\u0448\n$\f$\16$\u044b\13$\3$\3$\3$\3$\5$\u0451")
        buf.write("\n$\5$\u0453\n$\3%\3%\3%\3%\7%\u0459\n%\f%\16%\u045c\13")
        buf.write("%\3%\3%\3&\3&\3&\5&\u0463\n&\3&\3&\3&\5&\u0468\n&\5&\u046a")
        buf.write("\n&\3\'\5\'\u046d\n\'\3\'\3\'\5\'\u0471\n\'\3\'\3\'\7")
        buf.write("\'\u0475\n\'\f\'\16\'\u0478\13\'\3\'\3\'\3\'\7\'\u047d")
        buf.write("\n\'\f\'\16\'\u0480\13\'\3\'\3\'\7\'\u0484\n\'\f\'\16")
        buf.write("\'\u0487\13\'\3\'\5\'\u048a\n\'\3\'\7\'\u048d\n\'\f\'")
        buf.write("\16\'\u0490\13\'\3\'\3\'\3\'\7\'\u0495\n\'\f\'\16\'\u0498")
        buf.write("\13\'\3\'\5\'\u049b\n\'\5\'\u049d\n\'\3(\5(\u04a0\n(\3")
        buf.write("(\3(\5(\u04a4\n(\3(\3(\7(\u04a8\n(\f(\16(\u04ab\13(\3")
        buf.write("(\3(\3(\7(\u04b0\n(\f(\16(\u04b3\13(\3(\3(\5(\u04b7\n")
        buf.write("(\3(\3(\7(\u04bb\n(\f(\16(\u04be\13(\3(\3(\5(\u04c2\n")
        buf.write("(\3)\5)\u04c5\n)\3)\3)\7)\u04c9\n)\f)\16)\u04cc\13)\3")
        buf.write(")\3)\7)\u04d0\n)\f)\16)\u04d3\13)\3)\5)\u04d6\n)\3)\7")
        buf.write(")\u04d9\n)\f)\16)\u04dc\13)\3)\3)\7)\u04e0\n)\f)\16)\u04e3")
        buf.write("\13)\3)\3)\3*\3*\7*\u04e9\n*\f*\16*\u04ec\13*\3*\3*\7")
        buf.write("*\u04f0\n*\f*\16*\u04f3\13*\3*\3*\7*\u04f7\n*\f*\16*\u04fa")
        buf.write("\13*\3*\7*\u04fd\n*\f*\16*\u0500\13*\3*\7*\u0503\n*\f")
        buf.write("*\16*\u0506\13*\3*\5*\u0509\n*\3*\7*\u050c\n*\f*\16*\u050f")
        buf.write("\13*\3*\3*\3+\5+\u0514\n+\3+\7+\u0517\n+\f+\16+\u051a")
        buf.write("\13+\3+\3+\5+\u051e\n+\3+\7+\u0521\n+\f+\16+\u0524\13")
        buf.write("+\3+\3+\7+\u0528\n+\f+\16+\u052b\13+\3+\5+\u052e\n+\3")
        buf.write(",\5,\u0531\n,\3,\3,\3,\3,\5,\u0537\n,\3-\3-\3-\7-\u053c")
        buf.write("\n-\f-\16-\u053f\13-\6-\u0541\n-\r-\16-\u0542\3.\3.\3")
        buf.write(".\3.\3/\3/\5/\u054b\n/\3/\7/\u054e\n/\f/\16/\u0551\13")
        buf.write("/\3/\6/\u0554\n/\r/\16/\u0555\3\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\5\60\u055e\n\60\3\61\3\61\7\61\u0562\n\61\f\61\16")
        buf.write("\61\u0565\13\61\3\61\3\61\7\61\u0569\n\61\f\61\16\61\u056c")
        buf.write("\13\61\5\61\u056e\n\61\3\61\3\61\7\61\u0572\n\61\f\61")
        buf.write("\16\61\u0575\13\61\3\61\3\61\7\61\u0579\n\61\f\61\16\61")
        buf.write("\u057c\13\61\3\61\3\61\3\62\3\62\3\62\5\62\u0583\n\62")
        buf.write("\3\63\3\63\7\63\u0587\n\63\f\63\16\63\u058a\13\63\3\63")
        buf.write("\3\63\7\63\u058e\n\63\f\63\16\63\u0591\13\63\3\63\7\63")
        buf.write("\u0594\n\63\f\63\16\63\u0597\13\63\3\64\3\64\7\64\u059b")
        buf.write("\n\64\f\64\16\64\u059e\13\64\3\64\5\64\u05a1\n\64\3\65")
        buf.write("\3\65\7\65\u05a5\n\65\f\65\16\65\u05a8\13\65\3\65\3\65")
        buf.write("\5\65\u05ac\n\65\3\65\7\65\u05af\n\65\f\65\16\65\u05b2")
        buf.write("\13\65\3\65\3\65\7\65\u05b6\n\65\f\65\16\65\u05b9\13\65")
        buf.write("\3\65\3\65\5\65\u05bd\n\65\7\65\u05bf\n\65\f\65\16\65")
        buf.write("\u05c2\13\65\3\65\7\65\u05c5\n\65\f\65\16\65\u05c8\13")
        buf.write("\65\3\65\5\65\u05cb\n\65\3\65\7\65\u05ce\n\65\f\65\16")
        buf.write("\65\u05d1\13\65\3\65\3\65\3\66\3\66\7\66\u05d7\n\66\f")
        buf.write("\66\16\66\u05da\13\66\3\66\3\66\7\66\u05de\n\66\f\66\16")
        buf.write("\66\u05e1\13\66\3\66\3\66\7\66\u05e5\n\66\f\66\16\66\u05e8")
        buf.write("\13\66\3\66\7\66\u05eb\n\66\f\66\16\66\u05ee\13\66\3\67")
        buf.write("\7\67\u05f1\n\67\f\67\16\67\u05f4\13\67\3\67\3\67\7\67")
        buf.write("\u05f8\n\67\f\67\16\67\u05fb\13\67\3\67\3\67\7\67\u05ff")
        buf.write("\n\67\f\67\16\67\u0602\13\67\3\67\3\67\38\38\38\38\39")
        buf.write("\79\u060b\n9\f9\169\u060e\139\39\39\69\u0612\n9\r9\16")
        buf.write("9\u0613\39\59\u0617\n9\79\u0619\n9\f9\169\u061c\139\5")
        buf.write("9\u061e\n9\3:\3:\5:\u0622\n:\3;\7;\u0625\n;\f;\16;\u0628")
        buf.write("\13;\3;\7;\u062b\n;\f;\16;\u062e\13;\3;\3;\3<\7<\u0633")
        buf.write("\n<\f<\16<\u0636\13<\3<\3<\3<\3<\5<\u063c\n<\3=\3=\3=")
        buf.write("\3=\7=\u0642\n=\f=\16=\u0645\13=\3>\3>\7>\u0649\n>\f>")
        buf.write("\16>\u064c\13>\3>\3>\7>\u0650\n>\f>\16>\u0653\13>\3>\7")
        buf.write(">\u0656\n>\f>\16>\u0659\13>\3?\3?\7?\u065d\n?\f?\16?\u0660")
        buf.write("\13?\3?\3?\7?\u0664\n?\f?\16?\u0667\13?\3?\7?\u066a\n")
        buf.write("?\f?\16?\u066d\13?\3@\3@\3@\7@\u0672\n@\f@\16@\u0675\13")
        buf.write("@\3@\3@\7@\u0679\n@\f@\16@\u067c\13@\3A\3A\3A\7A\u0681")
        buf.write("\nA\fA\16A\u0684\13A\3A\3A\5A\u0688\nA\3B\3B\3B\7B\u068d")
        buf.write("\nB\fB\16B\u0690\13B\3B\3B\6B\u0694\nB\rB\16B\u0695\3")
        buf.write("B\3B\7B\u069a\nB\fB\16B\u069d\13B\3B\3B\5B\u06a1\nB\3")
        buf.write("C\3C\7C\u06a5\nC\fC\16C\u06a8\13C\3C\3C\7C\u06ac\nC\f")
        buf.write("C\16C\u06af\13C\3C\7C\u06b2\nC\fC\16C\u06b5\13C\3D\3D")
        buf.write("\3D\7D\u06ba\nD\fD\16D\u06bd\13D\3D\3D\7D\u06c1\nD\fD")
        buf.write("\16D\u06c4\13D\3E\3E\3E\7E\u06c9\nE\fE\16E\u06cc\13E\3")
        buf.write("E\7E\u06cf\nE\fE\16E\u06d2\13E\3F\3F\3F\7F\u06d7\nF\f")
        buf.write("F\16F\u06da\13F\3F\3F\7F\u06de\nF\fF\16F\u06e1\13F\3G")
        buf.write("\3G\3G\7G\u06e6\nG\fG\16G\u06e9\13G\3G\3G\7G\u06ed\nG")
        buf.write("\fG\16G\u06f0\13G\3H\3H\7H\u06f4\nH\fH\16H\u06f7\13H\3")
        buf.write("H\3H\3H\7H\u06fc\nH\fH\16H\u06ff\13H\3I\7I\u0702\nI\f")
        buf.write("I\16I\u0705\13I\3I\3I\3J\3J\5J\u070b\nJ\3J\7J\u070e\n")
        buf.write("J\fJ\16J\u0711\13J\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3")
        buf.write("K\3K\3K\5K\u0721\nK\3L\3L\3L\3L\3M\3M\5M\u0729\nM\3M\7")
        buf.write("M\u072c\nM\fM\16M\u072f\13M\3M\3M\7M\u0733\nM\fM\16M\u0736")
        buf.write("\13M\3M\6M\u0739\nM\rM\16M\u073a\5M\u073d\nM\3N\7N\u0740")
        buf.write("\nN\fN\16N\u0743\13N\3N\5N\u0746\nN\3N\7N\u0749\nN\fN")
        buf.write("\16N\u074c\13N\3N\3N\3O\3O\3O\3O\7O\u0754\nO\fO\16O\u0757")
        buf.write("\13O\5O\u0759\nO\3O\3O\3P\3P\3P\3P\7P\u0761\nP\fP\16P")
        buf.write("\u0764\13P\3P\7P\u0767\nP\fP\16P\u076a\13P\3P\5P\u076d")
        buf.write("\nP\5P\u076f\nP\3P\3P\3Q\3Q\7Q\u0775\nQ\fQ\16Q\u0778\13")
        buf.write("Q\3Q\3Q\7Q\u077c\nQ\fQ\16Q\u077f\13Q\3Q\3Q\7Q\u0783\n")
        buf.write("Q\fQ\16Q\u0786\13Q\3Q\7Q\u0789\nQ\fQ\16Q\u078c\13Q\3Q")
        buf.write("\5Q\u078f\nQ\3Q\7Q\u0792\nQ\fQ\16Q\u0795\13Q\3Q\3Q\5Q")
        buf.write("\u0799\nQ\3R\5R\u079c\nR\3R\3R\5R\u07a0\nR\3S\6S\u07a3")
        buf.write("\nS\rS\16S\u07a4\3T\3T\7T\u07a9\nT\fT\16T\u07ac\13T\3")
        buf.write("T\3T\7T\u07b0\nT\fT\16T\u07b3\13T\5T\u07b5\nT\3T\5T\u07b8")
        buf.write("\nT\3T\7T\u07bb\nT\fT\16T\u07be\13T\3T\3T\3U\3U\3U\3U")
        buf.write("\3U\3U\3U\3U\3U\5U\u07cb\nU\3V\3V\5V\u07cf\nV\3W\3W\3")
        buf.write("W\7W\u07d4\nW\fW\16W\u07d7\13W\3W\3W\3X\3X\3X\3X\3X\7")
        buf.write("X\u07e0\nX\fX\16X\u07e3\13X\3X\3X\3Y\3Y\3Z\3Z\3Z\3Z\3")
        buf.write("[\3[\3\\\3\\\3\\\3\\\3]\7]\u07f4\n]\f]\16]\u07f7\13]\3")
        buf.write("]\3]\7]\u07fb\n]\f]\16]\u07fe\13]\3]\3]\7]\u0802\n]\f")
        buf.write("]\16]\u0805\13]\3]\3]\3]\3]\7]\u080b\n]\f]\16]\u080e\13")
        buf.write("]\3]\3]\7]\u0812\n]\f]\16]\u0815\13]\3]\3]\7]\u0819\n")
        buf.write("]\f]\16]\u081c\13]\3]\3]\7]\u0820\n]\f]\16]\u0823\13]")
        buf.write("\3]\3]\5]\u0827\n]\3^\5^\u082a\n^\3^\7^\u082d\n^\f^\16")
        buf.write("^\u0830\13^\3^\3^\7^\u0834\n^\f^\16^\u0837\13^\3^\7^\u083a")
        buf.write("\n^\f^\16^\u083d\13^\3_\3_\3_\7_\u0842\n_\f_\16_\u0845")
        buf.write("\13_\3_\3_\7_\u0849\n_\f_\16_\u084c\13_\3_\5_\u084f\n")
        buf.write("_\5_\u0851\n_\3`\3`\7`\u0855\n`\f`\16`\u0858\13`\3`\3")
        buf.write("`\7`\u085c\n`\f`\16`\u085f\13`\3`\5`\u0862\n`\3`\7`\u0865")
        buf.write("\n`\f`\16`\u0868\13`\3`\5`\u086b\n`\3a\3a\5a\u086f\na")
        buf.write("\3a\3a\7a\u0873\na\fa\16a\u0876\13a\3a\3a\3b\3b\5b\u087c")
        buf.write("\nb\3c\3c\3c\7c\u0881\nc\fc\16c\u0884\13c\3c\3c\7c\u0888")
        buf.write("\nc\fc\16c\u088b\13c\3c\3c\5c\u088f\nc\3c\5c\u0892\nc")
        buf.write("\3d\3d\5d\u0896\nd\3e\3e\7e\u089a\ne\fe\16e\u089d\13e")
        buf.write("\3e\3e\3e\3e\7e\u08a3\ne\fe\16e\u08a6\13e\3e\5e\u08a9")
        buf.write("\ne\3e\5e\u08ac\ne\3e\7e\u08af\ne\fe\16e\u08b2\13e\3e")
        buf.write("\3e\7e\u08b6\ne\fe\16e\u08b9\13e\3e\5e\u08bc\ne\5e\u08be")
        buf.write("\ne\3f\3f\5f\u08c2\nf\3g\3g\7g\u08c6\ng\fg\16g\u08c9\13")
        buf.write("g\3g\3g\3g\3g\5g\u08cf\ng\3g\7g\u08d2\ng\fg\16g\u08d5")
        buf.write("\13g\3g\3g\7g\u08d9\ng\fg\16g\u08dc\13g\3g\3g\7g\u08e0")
        buf.write("\ng\fg\16g\u08e3\13g\7g\u08e5\ng\fg\16g\u08e8\13g\3g\7")
        buf.write("g\u08eb\ng\fg\16g\u08ee\13g\3g\3g\3h\3h\7h\u08f4\nh\f")
        buf.write("h\16h\u08f7\13h\3h\3h\7h\u08fb\nh\fh\16h\u08fe\13h\3h")
        buf.write("\7h\u0901\nh\fh\16h\u0904\13h\3h\7h\u0907\nh\fh\16h\u090a")
        buf.write("\13h\3h\3h\7h\u090e\nh\fh\16h\u0911\13h\3h\3h\5h\u0915")
        buf.write("\nh\3h\3h\7h\u0919\nh\fh\16h\u091c\13h\3h\3h\7h\u0920")
        buf.write("\nh\fh\16h\u0923\13h\3h\5h\u0926\nh\3i\3i\3i\5i\u092b")
        buf.write("\ni\3j\3j\7j\u092f\nj\fj\16j\u0932\13j\3j\3j\3k\3k\7k")
        buf.write("\u0938\nk\fk\16k\u093b\13k\3k\3k\3l\3l\7l\u0941\nl\fl")
        buf.write("\16l\u0944\13l\3l\3l\7l\u0948\nl\fl\16l\u094b\13l\3l\7")
        buf.write("l\u094e\nl\fl\16l\u0951\13l\3l\7l\u0954\nl\fl\16l\u0957")
        buf.write("\13l\3l\5l\u095a\nl\3m\3m\7m\u095e\nm\fm\16m\u0961\13")
        buf.write("m\3m\3m\7m\u0965\nm\fm\16m\u0968\13m\3m\3m\3m\3m\3m\7")
        buf.write("m\u096f\nm\fm\16m\u0972\13m\3m\3m\3n\3n\7n\u0978\nn\f")
        buf.write("n\16n\u097b\13n\3n\3n\3o\3o\3o\5o\u0982\no\3p\3p\7p\u0986")
        buf.write("\np\fp\16p\u0989\13p\3p\3p\7p\u098d\np\fp\16p\u0990\13")
        buf.write("p\3p\3p\5p\u0994\np\3p\3p\3p\3p\7p\u099a\np\fp\16p\u099d")
        buf.write("\13p\3p\5p\u09a0\np\3q\3q\7q\u09a4\nq\fq\16q\u09a7\13")
        buf.write("q\3q\3q\3q\3q\7q\u09ad\nq\fq\16q\u09b0\13q\3q\5q\u09b3")
        buf.write("\nq\3r\3r\7r\u09b7\nr\fr\16r\u09ba\13r\3r\5r\u09bd\nr")
        buf.write("\3r\7r\u09c0\nr\fr\16r\u09c3\13r\3r\3r\7r\u09c7\nr\fr")
        buf.write("\16r\u09ca\13r\3r\3r\3r\3r\3s\3s\7s\u09d2\ns\fs\16s\u09d5")
        buf.write("\13s\3s\3s\3s\5s\u09da\ns\3s\3s\3s\3s\5s\u09e0\ns\3t\3")
        buf.write("t\3t\7t\u09e5\nt\ft\16t\u09e8\13t\7t\u09ea\nt\ft\16t\u09ed")
        buf.write("\13t\5t\u09ef\nt\3t\7t\u09f2\nt\ft\16t\u09f5\13t\3t\3")
        buf.write("t\7t\u09f9\nt\ft\16t\u09fc\13t\3t\3t\5t\u0a00\nt\3t\3")
        buf.write("t\7t\u0a04\nt\ft\16t\u0a07\13t\3t\3t\7t\u0a0b\nt\ft\16")
        buf.write("t\u0a0e\13t\3t\5t\u0a11\nt\3u\3u\3v\3v\3w\3w\3x\3x\3y")
        buf.write("\3y\3z\3z\3{\3{\3|\3|\3}\3}\3}\3}\3}\3}\3}\5}\u0a2a\n")
        buf.write("}\3~\3~\3~\3~\3~\3~\3~\7~\u0a33\n~\f~\16~\u0a36\13~\3")
        buf.write("~\3~\3~\5~\u0a3b\n~\3\177\3\177\3\177\5\177\u0a40\n\177")
        buf.write("\3\u0080\3\u0080\6\u0080\u0a44\n\u0080\r\u0080\16\u0080")
        buf.write("\u0a45\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0081\5\u0081\u0a51\n\u0081\3\u0081")
        buf.write("\7\u0081\u0a54\n\u0081\f\u0081\16\u0081\u0a57\13\u0081")
        buf.write("\3\u0082\3\u0082\3\u0083\3\u0083\3\u0084\3\u0084\3\u0085")
        buf.write("\3\u0085\3\u0086\3\u0086\3\u0087\3\u0087\3\u0088\3\u0088")
        buf.write("\3\u0089\3\u0089\3\u008a\3\u008a\3\u008b\3\u008b\7\u008b")
        buf.write("\u0a6d\n\u008b\f\u008b\16\u008b\u0a70\13\u008b\3\u008c")
        buf.write("\3\u008c\5\u008c\u0a74\n\u008c\3\u008c\7\u008c\u0a77\n")
        buf.write("\u008c\f\u008c\16\u008c\u0a7a\13\u008c\3\u008d\3\u008d")
        buf.write("\7\u008d\u0a7e\n\u008d\f\u008d\16\u008d\u0a81\13\u008d")
        buf.write("\3\u008d\3\u008d\7\u008d\u0a85\n\u008d\f\u008d\16\u008d")
        buf.write("\u0a88\13\u008d\3\u008d\3\u008d\3\u008d\3\u008d\7\u008d")
        buf.write("\u0a8e\n\u008d\f\u008d\16\u008d\u0a91\13\u008d\3\u008d")
        buf.write("\3\u008d\7\u008d\u0a95\n\u008d\f\u008d\16\u008d\u0a98")
        buf.write("\13\u008d\3\u008d\7\u008d\u0a9b\n\u008d\f\u008d\16\u008d")
        buf.write("\u0a9e\13\u008d\3\u008d\7\u008d\u0aa1\n\u008d\f\u008d")
        buf.write("\16\u008d\u0aa4\13\u008d\3\u008d\5\u008d\u0aa7\n\u008d")
        buf.write("\3\u008d\7\u008d\u0aaa\n\u008d\f\u008d\16\u008d\u0aad")
        buf.write("\13\u008d\3\u008d\5\u008d\u0ab0\n\u008d\5\u008d\u0ab2")
        buf.write("\n\u008d\3\u008e\3\u008e\3\u008e\3\u008e\6\u008e\u0ab8")
        buf.write("\n\u008e\r\u008e\16\u008e\u0ab9\3\u008e\3\u008e\3\u008e")
        buf.write("\3\u008e\3\u008e\6\u008e\u0ac1\n\u008e\r\u008e\16\u008e")
        buf.write("\u0ac2\3\u008e\3\u008e\5\u008e\u0ac7\n\u008e\3\u008f\3")
        buf.write("\u008f\3\u0090\3\u0090\5\u0090\u0acd\n\u0090\3\u0090\5")
        buf.write("\u0090\u0ad0\n\u0090\3\u0091\3\u0091\7\u0091\u0ad4\n\u0091")
        buf.write("\f\u0091\16\u0091\u0ad7\13\u0091\3\u0091\3\u0091\7\u0091")
        buf.write("\u0adb\n\u0091\f\u0091\16\u0091\u0ade\13\u0091\3\u0092")
        buf.write("\3\u0092\3\u0093\6\u0093\u0ae3\n\u0093\r\u0093\16\u0093")
        buf.write("\u0ae4\3\u0093\7\u0093\u0ae8\n\u0093\f\u0093\16\u0093")
        buf.write("\u0aeb\13\u0093\3\u0093\3\u0093\7\u0093\u0aef\n\u0093")
        buf.write("\f\u0093\16\u0093\u0af2\13\u0093\5\u0093\u0af4\n\u0093")
        buf.write("\3\u0094\3\u0094\3\u0094\2\2\u0095\2\4\6\b\n\f\16\20\22")
        buf.write("\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPR")
        buf.write("TVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088")
        buf.write("\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a")
        buf.write("\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac")
        buf.write("\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be")
        buf.write("\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0")
        buf.write("\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2")
        buf.write("\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4")
        buf.write("\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106")
        buf.write("\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118")
        buf.write("\u011a\u011c\u011e\u0120\u0122\u0124\u0126\2\33\3\2=>")
        buf.write("\3\2AB\4\2\35\35EE\3\2\u009f\u00a1\3\2\u00a5\u00a7\4\2")
        buf.write("\67\67VV\3\2&\'\3\2\35\"\4\2\61\62\64\65\3\2-\60\4\2[")
        buf.write("[]]\4\2ZZ\\\\\3\2\24\25\3\2\21\23\5\2\33\33\63\63YY\3")
        buf.write("\2nr\4\2yy~~\3\2jm\4\2[[^^\3\2sx\3\2z|\3\2\177\u0081\5")
        buf.write("\2::_beh\n\2<<DGKKPQ^^cdi\u0082\u008e\u008e\4\2\7\7\34")
        buf.write("\34\2\u0c54\2\u012b\3\2\2\2\4\u014a\3\2\2\2\6\u0167\3")
        buf.write("\2\2\2\b\u016d\3\2\2\2\n\u0181\3\2\2\2\f\u018d\3\2\2\2")
        buf.write("\16\u0192\3\2\2\2\20\u0195\3\2\2\2\22\u019f\3\2\2\2\24")
        buf.write("\u01a7\3\2\2\2\26\u01aa\3\2\2\2\30\u01f0\3\2\2\2\32\u01fd")
        buf.write("\3\2\2\2\34\u020e\3\2\2\2\36\u021d\3\2\2\2 \u023d\3\2")
        buf.write("\2\2\"\u023f\3\2\2\2$\u0242\3\2\2\2&\u0252\3\2\2\2(\u026f")
        buf.write("\3\2\2\2*\u0276\3\2\2\2,\u0280\3\2\2\2.\u02b3\3\2\2\2")
        buf.write("\60\u02b5\3\2\2\2\62\u02e3\3\2\2\2\64\u02ed\3\2\2\2\66")
        buf.write("\u030d\3\2\2\28\u036d\3\2\2\2:\u037e\3\2\2\2<\u0385\3")
        buf.write("\2\2\2>\u038a\3\2\2\2@\u039a\3\2\2\2B\u039d\3\2\2\2D\u03ca")
        buf.write("\3\2\2\2F\u03fa\3\2\2\2H\u0454\3\2\2\2J\u0469\3\2\2\2")
        buf.write("L\u049c\3\2\2\2N\u04c1\3\2\2\2P\u04c4\3\2\2\2R\u04e6\3")
        buf.write("\2\2\2T\u0513\3\2\2\2V\u0530\3\2\2\2X\u0540\3\2\2\2Z\u0544")
        buf.write("\3\2\2\2\\\u054a\3\2\2\2^\u055d\3\2\2\2`\u056d\3\2\2\2")
        buf.write("b\u0582\3\2\2\2d\u0584\3\2\2\2f\u0598\3\2\2\2h\u05a2\3")
        buf.write("\2\2\2j\u05d4\3\2\2\2l\u05f2\3\2\2\2n\u0605\3\2\2\2p\u060c")
        buf.write("\3\2\2\2r\u0621\3\2\2\2t\u0626\3\2\2\2v\u0634\3\2\2\2")
        buf.write("x\u063d\3\2\2\2z\u0646\3\2\2\2|\u065a\3\2\2\2~\u066e\3")
        buf.write("\2\2\2\u0080\u067d\3\2\2\2\u0082\u0689\3\2\2\2\u0084\u06a2")
        buf.write("\3\2\2\2\u0086\u06b6\3\2\2\2\u0088\u06c5\3\2\2\2\u008a")
        buf.write("\u06d3\3\2\2\2\u008c\u06e2\3\2\2\2\u008e\u06f1\3\2\2\2")
        buf.write("\u0090\u0703\3\2\2\2\u0092\u070a\3\2\2\2\u0094\u0720\3")
        buf.write("\2\2\2\u0096\u0722\3\2\2\2\u0098\u073c\3\2\2\2\u009a\u0741")
        buf.write("\3\2\2\2\u009c\u074f\3\2\2\2\u009e\u075c\3\2\2\2\u00a0")
        buf.write("\u0772\3\2\2\2\u00a2\u079f\3\2\2\2\u00a4\u07a2\3\2\2\2")
        buf.write("\u00a6\u07b4\3\2\2\2\u00a8\u07ca\3\2\2\2\u00aa\u07ce\3")
        buf.write("\2\2\2\u00ac\u07d0\3\2\2\2\u00ae\u07da\3\2\2\2\u00b0\u07e6")
        buf.write("\3\2\2\2\u00b2\u07e8\3\2\2\2\u00b4\u07ec\3\2\2\2\u00b6")
        buf.write("\u07ee\3\2\2\2\u00b8\u07f5\3\2\2\2\u00ba\u0829\3\2\2\2")
        buf.write("\u00bc\u0850\3\2\2\2\u00be\u0852\3\2\2\2\u00c0\u086c\3")
        buf.write("\2\2\2\u00c2\u0879\3\2\2\2\u00c4\u087d\3\2\2\2\u00c6\u0895")
        buf.write("\3\2\2\2\u00c8\u0897\3\2\2\2\u00ca\u08c1\3\2\2\2\u00cc")
        buf.write("\u08c3\3\2\2\2\u00ce\u0925\3\2\2\2\u00d0\u092a\3\2\2\2")
        buf.write("\u00d2\u092c\3\2\2\2\u00d4\u0935\3\2\2\2\u00d6\u093e\3")
        buf.write("\2\2\2\u00d8\u095b\3\2\2\2\u00da\u0975\3\2\2\2\u00dc\u0981")
        buf.write("\3\2\2\2\u00de\u0983\3\2\2\2\u00e0\u09a1\3\2\2\2\u00e2")
        buf.write("\u09b4\3\2\2\2\u00e4\u09df\3\2\2\2\u00e6\u0a10\3\2\2\2")
        buf.write("\u00e8\u0a12\3\2\2\2\u00ea\u0a14\3\2\2\2\u00ec\u0a16\3")
        buf.write("\2\2\2\u00ee\u0a18\3\2\2\2\u00f0\u0a1a\3\2\2\2\u00f2\u0a1c")
        buf.write("\3\2\2\2\u00f4\u0a1e\3\2\2\2\u00f6\u0a20\3\2\2\2\u00f8")
        buf.write("\u0a29\3\2\2\2\u00fa\u0a3a\3\2\2\2\u00fc\u0a3f\3\2\2\2")
        buf.write("\u00fe\u0a43\3\2\2\2\u0100\u0a50\3\2\2\2\u0102\u0a58\3")
        buf.write("\2\2\2\u0104\u0a5a\3\2\2\2\u0106\u0a5c\3\2\2\2\u0108\u0a5e")
        buf.write("\3\2\2\2\u010a\u0a60\3\2\2\2\u010c\u0a62\3\2\2\2\u010e")
        buf.write("\u0a64\3\2\2\2\u0110\u0a66\3\2\2\2\u0112\u0a68\3\2\2\2")
        buf.write("\u0114\u0a6a\3\2\2\2\u0116\u0a73\3\2\2\2\u0118\u0ab1\3")
        buf.write("\2\2\2\u011a\u0ac6\3\2\2\2\u011c\u0ac8\3\2\2\2\u011e\u0aca")
        buf.write("\3\2\2\2\u0120\u0ad1\3\2\2\2\u0122\u0adf\3\2\2\2\u0124")
        buf.write("\u0af3\3\2\2\2\u0126\u0af5\3\2\2\2\u0128\u012a\7\7\2\2")
        buf.write("\u0129\u0128\3\2\2\2\u012a\u012d\3\2\2\2\u012b\u0129\3")
        buf.write("\2\2\2\u012b\u012c\3\2\2\2\u012c\u012e\3\2\2\2\u012d\u012b")
        buf.write("\3\2\2\2\u012e\u0132\5\6\4\2\u012f\u0131\5\u0126\u0094")
        buf.write("\2\u0130\u012f\3\2\2\2\u0131\u0134\3\2\2\2\u0132\u0130")
        buf.write("\3\2\2\2\u0132\u0133\3\2\2\2\u0133\u0143\3\2\2\2\u0134")
        buf.write("\u0132\3\2\2\2\u0135\u0140\5\24\13\2\u0136\u0138\5\u0126")
        buf.write("\u0094\2\u0137\u0136\3\2\2\2\u0138\u0139\3\2\2\2\u0139")
        buf.write("\u0137\3\2\2\2\u0139\u013a\3\2\2\2\u013a\u013c\3\2\2\2")
        buf.write("\u013b\u013d\5\24\13\2\u013c\u013b\3\2\2\2\u013c\u013d")
        buf.write("\3\2\2\2\u013d\u013f\3\2\2\2\u013e\u0137\3\2\2\2\u013f")
        buf.write("\u0142\3\2\2\2\u0140\u013e\3\2\2\2\u0140\u0141\3\2\2\2")
        buf.write("\u0141\u0144\3\2\2\2\u0142\u0140\3\2\2\2\u0143\u0135\3")
        buf.write("\2\2\2\u0143\u0144\3\2\2\2\u0144\u0145\3\2\2\2\u0145\u0146")
        buf.write("\7\2\2\3\u0146\3\3\2\2\2\u0147\u0149\7\7\2\2\u0148\u0147")
        buf.write("\3\2\2\2\u0149\u014c\3\2\2\2\u014a\u0148\3\2\2\2\u014a")
        buf.write("\u014b\3\2\2\2\u014b\u014d\3\2\2\2\u014c\u014a\3\2\2\2")
        buf.write("\u014d\u0151\5\6\4\2\u014e\u0150\5\u0126\u0094\2\u014f")
        buf.write("\u014e\3\2\2\2\u0150\u0153\3\2\2\2\u0151\u014f\3\2\2\2")
        buf.write("\u0151\u0152\3\2\2\2\u0152\u0162\3\2\2\2\u0153\u0151\3")
        buf.write("\2\2\2\u0154\u015f\5x=\2\u0155\u0157\5\u0126\u0094\2\u0156")
        buf.write("\u0155\3\2\2\2\u0157\u0158\3\2\2\2\u0158\u0156\3\2\2\2")
        buf.write("\u0158\u0159\3\2\2\2\u0159\u015b\3\2\2\2\u015a\u015c\5")
        buf.write("x=\2\u015b\u015a\3\2\2\2\u015b\u015c\3\2\2\2\u015c\u015e")
        buf.write("\3\2\2\2\u015d\u0156\3\2\2\2\u015e\u0161\3\2\2\2\u015f")
        buf.write("\u015d\3\2\2\2\u015f\u0160\3\2\2\2\u0160\u0163\3\2\2\2")
        buf.write("\u0161\u015f\3\2\2\2\u0162\u0154\3\2\2\2\u0162\u0163\3")
        buf.write("\2\2\2\u0163\u0164\3\2\2\2\u0164\u0165\7\2\2\3\u0165\5")
        buf.write("\3\2\2\2\u0166\u0168\5\b\5\2\u0167\u0166\3\2\2\2\u0167")
        buf.write("\u0168\3\2\2\2\u0168\u0169\3\2\2\2\u0169\u016a\5\f\7\2")
        buf.write("\u016a\u016b\5\16\b\2\u016b\7\3\2\2\2\u016c\u016e\5\n")
        buf.write("\6\2\u016d\u016c\3\2\2\2\u016e\u016f\3\2\2\2\u016f\u016d")
        buf.write("\3\2\2\2\u016f\u0170\3\2\2\2\u0170\t\3\2\2\2\u0171\u0172")
        buf.write("\7:\2\2\u0172\u017c\7\33\2\2\u0173\u0175\7\r\2\2\u0174")
        buf.write("\u0176\5\u011e\u0090\2\u0175\u0174\3\2\2\2\u0176\u0177")
        buf.write("\3\2\2\2\u0177\u0175\3\2\2\2\u0177\u0178\3\2\2\2\u0178")
        buf.write("\u0179\3\2\2\2\u0179\u017a\7\16\2\2\u017a\u017d\3\2\2")
        buf.write("\2\u017b\u017d\5\u011e\u0090\2\u017c\u0173\3\2\2\2\u017c")
        buf.write("\u017b\3\2\2\2\u017d\u017f\3\2\2\2\u017e\u0180\5\u0124")
        buf.write("\u0093\2\u017f\u017e\3\2\2\2\u017f\u0180\3\2\2\2\u0180")
        buf.write("\u0182\3\2\2\2\u0181\u0171\3\2\2\2\u0182\u0183\3\2\2\2")
        buf.write("\u0183\u0181\3\2\2\2\u0183\u0184\3\2\2\2\u0184\13\3\2")
        buf.write("\2\2\u0185\u0187\5\u00fe\u0080\2\u0186\u0185\3\2\2\2\u0186")
        buf.write("\u0187\3\2\2\2\u0187\u0188\3\2\2\2\u0188\u0189\7;\2\2")
        buf.write("\u0189\u018b\5\u0120\u0091\2\u018a\u018c\5\u0124\u0093")
        buf.write("\2\u018b\u018a\3\2\2\2\u018b\u018c\3\2\2\2\u018c\u018e")
        buf.write("\3\2\2\2\u018d\u0186\3\2\2\2\u018d\u018e\3\2\2\2\u018e")
        buf.write("\r\3\2\2\2\u018f\u0191\5\20\t\2\u0190\u018f\3\2\2\2\u0191")
        buf.write("\u0194\3\2\2\2\u0192\u0190\3\2\2\2\u0192\u0193\3\2\2\2")
        buf.write("\u0193\17\3\2\2\2\u0194\u0192\3\2\2\2\u0195\u0196\7<\2")
        buf.write("\2\u0196\u019a\5\u0120\u0091\2\u0197\u0198\7\t\2\2\u0198")
        buf.write("\u019b\7\21\2\2\u0199\u019b\5\22\n\2\u019a\u0197\3\2\2")
        buf.write("\2\u019a\u0199\3\2\2\2\u019a\u019b\3\2\2\2\u019b\u019d")
        buf.write("\3\2\2\2\u019c\u019e\5\u0124\u0093\2\u019d\u019c\3\2\2")
        buf.write("\2\u019d\u019e\3\2\2\2\u019e\21\3\2\2\2\u019f\u01a0\7")
        buf.write("Y\2\2\u01a0\u01a1\5\u0122\u0092\2\u01a1\23\3\2\2\2\u01a2")
        buf.write("\u01a8\5\26\f\2\u01a3\u01a8\5B\"\2\u01a4\u01a8\5\66\34")
        buf.write("\2\u01a5\u01a8\5F$\2\u01a6\u01a8\5P)\2\u01a7\u01a2\3\2")
        buf.write("\2\2\u01a7\u01a3\3\2\2\2\u01a7\u01a4\3\2\2\2\u01a7\u01a5")
        buf.write("\3\2\2\2\u01a7\u01a6\3\2\2\2\u01a8\25\3\2\2\2\u01a9\u01ab")
        buf.write("\5\u00fe\u0080\2\u01aa\u01a9\3\2\2\2\u01aa\u01ab\3\2\2")
        buf.write("\2\u01ab\u01ac\3\2\2\2\u01ac\u01b0\t\2\2\2\u01ad\u01af")
        buf.write("\7\7\2\2\u01ae\u01ad\3\2\2\2\u01af\u01b2\3\2\2\2\u01b0")
        buf.write("\u01ae\3\2\2\2\u01b0\u01b1\3\2\2\2\u01b1\u01b3\3\2\2\2")
        buf.write("\u01b2\u01b0\3\2\2\2\u01b3\u01bb\5\u0122\u0092\2\u01b4")
        buf.write("\u01b6\7\7\2\2\u01b5\u01b4\3\2\2\2\u01b6\u01b9\3\2\2\2")
        buf.write("\u01b7\u01b5\3\2\2\2\u01b7\u01b8\3\2\2\2\u01b8\u01ba\3")
        buf.write("\2\2\2\u01b9\u01b7\3\2\2\2\u01ba\u01bc\5R*\2\u01bb\u01b7")
        buf.write("\3\2\2\2\u01bb\u01bc\3\2\2\2\u01bc\u01c4\3\2\2\2\u01bd")
        buf.write("\u01bf\7\7\2\2\u01be\u01bd\3\2\2\2\u01bf\u01c2\3\2\2\2")
        buf.write("\u01c0\u01be\3\2\2\2\u01c0\u01c1\3\2\2\2\u01c1\u01c3\3")
        buf.write("\2\2\2\u01c2\u01c0\3\2\2\2\u01c3\u01c5\5\30\r\2\u01c4")
        buf.write("\u01c0\3\2\2\2\u01c4\u01c5\3\2\2\2\u01c5\u01d4\3\2\2\2")
        buf.write("\u01c6\u01c8\7\7\2\2\u01c7\u01c6\3\2\2\2\u01c8\u01cb\3")
        buf.write("\2\2\2\u01c9\u01c7\3\2\2\2\u01c9\u01ca\3\2\2\2\u01ca\u01cc")
        buf.write("\3\2\2\2\u01cb\u01c9\3\2\2\2\u01cc\u01d0\7\33\2\2\u01cd")
        buf.write("\u01cf\7\7\2\2\u01ce\u01cd\3\2\2\2\u01cf\u01d2\3\2\2\2")
        buf.write("\u01d0\u01ce\3\2\2\2\u01d0\u01d1\3\2\2\2\u01d1\u01d3\3")
        buf.write("\2\2\2\u01d2\u01d0\3\2\2\2\u01d3\u01d5\5\36\20\2\u01d4")
        buf.write("\u01c9\3\2\2\2\u01d4\u01d5\3\2\2\2\u01d5\u01dd\3\2\2\2")
        buf.write("\u01d6\u01d8\7\7\2\2\u01d7\u01d6\3\2\2\2\u01d8\u01db\3")
        buf.write("\2\2\2\u01d9\u01d7\3\2\2\2\u01d9\u01da\3\2\2\2\u01da\u01dc")
        buf.write("\3\2\2\2\u01db\u01d9\3\2\2\2\u01dc\u01de\5j\66\2\u01dd")
        buf.write("\u01d9\3\2\2\2\u01dd\u01de\3\2\2\2\u01de\u01ed\3\2\2\2")
        buf.write("\u01df\u01e1\7\7\2\2\u01e0\u01df\3\2\2\2\u01e1\u01e4\3")
        buf.write("\2\2\2\u01e2\u01e0\3\2\2\2\u01e2\u01e3\3\2\2\2\u01e3\u01e5")
        buf.write("\3\2\2\2\u01e4\u01e2\3\2\2\2\u01e5\u01ee\5&\24\2\u01e6")
        buf.write("\u01e8\7\7\2\2\u01e7\u01e6\3\2\2\2\u01e8\u01eb\3\2\2\2")
        buf.write("\u01e9\u01e7\3\2\2\2\u01e9\u01ea\3\2\2\2\u01ea\u01ec\3")
        buf.write("\2\2\2\u01eb\u01e9\3\2\2\2\u01ec\u01ee\5\60\31\2\u01ed")
        buf.write("\u01e2\3\2\2\2\u01ed\u01e9\3\2\2\2\u01ed\u01ee\3\2\2\2")
        buf.write("\u01ee\27\3\2\2\2\u01ef\u01f1\5\u00fe\u0080\2\u01f0\u01ef")
        buf.write("\3\2\2\2\u01f0\u01f1\3\2\2\2\u01f1\u01f9\3\2\2\2\u01f2")
        buf.write("\u01f6\7D\2\2\u01f3\u01f5\7\7\2\2\u01f4\u01f3\3\2\2\2")
        buf.write("\u01f5\u01f8\3\2\2\2\u01f6\u01f4\3\2\2\2\u01f6\u01f7\3")
        buf.write("\2\2\2\u01f7\u01fa\3\2\2\2\u01f8\u01f6\3\2\2\2\u01f9\u01f2")
        buf.write("\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa\u01fb\3\2\2\2\u01fb")
        buf.write("\u01fc\5\32\16\2\u01fc\31\3\2\2\2\u01fd\u0209\7\13\2\2")
        buf.write("\u01fe\u0203\5\34\17\2\u01ff\u0200\7\n\2\2\u0200\u0202")
        buf.write("\5\34\17\2\u0201\u01ff\3\2\2\2\u0202\u0205\3\2\2\2\u0203")
        buf.write("\u0201\3\2\2\2\u0203\u0204\3\2\2\2\u0204\u0207\3\2\2\2")
        buf.write("\u0205\u0203\3\2\2\2\u0206\u0208\7\n\2\2\u0207\u0206\3")
        buf.write("\2\2\2\u0207\u0208\3\2\2\2\u0208\u020a\3\2\2\2\u0209\u01fe")
        buf.write("\3\2\2\2\u0209\u020a\3\2\2\2\u020a\u020b\3\2\2\2\u020b")
        buf.write("\u020c\7\f\2\2\u020c\33\3\2\2\2\u020d\u020f\5\u00fe\u0080")
        buf.write("\2\u020e\u020d\3\2\2\2\u020e\u020f\3\2\2\2\u020f\u0211")
        buf.write("\3\2\2\2\u0210\u0212\t\3\2\2\u0211\u0210\3\2\2\2\u0211")
        buf.write("\u0212\3\2\2\2\u0212\u0213\3\2\2\2\u0213\u0214\5\u0122")
        buf.write("\u0092\2\u0214\u0215\7\33\2\2\u0215\u0218\5V,\2\u0216")
        buf.write("\u0217\7\35\2\2\u0217\u0219\5x=\2\u0218\u0216\3\2\2\2")
        buf.write("\u0218\u0219\3\2\2\2\u0219\35\3\2\2\2\u021a\u021c\5\u0116")
        buf.write("\u008c\2\u021b\u021a\3\2\2\2\u021c\u021f\3\2\2\2\u021d")
        buf.write("\u021b\3\2\2\2\u021d\u021e\3\2\2\2\u021e\u0220\3\2\2\2")
        buf.write("\u021f\u021d\3\2\2\2\u0220\u0237\5 \21\2\u0221\u0223\7")
        buf.write("\7\2\2\u0222\u0221\3\2\2\2\u0223\u0226\3\2\2\2\u0224\u0222")
        buf.write("\3\2\2\2\u0224\u0225\3\2\2\2\u0225\u0227\3\2\2\2\u0226")
        buf.write("\u0224\3\2\2\2\u0227\u022b\7\n\2\2\u0228\u022a\7\7\2\2")
        buf.write("\u0229\u0228\3\2\2\2\u022a\u022d\3\2\2\2\u022b\u0229\3")
        buf.write("\2\2\2\u022b\u022c\3\2\2\2\u022c\u0231\3\2\2\2\u022d\u022b")
        buf.write("\3\2\2\2\u022e\u0230\5\u0116\u008c\2\u022f\u022e\3\2\2")
        buf.write("\2\u0230\u0233\3\2\2\2\u0231\u022f\3\2\2\2\u0231\u0232")
        buf.write("\3\2\2\2\u0232\u0234\3\2\2\2\u0233\u0231\3\2\2\2\u0234")
        buf.write("\u0236\5 \21\2\u0235\u0224\3\2\2\2\u0236\u0239\3\2\2\2")
        buf.write("\u0237\u0235\3\2\2\2\u0237\u0238\3\2\2\2\u0238\37\3\2")
        buf.write("\2\2\u0239\u0237\3\2\2\2\u023a\u023e\5\"\22\2\u023b\u023e")
        buf.write("\5d\63\2\u023c\u023e\5$\23\2\u023d\u023a\3\2\2\2\u023d")
        buf.write("\u023b\3\2\2\2\u023d\u023c\3\2\2\2\u023e!\3\2\2\2\u023f")
        buf.write("\u0240\5d\63\2\u0240\u0241\5\u0098M\2\u0241#\3\2\2\2\u0242")
        buf.write("\u0246\5d\63\2\u0243\u0245\7\7\2\2\u0244\u0243\3\2\2\2")
        buf.write("\u0245\u0248\3\2\2\2\u0246\u0244\3\2\2\2\u0246\u0247\3")
        buf.write("\2\2\2\u0247\u0249\3\2\2\2\u0248\u0246\3\2\2\2\u0249\u024d")
        buf.write("\7E\2\2\u024a\u024c\7\7\2\2\u024b\u024a\3\2\2\2\u024c")
        buf.write("\u024f\3\2\2\2\u024d\u024b\3\2\2\2\u024d\u024e\3\2\2\2")
        buf.write("\u024e\u0250\3\2\2\2\u024f\u024d\3\2\2\2\u0250\u0251\5")
        buf.write("x=\2\u0251%\3\2\2\2\u0252\u0256\7\17\2\2\u0253\u0255\7")
        buf.write("\7\2\2\u0254\u0253\3\2\2\2\u0255\u0258\3\2\2\2\u0256\u0254")
        buf.write("\3\2\2\2\u0256\u0257\3\2\2\2\u0257\u025c\3\2\2\2\u0258")
        buf.write("\u0256\3\2\2\2\u0259\u025b\5(\25\2\u025a\u0259\3\2\2\2")
        buf.write("\u025b\u025e\3\2\2\2\u025c\u025a\3\2\2\2\u025c\u025d\3")
        buf.write("\2\2\2\u025d\u0262\3\2\2\2\u025e\u025c\3\2\2\2\u025f\u0261")
        buf.write("\7\7\2\2\u0260\u025f\3\2\2\2\u0261\u0264\3\2\2\2\u0262")
        buf.write("\u0260\3\2\2\2\u0262\u0263\3\2\2\2\u0263\u0265\3\2\2\2")
        buf.write("\u0264\u0262\3\2\2\2\u0265\u0266\7\20\2\2\u0266\'\3\2")
        buf.write("\2\2\u0267\u0270\5\26\f\2\u0268\u0270\5\66\34\2\u0269")
        buf.write("\u0270\5B\"\2\u026a\u0270\5D#\2\u026b\u0270\5F$\2\u026c")
        buf.write("\u0270\5*\26\2\u026d\u0270\5,\27\2\u026e\u0270\5P)\2\u026f")
        buf.write("\u0267\3\2\2\2\u026f\u0268\3\2\2\2\u026f\u0269\3\2\2\2")
        buf.write("\u026f\u026a\3\2\2\2\u026f\u026b\3\2\2\2\u026f\u026c\3")
        buf.write("\2\2\2\u026f\u026d\3\2\2\2\u026f\u026e\3\2\2\2\u0270\u0272")
        buf.write("\3\2\2\2\u0271\u0273\5\u0126\u0094\2\u0272\u0271\3\2\2")
        buf.write("\2\u0273\u0274\3\2\2\2\u0274\u0272\3\2\2\2\u0274\u0275")
        buf.write("\3\2\2\2\u0275)\3\2\2\2\u0276\u027a\7G\2\2\u0277\u0279")
        buf.write("\7\7\2\2\u0278\u0277\3\2\2\2\u0279\u027c\3\2\2\2\u027a")
        buf.write("\u0278\3\2\2\2\u027a\u027b\3\2\2\2\u027b\u027d\3\2\2\2")
        buf.write("\u027c\u027a\3\2\2\2\u027d\u027e\5n8\2\u027e+\3\2\2\2")
        buf.write("\u027f\u0281\5\u00fe\u0080\2\u0280\u027f\3\2\2\2\u0280")
        buf.write("\u0281\3\2\2\2\u0281\u0282\3\2\2\2\u0282\u0286\7D\2\2")
        buf.write("\u0283\u0285\7\7\2\2\u0284\u0283\3\2\2\2\u0285\u0288\3")
        buf.write("\2\2\2\u0286\u0284\3\2\2\2\u0286\u0287\3\2\2\2\u0287\u0289")
        buf.write("\3\2\2\2\u0288\u0286\3\2\2\2\u0289\u0298\58\35\2\u028a")
        buf.write("\u028c\7\7\2\2\u028b\u028a\3\2\2\2\u028c\u028f\3\2\2\2")
        buf.write("\u028d\u028b\3\2\2\2\u028d\u028e\3\2\2\2\u028e\u0290\3")
        buf.write("\2\2\2\u028f\u028d\3\2\2\2\u0290\u0294\7\33\2\2\u0291")
        buf.write("\u0293\7\7\2\2\u0292\u0291\3\2\2\2\u0293\u0296\3\2\2\2")
        buf.write("\u0294\u0292\3\2\2\2\u0294\u0295\3\2\2\2\u0295\u0297\3")
        buf.write("\2\2\2\u0296\u0294\3\2\2\2\u0297\u0299\5.\30\2\u0298\u028d")
        buf.write("\3\2\2\2\u0298\u0299\3\2\2\2\u0299\u029d\3\2\2\2\u029a")
        buf.write("\u029c\7\7\2\2\u029b\u029a\3\2\2\2\u029c\u029f\3\2\2\2")
        buf.write("\u029d\u029b\3\2\2\2\u029d\u029e\3\2\2\2\u029e\u02a1\3")
        buf.write("\2\2\2\u029f\u029d\3\2\2\2\u02a0\u02a2\5n8\2\u02a1\u02a0")
        buf.write("\3\2\2\2\u02a1\u02a2\3\2\2\2\u02a2-\3\2\2\2\u02a3\u02a7")
        buf.write("\7H\2\2\u02a4\u02a6\7\7\2\2\u02a5\u02a4\3\2\2\2\u02a6")
        buf.write("\u02a9\3\2\2\2\u02a7\u02a5\3\2\2\2\u02a7\u02a8\3\2\2\2")
        buf.write("\u02a8\u02aa\3\2\2\2\u02a9\u02a7\3\2\2\2\u02aa\u02b4\5")
        buf.write("\u009eP\2\u02ab\u02af\7I\2\2\u02ac\u02ae\7\7\2\2\u02ad")
        buf.write("\u02ac\3\2\2\2\u02ae\u02b1\3\2\2\2\u02af\u02ad\3\2\2\2")
        buf.write("\u02af\u02b0\3\2\2\2\u02b0\u02b2\3\2\2\2\u02b1\u02af\3")
        buf.write("\2\2\2\u02b2\u02b4\5\u009eP\2\u02b3\u02a3\3\2\2\2\u02b3")
        buf.write("\u02ab\3\2\2\2\u02b4/\3\2\2\2\u02b5\u02b9\7\17\2\2\u02b6")
        buf.write("\u02b8\7\7\2\2\u02b7\u02b6\3\2\2\2\u02b8\u02bb\3\2\2\2")
        buf.write("\u02b9\u02b7\3\2\2\2\u02b9\u02ba\3\2\2\2\u02ba\u02bd\3")
        buf.write("\2\2\2\u02bb\u02b9\3\2\2\2\u02bc\u02be\5\62\32\2\u02bd")
        buf.write("\u02bc\3\2\2\2\u02bd\u02be\3\2\2\2\u02be\u02d2\3\2\2\2")
        buf.write("\u02bf\u02c1\7\7\2\2\u02c0\u02bf\3\2\2\2\u02c1\u02c4\3")
        buf.write("\2\2\2\u02c2\u02c0\3\2\2\2\u02c2\u02c3\3\2\2\2\u02c3\u02c5")
        buf.write("\3\2\2\2\u02c4\u02c2\3\2\2\2\u02c5\u02c9\7\34\2\2\u02c6")
        buf.write("\u02c8\7\7\2\2\u02c7\u02c6\3\2\2\2\u02c8\u02cb\3\2\2\2")
        buf.write("\u02c9\u02c7\3\2\2\2\u02c9\u02ca\3\2\2\2\u02ca\u02cf\3")
        buf.write("\2\2\2\u02cb\u02c9\3\2\2\2\u02cc\u02ce\5(\25\2\u02cd\u02cc")
        buf.write("\3\2\2\2\u02ce\u02d1\3\2\2\2\u02cf\u02cd\3\2\2\2\u02cf")
        buf.write("\u02d0\3\2\2\2\u02d0\u02d3\3\2\2\2\u02d1\u02cf\3\2\2\2")
        buf.write("\u02d2\u02c2\3\2\2\2\u02d2\u02d3\3\2\2\2\u02d3\u02d7\3")
        buf.write("\2\2\2\u02d4\u02d6\7\7\2\2\u02d5\u02d4\3\2\2\2\u02d6\u02d9")
        buf.write("\3\2\2\2\u02d7\u02d5\3\2\2\2\u02d7\u02d8\3\2\2\2\u02d8")
        buf.write("\u02da\3\2\2\2\u02d9\u02d7\3\2\2\2\u02da\u02db\7\20\2")
        buf.write("\2\u02db\61\3\2\2\2\u02dc\u02e0\5\64\33\2\u02dd\u02df")
        buf.write("\7\7\2\2\u02de\u02dd\3\2\2\2\u02df\u02e2\3\2\2\2\u02e0")
        buf.write("\u02de\3\2\2\2\u02e0\u02e1\3\2\2\2\u02e1\u02e4\3\2\2\2")
        buf.write("\u02e2\u02e0\3\2\2\2\u02e3\u02dc\3\2\2\2\u02e4\u02e5\3")
        buf.write("\2\2\2\u02e5\u02e3\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6\u02e8")
        buf.write("\3\2\2\2\u02e7\u02e9\7\34\2\2\u02e8\u02e7\3\2\2\2\u02e8")
        buf.write("\u02e9\3\2\2\2\u02e9\63\3\2\2\2\u02ea\u02ec\5\u0116\u008c")
        buf.write("\2\u02eb\u02ea\3\2\2\2\u02ec\u02ef\3\2\2\2\u02ed\u02eb")
        buf.write("\3\2\2\2\u02ed\u02ee\3\2\2\2\u02ee\u02f0\3\2\2\2\u02ef")
        buf.write("\u02ed\3\2\2\2\u02f0\u02f8\5\u0122\u0092\2\u02f1\u02f3")
        buf.write("\7\7\2\2\u02f2\u02f1\3\2\2\2\u02f3\u02f6\3\2\2\2\u02f4")
        buf.write("\u02f2\3\2\2\2\u02f4\u02f5\3\2\2\2\u02f5\u02f7\3\2\2\2")
        buf.write("\u02f6\u02f4\3\2\2\2\u02f7\u02f9\5\u009eP\2\u02f8\u02f4")
        buf.write("\3\2\2\2\u02f8\u02f9\3\2\2\2\u02f9\u0301\3\2\2\2\u02fa")
        buf.write("\u02fc\7\7\2\2\u02fb\u02fa\3\2\2\2\u02fc\u02ff\3\2\2\2")
        buf.write("\u02fd\u02fb\3\2\2\2\u02fd\u02fe\3\2\2\2\u02fe\u0300\3")
        buf.write("\2\2\2\u02ff\u02fd\3\2\2\2\u0300\u0302\5&\24\2\u0301\u02fd")
        buf.write("\3\2\2\2\u0301\u0302\3\2\2\2\u0302\u030a\3\2\2\2\u0303")
        buf.write("\u0305\7\7\2\2\u0304\u0303\3\2\2\2\u0305\u0308\3\2\2\2")
        buf.write("\u0306\u0304\3\2\2\2\u0306\u0307\3\2\2\2\u0307\u0309\3")
        buf.write("\2\2\2\u0308\u0306\3\2\2\2\u0309\u030b\7\n\2\2\u030a\u0306")
        buf.write("\3\2\2\2\u030a\u030b\3\2\2\2\u030b\65\3\2\2\2\u030c\u030e")
        buf.write("\5\u00fe\u0080\2\u030d\u030c\3\2\2\2\u030d\u030e\3\2\2")
        buf.write("\2\u030e\u030f\3\2\2\2\u030f\u031f\7?\2\2\u0310\u0312")
        buf.write("\7\7\2\2\u0311\u0310\3\2\2\2\u0312\u0315\3\2\2\2\u0313")
        buf.write("\u0311\3\2\2\2\u0313\u0314\3\2\2\2\u0314\u0316\3\2\2\2")
        buf.write("\u0315\u0313\3\2\2\2\u0316\u031a\5V,\2\u0317\u0319\7\7")
        buf.write("\2\2\u0318\u0317\3\2\2\2\u0319\u031c\3\2\2\2\u031a\u0318")
        buf.write("\3\2\2\2\u031a\u031b\3\2\2\2\u031b\u031d\3\2\2\2\u031c")
        buf.write("\u031a\3\2\2\2\u031d\u031e\7\t\2\2\u031e\u0320\3\2\2\2")
        buf.write("\u031f\u0313\3\2\2\2\u031f\u0320\3\2\2\2\u0320\u0328\3")
        buf.write("\2\2\2\u0321\u0323\7\7\2\2\u0322\u0321\3\2\2\2\u0323\u0326")
        buf.write("\3\2\2\2\u0324\u0322\3\2\2\2\u0324\u0325\3\2\2\2\u0325")
        buf.write("\u0327\3\2\2\2\u0326\u0324\3\2\2\2\u0327\u0329\5R*\2\u0328")
        buf.write("\u0324\3\2\2\2\u0328\u0329\3\2\2\2\u0329\u0339\3\2\2\2")
        buf.write("\u032a\u032c\7\7\2\2\u032b\u032a\3\2\2\2\u032c\u032f\3")
        buf.write("\2\2\2\u032d\u032b\3\2\2\2\u032d\u032e\3\2\2\2\u032e\u0330")
        buf.write("\3\2\2\2\u032f\u032d\3\2\2\2\u0330\u0334\5> \2\u0331\u0333")
        buf.write("\7\7\2\2\u0332\u0331\3\2\2\2\u0333\u0336\3\2\2\2\u0334")
        buf.write("\u0332\3\2\2\2\u0334\u0335\3\2\2\2\u0335\u0337\3\2\2\2")
        buf.write("\u0336\u0334\3\2\2\2\u0337\u0338\7\t\2\2\u0338\u033a\3")
        buf.write("\2\2\2\u0339\u032d\3\2\2\2\u0339\u033a\3\2\2\2\u033a\u0342")
        buf.write("\3\2\2\2\u033b\u033d\7\7\2\2\u033c\u033b\3\2\2\2\u033d")
        buf.write("\u0340\3\2\2\2\u033e\u033c\3\2\2\2\u033e\u033f\3\2\2\2")
        buf.write("\u033f\u0341\3\2\2\2\u0340\u033e\3\2\2\2\u0341\u0343\5")
        buf.write("\u0120\u0091\2\u0342\u033e\3\2\2\2\u0342\u0343\3\2\2\2")
        buf.write("\u0343\u0347\3\2\2\2\u0344\u0346\7\7\2\2\u0345\u0344\3")
        buf.write("\2\2\2\u0346\u0349\3\2\2\2\u0347\u0345\3\2\2\2\u0347\u0348")
        buf.write("\3\2\2\2\u0348\u034a\3\2\2\2\u0349\u0347\3\2\2\2\u034a")
        buf.write("\u0359\58\35\2\u034b\u034d\7\7\2\2\u034c\u034b\3\2\2\2")
        buf.write("\u034d\u0350\3\2\2\2\u034e\u034c\3\2\2\2\u034e\u034f\3")
        buf.write("\2\2\2\u034f\u0351\3\2\2\2\u0350\u034e\3\2\2\2\u0351\u0355")
        buf.write("\7\33\2\2\u0352\u0354\7\7\2\2\u0353\u0352\3\2\2\2\u0354")
        buf.write("\u0357\3\2\2\2\u0355\u0353\3\2\2\2\u0355\u0356\3\2\2\2")
        buf.write("\u0356\u0358\3\2\2\2\u0357\u0355\3\2\2\2\u0358\u035a\5")
        buf.write("V,\2\u0359\u034e\3\2\2\2\u0359\u035a\3\2\2\2\u035a\u0362")
        buf.write("\3\2\2\2\u035b\u035d\7\7\2\2\u035c\u035b\3\2\2\2\u035d")
        buf.write("\u0360\3\2\2\2\u035e\u035c\3\2\2\2\u035e\u035f\3\2\2\2")
        buf.write("\u035f\u0361\3\2\2\2\u0360\u035e\3\2\2\2\u0361\u0363\5")
        buf.write("j\66\2\u0362\u035e\3\2\2\2\u0362\u0363\3\2\2\2\u0363\u036b")
        buf.write("\3\2\2\2\u0364\u0366\7\7\2\2\u0365\u0364\3\2\2\2\u0366")
        buf.write("\u0369\3\2\2\2\u0367\u0365\3\2\2\2\u0367\u0368\3\2\2\2")
        buf.write("\u0368\u036a\3\2\2\2\u0369\u0367\3\2\2\2\u036a\u036c\5")
        buf.write("@!\2\u036b\u0367\3\2\2\2\u036b\u036c\3\2\2\2\u036c\67")
        buf.write("\3\2\2\2\u036d\u0379\7\13\2\2\u036e\u0373\5:\36\2\u036f")
        buf.write("\u0370\7\n\2\2\u0370\u0372\5:\36\2\u0371\u036f\3\2\2\2")
        buf.write("\u0372\u0375\3\2\2\2\u0373\u0371\3\2\2\2\u0373\u0374\3")
        buf.write("\2\2\2\u0374\u0377\3\2\2\2\u0375\u0373\3\2\2\2\u0376\u0378")
        buf.write("\7\n\2\2\u0377\u0376\3\2\2\2\u0377\u0378\3\2\2\2\u0378")
        buf.write("\u037a\3\2\2\2\u0379\u036e\3\2\2\2\u0379\u037a\3\2\2\2")
        buf.write("\u037a\u037b\3\2\2\2\u037b\u037c\7\f\2\2\u037c9\3\2\2")
        buf.write("\2\u037d\u037f\5\u00fe\u0080\2\u037e\u037d\3\2\2\2\u037e")
        buf.write("\u037f\3\2\2\2\u037f\u0380\3\2\2\2\u0380\u0383\5<\37\2")
        buf.write("\u0381\u0382\7\35\2\2\u0382\u0384\5x=\2\u0383\u0381\3")
        buf.write("\2\2\2\u0383\u0384\3\2\2\2\u0384;\3\2\2\2\u0385\u0386")
        buf.write("\5\u0122\u0092\2\u0386\u0387\7\33\2\2\u0387\u0388\5V,")
        buf.write("\2\u0388=\3\2\2\2\u0389\u038b\5X-\2\u038a\u0389\3\2\2")
        buf.write("\2\u038a\u038b\3\2\2\2\u038b\u038f\3\2\2\2\u038c\u0390")
        buf.write("\5Z.\2\u038d\u0390\5\\/\2\u038e\u0390\5^\60\2\u038f\u038c")
        buf.write("\3\2\2\2\u038f\u038d\3\2\2\2\u038f\u038e\3\2\2\2\u0390")
        buf.write("?\3\2\2\2\u0391\u039b\5n8\2\u0392\u0396\7\35\2\2\u0393")
        buf.write("\u0395\7\7\2\2\u0394\u0393\3\2\2\2\u0395\u0398\3\2\2\2")
        buf.write("\u0396\u0394\3\2\2\2\u0396\u0397\3\2\2\2\u0397\u0399\3")
        buf.write("\2\2\2\u0398\u0396\3\2\2\2\u0399\u039b\5x=\2\u039a\u0391")
        buf.write("\3\2\2\2\u039a\u0392\3\2\2\2\u039bA\3\2\2\2\u039c\u039e")
        buf.write("\5\u00fe\u0080\2\u039d\u039c\3\2\2\2\u039d\u039e\3\2\2")
        buf.write("\2\u039e\u039f\3\2\2\2\u039f\u03a3\7@\2\2\u03a0\u03a2")
        buf.write("\7\7\2\2\u03a1\u03a0\3\2\2\2\u03a2\u03a5\3\2\2\2\u03a3")
        buf.write("\u03a1\3\2\2\2\u03a3\u03a4\3\2\2\2\u03a4\u03a6\3\2\2\2")
        buf.write("\u03a5\u03a3\3\2\2\2\u03a6\u03ae\5\u0122\u0092\2\u03a7")
        buf.write("\u03a9\7\7\2\2\u03a8\u03a7\3\2\2\2\u03a9\u03ac\3\2\2\2")
        buf.write("\u03aa\u03a8\3\2\2\2\u03aa\u03ab\3\2\2\2\u03ab\u03ad\3")
        buf.write("\2\2\2\u03ac\u03aa\3\2\2\2\u03ad\u03af\5\30\r\2\u03ae")
        buf.write("\u03aa\3\2\2\2\u03ae\u03af\3\2\2\2\u03af\u03be\3\2\2\2")
        buf.write("\u03b0\u03b2\7\7\2\2\u03b1\u03b0\3\2\2\2\u03b2\u03b5\3")
        buf.write("\2\2\2\u03b3\u03b1\3\2\2\2\u03b3\u03b4\3\2\2\2\u03b4\u03b6")
        buf.write("\3\2\2\2\u03b5\u03b3\3\2\2\2\u03b6\u03ba\7\33\2\2\u03b7")
        buf.write("\u03b9\7\7\2\2\u03b8\u03b7\3\2\2\2\u03b9\u03bc\3\2\2\2")
        buf.write("\u03ba\u03b8\3\2\2\2\u03ba\u03bb\3\2\2\2\u03bb\u03bd\3")
        buf.write("\2\2\2\u03bc\u03ba\3\2\2\2\u03bd\u03bf\5\36\20\2\u03be")
        buf.write("\u03b3\3\2\2\2\u03be\u03bf\3\2\2\2\u03bf\u03c7\3\2\2\2")
        buf.write("\u03c0\u03c2\7\7\2\2\u03c1\u03c0\3\2\2\2\u03c2\u03c5\3")
        buf.write("\2\2\2\u03c3\u03c1\3\2\2\2\u03c3\u03c4\3\2\2\2\u03c4\u03c6")
        buf.write("\3\2\2\2\u03c5\u03c3\3\2\2\2\u03c6\u03c8\5&\24\2\u03c7")
        buf.write("\u03c3\3\2\2\2\u03c7\u03c8\3\2\2\2\u03c8C\3\2\2\2\u03c9")
        buf.write("\u03cb\5\u00fe\u0080\2\u03ca\u03c9\3\2\2\2\u03ca\u03cb")
        buf.write("\3\2\2\2\u03cb\u03cc\3\2\2\2\u03cc\u03d0\7F\2\2\u03cd")
        buf.write("\u03cf\7\7\2\2\u03ce\u03cd\3\2\2\2\u03cf\u03d2\3\2\2\2")
        buf.write("\u03d0\u03ce\3\2\2\2\u03d0\u03d1\3\2\2\2\u03d1\u03d4\3")
        buf.write("\2\2\2\u03d2\u03d0\3\2\2\2\u03d3\u03d5\5\u00fe\u0080\2")
        buf.write("\u03d4\u03d3\3\2\2\2\u03d4\u03d5\3\2\2\2\u03d5\u03d6\3")
        buf.write("\2\2\2\u03d6\u03de\7@\2\2\u03d7\u03d9\7\7\2\2\u03d8\u03d7")
        buf.write("\3\2\2\2\u03d9\u03dc\3\2\2\2\u03da\u03d8\3\2\2\2\u03da")
        buf.write("\u03db\3\2\2\2\u03db\u03dd\3\2\2\2\u03dc\u03da\3\2\2\2")
        buf.write("\u03dd\u03df\5\u0122\u0092\2\u03de\u03da\3\2\2\2\u03de")
        buf.write("\u03df\3\2\2\2\u03df\u03ee\3\2\2\2\u03e0\u03e2\7\7\2\2")
        buf.write("\u03e1\u03e0\3\2\2\2\u03e2\u03e5\3\2\2\2\u03e3\u03e1\3")
        buf.write("\2\2\2\u03e3\u03e4\3\2\2\2\u03e4\u03e6\3\2\2\2\u03e5\u03e3")
        buf.write("\3\2\2\2\u03e6\u03ea\7\33\2\2\u03e7\u03e9\7\7\2\2\u03e8")
        buf.write("\u03e7\3\2\2\2\u03e9\u03ec\3\2\2\2\u03ea\u03e8\3\2\2\2")
        buf.write("\u03ea\u03eb\3\2\2\2\u03eb\u03ed\3\2\2\2\u03ec\u03ea\3")
        buf.write("\2\2\2\u03ed\u03ef\5\36\20\2\u03ee\u03e3\3\2\2\2\u03ee")
        buf.write("\u03ef\3\2\2\2\u03ef\u03f7\3\2\2\2\u03f0\u03f2\7\7\2\2")
        buf.write("\u03f1\u03f0\3\2\2\2\u03f2\u03f5\3\2\2\2\u03f3\u03f1\3")
        buf.write("\2\2\2\u03f3\u03f4\3\2\2\2\u03f4\u03f6\3\2\2\2\u03f5\u03f3")
        buf.write("\3\2\2\2\u03f6\u03f8\5&\24\2\u03f7\u03f3\3\2\2\2\u03f7")
        buf.write("\u03f8\3\2\2\2\u03f8E\3\2\2\2\u03f9\u03fb\5\u00fe\u0080")
        buf.write("\2\u03fa\u03f9\3\2\2\2\u03fa\u03fb\3\2\2\2\u03fb\u03fc")
        buf.write("\3\2\2\2\u03fc\u0404\t\3\2\2\u03fd\u03ff\7\7\2\2\u03fe")
        buf.write("\u03fd\3\2\2\2\u03ff\u0402\3\2\2\2\u0400\u03fe\3\2\2\2")
        buf.write("\u0400\u0401\3\2\2\2\u0401\u0403\3\2\2\2\u0402\u0400\3")
        buf.write("\2\2\2\u0403\u0405\5R*\2\u0404\u0400\3\2\2\2\u0404\u0405")
        buf.write("\3\2\2\2\u0405\u0415\3\2\2\2\u0406\u0408\7\7\2\2\u0407")
        buf.write("\u0406\3\2\2\2\u0408\u040b\3\2\2\2\u0409\u0407\3\2\2\2")
        buf.write("\u0409\u040a\3\2\2\2\u040a\u040c\3\2\2\2\u040b\u0409\3")
        buf.write("\2\2\2\u040c\u0410\5V,\2\u040d\u040f\7\7\2\2\u040e\u040d")
        buf.write("\3\2\2\2\u040f\u0412\3\2\2\2\u0410\u040e\3\2\2\2\u0410")
        buf.write("\u0411\3\2\2\2\u0411\u0413\3\2\2\2\u0412\u0410\3\2\2\2")
        buf.write("\u0413\u0414\7\t\2\2\u0414\u0416\3\2\2\2\u0415\u0409\3")
        buf.write("\2\2\2\u0415\u0416\3\2\2\2\u0416\u041a\3\2\2\2\u0417\u0419")
        buf.write("\7\7\2\2\u0418\u0417\3\2\2\2\u0419\u041c\3\2\2\2\u041a")
        buf.write("\u0418\3\2\2\2\u041a\u041b\3\2\2\2\u041b\u041f\3\2\2\2")
        buf.write("\u041c\u041a\3\2\2\2\u041d\u0420\5H%\2\u041e\u0420\5J")
        buf.write("&\2\u041f\u041d\3\2\2\2\u041f\u041e\3\2\2\2\u0420\u0428")
        buf.write("\3\2\2\2\u0421\u0423\7\7\2\2\u0422\u0421\3\2\2\2\u0423")
        buf.write("\u0426\3\2\2\2\u0424\u0422\3\2\2\2\u0424\u0425\3\2\2\2")
        buf.write("\u0425\u0427\3\2\2\2\u0426\u0424\3\2\2\2\u0427\u0429\5")
        buf.write("j\66\2\u0428\u0424\3\2\2\2\u0428\u0429\3\2\2\2\u0429\u0438")
        buf.write("\3\2\2\2\u042a\u042c\7\7\2\2\u042b\u042a\3\2\2\2\u042c")
        buf.write("\u042f\3\2\2\2\u042d\u042b\3\2\2\2\u042d\u042e\3\2\2\2")
        buf.write("\u042e\u0430\3\2\2\2\u042f\u042d\3\2\2\2\u0430\u0434\t")
        buf.write("\4\2\2\u0431\u0433\7\7\2\2\u0432\u0431\3\2\2\2\u0433\u0436")
        buf.write("\3\2\2\2\u0434\u0432\3\2\2\2\u0434\u0435\3\2\2\2\u0435")
        buf.write("\u0437\3\2\2\2\u0436\u0434\3\2\2\2\u0437\u0439\5x=\2\u0438")
        buf.write("\u042d\3\2\2\2\u0438\u0439\3\2\2\2\u0439\u0452\3\2\2\2")
        buf.write("\u043a\u043c\7\7\2\2\u043b\u043a\3\2\2\2\u043c\u043f\3")
        buf.write("\2\2\2\u043d\u043b\3\2\2\2\u043d\u043e\3\2\2\2\u043e\u0440")
        buf.write("\3\2\2\2\u043f\u043d\3\2\2\2\u0440\u0444\5L\'\2\u0441")
        buf.write("\u0442\5\u0124\u0093\2\u0442\u0443\5N(\2\u0443\u0445\3")
        buf.write("\2\2\2\u0444\u0441\3\2\2\2\u0444\u0445\3\2\2\2\u0445\u0453")
        buf.write("\3\2\2\2\u0446\u0448\7\7\2\2\u0447\u0446\3\2\2\2\u0448")
        buf.write("\u044b\3\2\2\2\u0449\u0447\3\2\2\2\u0449\u044a\3\2\2\2")
        buf.write("\u044a\u044c\3\2\2\2\u044b\u0449\3\2\2\2\u044c\u0450\5")
        buf.write("N(\2\u044d\u044e\5\u0124\u0093\2\u044e\u044f\5L\'\2\u044f")
        buf.write("\u0451\3\2\2\2\u0450\u044d\3\2\2\2\u0450\u0451\3\2\2\2")
        buf.write("\u0451\u0453\3\2\2\2\u0452\u043d\3\2\2\2\u0452\u0449\3")
        buf.write("\2\2\2\u0452\u0453\3\2\2\2\u0453G\3\2\2\2\u0454\u0455")
        buf.write("\7\13\2\2\u0455\u045a\5J&\2\u0456\u0457\7\n\2\2\u0457")
        buf.write("\u0459\5J&\2\u0458\u0456\3\2\2\2\u0459\u045c\3\2\2\2\u045a")
        buf.write("\u0458\3\2\2\2\u045a\u045b\3\2\2\2\u045b\u045d\3\2\2\2")
        buf.write("\u045c\u045a\3\2\2\2\u045d\u045e\7\f\2\2\u045eI\3\2\2")
        buf.write("\2\u045f\u0462\7\u008f\2\2\u0460\u0461\7\33\2\2\u0461")
        buf.write("\u0463\5V,\2\u0462\u0460\3\2\2\2\u0462\u0463\3\2\2\2\u0463")
        buf.write("\u046a\3\2\2\2\u0464\u0467\7\u008e\2\2\u0465\u0466\7\u00ae")
        buf.write("\2\2\u0466\u0468\5V,\2\u0467\u0465\3\2\2\2\u0467\u0468")
        buf.write("\3\2\2\2\u0468\u046a\3\2\2\2\u0469\u045f\3\2\2\2\u0469")
        buf.write("\u0464\3\2\2\2\u046aK\3\2\2\2\u046b\u046d\5\u00fe\u0080")
        buf.write("\2\u046c\u046b\3\2\2\2\u046c\u046d\3\2\2\2\u046d\u046e")
        buf.write("\3\2\2\2\u046e\u049d\7c\2\2\u046f\u0471\5\u00fe\u0080")
        buf.write("\2\u0470\u046f\3\2\2\2\u0470\u0471\3\2\2\2\u0471\u0472")
        buf.write("\3\2\2\2\u0472\u0476\7c\2\2\u0473\u0475\7\7\2\2\u0474")
        buf.write("\u0473\3\2\2\2\u0475\u0478\3\2\2\2\u0476\u0474\3\2\2\2")
        buf.write("\u0476\u0477\3\2\2\2\u0477\u0479\3\2\2\2\u0478\u0476\3")
        buf.write("\2\2\2\u0479\u047a\7\13\2\2\u047a\u0489\7\f\2\2\u047b")
        buf.write("\u047d\7\7\2\2\u047c\u047b\3\2\2\2\u047d\u0480\3\2\2\2")
        buf.write("\u047e\u047c\3\2\2\2\u047e\u047f\3\2\2\2\u047f\u0481\3")
        buf.write("\2\2\2\u0480\u047e\3\2\2\2\u0481\u0485\7\33\2\2\u0482")
        buf.write("\u0484\7\7\2\2\u0483\u0482\3\2\2\2\u0484\u0487\3\2\2\2")
        buf.write("\u0485\u0483\3\2\2\2\u0485\u0486\3\2\2\2\u0486\u0488\3")
        buf.write("\2\2\2\u0487\u0485\3\2\2\2\u0488\u048a\5V,\2\u0489\u047e")
        buf.write("\3\2\2\2\u0489\u048a\3\2\2\2\u048a\u048e\3\2\2\2\u048b")
        buf.write("\u048d\7\7\2\2\u048c\u048b\3\2\2\2\u048d\u0490\3\2\2\2")
        buf.write("\u048e\u048c\3\2\2\2\u048e\u048f\3\2\2\2\u048f\u049a\3")
        buf.write("\2\2\2\u0490\u048e\3\2\2\2\u0491\u049b\5n8\2\u0492\u0496")
        buf.write("\7\35\2\2\u0493\u0495\7\7\2\2\u0494\u0493\3\2\2\2\u0495")
        buf.write("\u0498\3\2\2\2\u0496\u0494\3\2\2\2\u0496\u0497\3\2\2\2")
        buf.write("\u0497\u0499\3\2\2\2\u0498\u0496\3\2\2\2\u0499\u049b\5")
        buf.write("x=\2\u049a\u0491\3\2\2\2\u049a\u0492\3\2\2\2\u049b\u049d")
        buf.write("\3\2\2\2\u049c\u046c\3\2\2\2\u049c\u0470\3\2\2\2\u049d")
        buf.write("M\3\2\2\2\u049e\u04a0\5\u00fe\u0080\2\u049f\u049e\3\2")
        buf.write("\2\2\u049f\u04a0\3\2\2\2\u04a0\u04a1\3\2\2\2\u04a1\u04c2")
        buf.write("\7d\2\2\u04a2\u04a4\5\u00fe\u0080\2\u04a3\u04a2\3\2\2")
        buf.write("\2\u04a3\u04a4\3\2\2\2\u04a4\u04a5\3\2\2\2\u04a5\u04a9")
        buf.write("\7d\2\2\u04a6\u04a8\7\7\2\2\u04a7\u04a6\3\2\2\2\u04a8")
        buf.write("\u04ab\3\2\2\2\u04a9\u04a7\3\2\2\2\u04a9\u04aa\3\2\2\2")
        buf.write("\u04aa\u04ac\3\2\2\2\u04ab\u04a9\3\2\2\2\u04ac\u04b1\7")
        buf.write("\13\2\2\u04ad\u04b0\5\u0116\u008c\2\u04ae\u04b0\5\u0110")
        buf.write("\u0089\2\u04af\u04ad\3\2\2\2\u04af\u04ae\3\2\2\2\u04b0")
        buf.write("\u04b3\3\2\2\2\u04b1\u04af\3\2\2\2\u04b1\u04b2\3\2\2\2")
        buf.write("\u04b2\u04b6\3\2\2\2\u04b3\u04b1\3\2\2\2\u04b4\u04b7\5")
        buf.write("\u0122\u0092\2\u04b5\u04b7\5<\37\2\u04b6\u04b4\3\2\2\2")
        buf.write("\u04b6\u04b5\3\2\2\2\u04b7\u04b8\3\2\2\2\u04b8\u04bc\7")
        buf.write("\f\2\2\u04b9\u04bb\7\7\2\2\u04ba\u04b9\3\2\2\2\u04bb\u04be")
        buf.write("\3\2\2\2\u04bc\u04ba\3\2\2\2\u04bc\u04bd\3\2\2\2\u04bd")
        buf.write("\u04bf\3\2\2\2\u04be\u04bc\3\2\2\2\u04bf\u04c0\5@!\2\u04c0")
        buf.write("\u04c2\3\2\2\2\u04c1\u049f\3\2\2\2\u04c1\u04a3\3\2\2\2")
        buf.write("\u04c2O\3\2\2\2\u04c3\u04c5\5\u00fe\u0080\2\u04c4\u04c3")
        buf.write("\3\2\2\2\u04c4\u04c5\3\2\2\2\u04c5\u04c6\3\2\2\2\u04c6")
        buf.write("\u04ca\7C\2\2\u04c7\u04c9\7\7\2\2\u04c8\u04c7\3\2\2\2")
        buf.write("\u04c9\u04cc\3\2\2\2\u04ca\u04c8\3\2\2\2\u04ca\u04cb\3")
        buf.write("\2\2\2\u04cb\u04cd\3\2\2\2\u04cc\u04ca\3\2\2\2\u04cd\u04d5")
        buf.write("\5\u0122\u0092\2\u04ce\u04d0\7\7\2\2\u04cf\u04ce\3\2\2")
        buf.write("\2\u04d0\u04d3\3\2\2\2\u04d1\u04cf\3\2\2\2\u04d1\u04d2")
        buf.write("\3\2\2\2\u04d2\u04d4\3\2\2\2\u04d3\u04d1\3\2\2\2\u04d4")
        buf.write("\u04d6\5R*\2\u04d5\u04d1\3\2\2\2\u04d5\u04d6\3\2\2\2\u04d6")
        buf.write("\u04da\3\2\2\2\u04d7\u04d9\7\7\2\2\u04d8\u04d7\3\2\2\2")
        buf.write("\u04d9\u04dc\3\2\2\2\u04da\u04d8\3\2\2\2\u04da\u04db\3")
        buf.write("\2\2\2\u04db\u04dd\3\2\2\2\u04dc\u04da\3\2\2\2\u04dd\u04e1")
        buf.write("\7\35\2\2\u04de\u04e0\7\7\2\2\u04df\u04de\3\2\2\2\u04e0")
        buf.write("\u04e3\3\2\2\2\u04e1\u04df\3\2\2\2\u04e1\u04e2\3\2\2\2")
        buf.write("\u04e2\u04e4\3\2\2\2\u04e3\u04e1\3\2\2\2\u04e4\u04e5\5")
        buf.write("V,\2\u04e5Q\3\2\2\2\u04e6\u04ea\7-\2\2\u04e7\u04e9\7\7")
        buf.write("\2\2\u04e8\u04e7\3\2\2\2\u04e9\u04ec\3\2\2\2\u04ea\u04e8")
        buf.write("\3\2\2\2\u04ea\u04eb\3\2\2\2\u04eb\u04ed\3\2\2\2\u04ec")
        buf.write("\u04ea\3\2\2\2\u04ed\u04fe\5T+\2\u04ee\u04f0\7\7\2\2\u04ef")
        buf.write("\u04ee\3\2\2\2\u04f0\u04f3\3\2\2\2\u04f1\u04ef\3\2\2\2")
        buf.write("\u04f1\u04f2\3\2\2\2\u04f2\u04f4\3\2\2\2\u04f3\u04f1\3")
        buf.write("\2\2\2\u04f4\u04f8\7\n\2\2\u04f5\u04f7\7\7\2\2\u04f6\u04f5")
        buf.write("\3\2\2\2\u04f7\u04fa\3\2\2\2\u04f8\u04f6\3\2\2\2\u04f8")
        buf.write("\u04f9\3\2\2\2\u04f9\u04fb\3\2\2\2\u04fa\u04f8\3\2\2\2")
        buf.write("\u04fb\u04fd\5T+\2\u04fc\u04f1\3\2\2\2\u04fd\u0500\3\2")
        buf.write("\2\2\u04fe\u04fc\3\2\2\2\u04fe\u04ff\3\2\2\2\u04ff\u0508")
        buf.write("\3\2\2\2\u0500\u04fe\3\2\2\2\u0501\u0503\7\7\2\2\u0502")
        buf.write("\u0501\3\2\2\2\u0503\u0506\3\2\2\2\u0504\u0502\3\2\2\2")
        buf.write("\u0504\u0505\3\2\2\2\u0505\u0507\3\2\2\2\u0506\u0504\3")
        buf.write("\2\2\2\u0507\u0509\7\n\2\2\u0508\u0504\3\2\2\2\u0508\u0509")
        buf.write("\3\2\2\2\u0509\u050d\3\2\2\2\u050a\u050c\7\7\2\2\u050b")
        buf.write("\u050a\3\2\2\2\u050c\u050f\3\2\2\2\u050d\u050b\3\2\2\2")
        buf.write("\u050d\u050e\3\2\2\2\u050e\u0510\3\2\2\2\u050f\u050d\3")
        buf.write("\2\2\2\u0510\u0511\7.\2\2\u0511S\3\2\2\2\u0512\u0514\5")
        buf.write("\u00fe\u0080\2\u0513\u0512\3\2\2\2\u0513\u0514\3\2\2\2")
        buf.write("\u0514\u0518\3\2\2\2\u0515\u0517\7\7\2\2\u0516\u0515\3")
        buf.write("\2\2\2\u0517\u051a\3\2\2\2\u0518\u0516\3\2\2\2\u0518\u0519")
        buf.write("\3\2\2\2\u0519\u051d\3\2\2\2\u051a\u0518\3\2\2\2\u051b")
        buf.write("\u051e\5\u0122\u0092\2\u051c\u051e\7\21\2\2\u051d\u051b")
        buf.write("\3\2\2\2\u051d\u051c\3\2\2\2\u051e\u052d\3\2\2\2\u051f")
        buf.write("\u0521\7\7\2\2\u0520\u051f\3\2\2\2\u0521\u0524\3\2\2\2")
        buf.write("\u0522\u0520\3\2\2\2\u0522\u0523\3\2\2\2\u0523\u0525\3")
        buf.write("\2\2\2\u0524\u0522\3\2\2\2\u0525\u0529\7\33\2\2\u0526")
        buf.write("\u0528\7\7\2\2\u0527\u0526\3\2\2\2\u0528\u052b\3\2\2\2")
        buf.write("\u0529\u0527\3\2\2\2\u0529\u052a\3\2\2\2\u052a\u052c\3")
        buf.write("\2\2\2\u052b\u0529\3\2\2\2\u052c\u052e\5V,\2\u052d\u0522")
        buf.write("\3\2\2\2\u052d\u052e\3\2\2\2\u052eU\3\2\2\2\u052f\u0531")
        buf.write("\5X-\2\u0530\u052f\3\2\2\2\u0530\u0531\3\2\2\2\u0531\u0536")
        buf.write("\3\2\2\2\u0532\u0537\5`\61\2\u0533\u0537\5Z.\2\u0534\u0537")
        buf.write("\5\\/\2\u0535\u0537\5^\60\2\u0536\u0532\3\2\2\2\u0536")
        buf.write("\u0533\3\2\2\2\u0536\u0534\3\2\2\2\u0536\u0535\3\2\2\2")
        buf.write("\u0537W\3\2\2\2\u0538\u0541\5\u0116\u008c\2\u0539\u053d")
        buf.write("\7x\2\2\u053a\u053c\7\7\2\2\u053b\u053a\3\2\2\2\u053c")
        buf.write("\u053f\3\2\2\2\u053d\u053b\3\2\2\2\u053d\u053e\3\2\2\2")
        buf.write("\u053e\u0541\3\2\2\2\u053f\u053d\3\2\2\2\u0540\u0538\3")
        buf.write("\2\2\2\u0540\u0539\3\2\2\2\u0541\u0542\3\2\2\2\u0542\u0540")
        buf.write("\3\2\2\2\u0542\u0543\3\2\2\2\u0543Y\3\2\2\2\u0544\u0545")
        buf.write("\7\13\2\2\u0545\u0546\5V,\2\u0546\u0547\7\f\2\2\u0547")
        buf.write("[\3\2\2\2\u0548\u054b\5^\60\2\u0549\u054b\5Z.\2\u054a")
        buf.write("\u0548\3\2\2\2\u054a\u0549\3\2\2\2\u054b\u054f\3\2\2\2")
        buf.write("\u054c\u054e\7\7\2\2\u054d\u054c\3\2\2\2\u054e\u0551\3")
        buf.write("\2\2\2\u054f\u054d\3\2\2\2\u054f\u0550\3\2\2\2\u0550\u0553")
        buf.write("\3\2\2\2\u0551\u054f\3\2\2\2\u0552\u0554\7+\2\2\u0553")
        buf.write("\u0552\3\2\2\2\u0554\u0555\3\2\2\2\u0555\u0553\3\2\2\2")
        buf.write("\u0555\u0556\3\2\2\2\u0556]\3\2\2\2\u0557\u0558\7\13\2")
        buf.write("\2\u0558\u0559\5^\60\2\u0559\u055a\7\f\2\2\u055a\u055e")
        buf.write("\3\2\2\2\u055b\u055e\5d\63\2\u055c\u055e\7i\2\2\u055d")
        buf.write("\u0557\3\2\2\2\u055d\u055b\3\2\2\2\u055d\u055c\3\2\2\2")
        buf.write("\u055e_\3\2\2\2\u055f\u0563\5b\62\2\u0560\u0562\7\7\2")
        buf.write("\2\u0561\u0560\3\2\2\2\u0562\u0565\3\2\2\2\u0563\u0561")
        buf.write("\3\2\2\2\u0563\u0564\3\2\2\2\u0564\u0566\3\2\2\2\u0565")
        buf.write("\u0563\3\2\2\2\u0566\u056a\7\t\2\2\u0567\u0569\7\7\2\2")
        buf.write("\u0568\u0567\3\2\2\2\u0569\u056c\3\2\2\2\u056a\u0568\3")
        buf.write("\2\2\2\u056a\u056b\3\2\2\2\u056b\u056e\3\2\2\2\u056c\u056a")
        buf.write("\3\2\2\2\u056d\u055f\3\2\2\2\u056d\u056e\3\2\2\2\u056e")
        buf.write("\u056f\3\2\2\2\u056f\u0573\5h\65\2\u0570\u0572\7\7\2\2")
        buf.write("\u0571\u0570\3\2\2\2\u0572\u0575\3\2\2\2\u0573\u0571\3")
        buf.write("\2\2\2\u0573\u0574\3\2\2\2\u0574\u0576\3\2\2\2\u0575\u0573")
        buf.write("\3\2\2\2\u0576\u057a\7#\2\2\u0577\u0579\7\7\2\2\u0578")
        buf.write("\u0577\3\2\2\2\u0579\u057c\3\2\2\2\u057a\u0578\3\2\2\2")
        buf.write("\u057a\u057b\3\2\2\2\u057b\u057d\3\2\2\2\u057c\u057a\3")
        buf.write("\2\2\2\u057d\u057e\5V,\2\u057ea\3\2\2\2\u057f\u0583\5")
        buf.write("Z.\2\u0580\u0583\5\\/\2\u0581\u0583\5^\60\2\u0582\u057f")
        buf.write("\3\2\2\2\u0582\u0580\3\2\2\2\u0582\u0581\3\2\2\2\u0583")
        buf.write("c\3\2\2\2\u0584\u0595\5f\64\2\u0585\u0587\7\7\2\2\u0586")
        buf.write("\u0585\3\2\2\2\u0587\u058a\3\2\2\2\u0588\u0586\3\2\2\2")
        buf.write("\u0588\u0589\3\2\2\2\u0589\u058b\3\2\2\2\u058a\u0588\3")
        buf.write("\2\2\2\u058b\u058f\7\t\2\2\u058c\u058e\7\7\2\2\u058d\u058c")
        buf.write("\3\2\2\2\u058e\u0591\3\2\2\2\u058f\u058d\3\2\2\2\u058f")
        buf.write("\u0590\3\2\2\2\u0590\u0592\3\2\2\2\u0591\u058f\3\2\2\2")
        buf.write("\u0592\u0594\5f\64\2\u0593\u0588\3\2\2\2\u0594\u0597\3")
        buf.write("\2\2\2\u0595\u0593\3\2\2\2\u0595\u0596\3\2\2\2\u0596e")
        buf.write("\3\2\2\2\u0597\u0595\3\2\2\2\u0598\u05a0\5\u0122\u0092")
        buf.write("\2\u0599\u059b\7\7\2\2\u059a\u0599\3\2\2\2\u059b\u059e")
        buf.write("\3\2\2\2\u059c\u059a\3\2\2\2\u059c\u059d\3\2\2\2\u059d")
        buf.write("\u059f\3\2\2\2\u059e\u059c\3\2\2\2\u059f\u05a1\5\u00a0")
        buf.write("Q\2\u05a0\u059c\3\2\2\2\u05a0\u05a1\3\2\2\2\u05a1g\3\2")
        buf.write("\2\2\u05a2\u05a6\7\13\2\2\u05a3\u05a5\7\7\2\2\u05a4\u05a3")
        buf.write("\3\2\2\2\u05a5\u05a8\3\2\2\2\u05a6\u05a4\3\2\2\2\u05a6")
        buf.write("\u05a7\3\2\2\2\u05a7\u05ab\3\2\2\2\u05a8\u05a6\3\2\2\2")
        buf.write("\u05a9\u05ac\5<\37\2\u05aa\u05ac\5V,\2\u05ab\u05a9\3\2")
        buf.write("\2\2\u05ab\u05aa\3\2\2\2\u05ab\u05ac\3\2\2\2\u05ac\u05c0")
        buf.write("\3\2\2\2\u05ad\u05af\7\7\2\2\u05ae\u05ad\3\2\2\2\u05af")
        buf.write("\u05b2\3\2\2\2\u05b0\u05ae\3\2\2\2\u05b0\u05b1\3\2\2\2")
        buf.write("\u05b1\u05b3\3\2\2\2\u05b2\u05b0\3\2\2\2\u05b3\u05b7\7")
        buf.write("\n\2\2\u05b4\u05b6\7\7\2\2\u05b5\u05b4\3\2\2\2\u05b6\u05b9")
        buf.write("\3\2\2\2\u05b7\u05b5\3\2\2\2\u05b7\u05b8\3\2\2\2\u05b8")
        buf.write("\u05bc\3\2\2\2\u05b9\u05b7\3\2\2\2\u05ba\u05bd\5<\37\2")
        buf.write("\u05bb\u05bd\5V,\2\u05bc\u05ba\3\2\2\2\u05bc\u05bb\3\2")
        buf.write("\2\2\u05bd\u05bf\3\2\2\2\u05be\u05b0\3\2\2\2\u05bf\u05c2")
        buf.write("\3\2\2\2\u05c0\u05be\3\2\2\2\u05c0\u05c1\3\2\2\2\u05c1")
        buf.write("\u05ca\3\2\2\2\u05c2\u05c0\3\2\2\2\u05c3\u05c5\7\7\2\2")
        buf.write("\u05c4\u05c3\3\2\2\2\u05c5\u05c8\3\2\2\2\u05c6\u05c4\3")
        buf.write("\2\2\2\u05c6\u05c7\3\2\2\2\u05c7\u05c9\3\2\2\2\u05c8\u05c6")
        buf.write("\3\2\2\2\u05c9\u05cb\7\n\2\2\u05ca\u05c6\3\2\2\2\u05ca")
        buf.write("\u05cb\3\2\2\2\u05cb\u05cf\3\2\2\2\u05cc\u05ce\7\7\2\2")
        buf.write("\u05cd\u05cc\3\2\2\2\u05ce\u05d1\3\2\2\2\u05cf\u05cd\3")
        buf.write("\2\2\2\u05cf\u05d0\3\2\2\2\u05d0\u05d2\3\2\2\2\u05d1\u05cf")
        buf.write("\3\2\2\2\u05d2\u05d3\7\f\2\2\u05d3i\3\2\2\2\u05d4\u05d8")
        buf.write("\7K\2\2\u05d5\u05d7\7\7\2\2\u05d6\u05d5\3\2\2\2\u05d7")
        buf.write("\u05da\3\2\2\2\u05d8\u05d6\3\2\2\2\u05d8\u05d9\3\2\2\2")
        buf.write("\u05d9\u05db\3\2\2\2\u05da\u05d8\3\2\2\2\u05db\u05ec\5")
        buf.write("l\67\2\u05dc\u05de\7\7\2\2\u05dd\u05dc\3\2\2\2\u05de\u05e1")
        buf.write("\3\2\2\2\u05df\u05dd\3\2\2\2\u05df\u05e0\3\2\2\2\u05e0")
        buf.write("\u05e2\3\2\2\2\u05e1\u05df\3\2\2\2\u05e2\u05e6\7\n\2\2")
        buf.write("\u05e3\u05e5\7\7\2\2\u05e4\u05e3\3\2\2\2\u05e5\u05e8\3")
        buf.write("\2\2\2\u05e6\u05e4\3\2\2\2\u05e6\u05e7\3\2\2\2\u05e7\u05e9")
        buf.write("\3\2\2\2\u05e8\u05e6\3\2\2\2\u05e9\u05eb\5l\67\2\u05ea")
        buf.write("\u05df\3\2\2\2\u05eb\u05ee\3\2\2\2\u05ec\u05ea\3\2\2\2")
        buf.write("\u05ec\u05ed\3\2\2\2\u05edk\3\2\2\2\u05ee\u05ec\3\2\2")
        buf.write("\2\u05ef\u05f1\5\u0116\u008c\2\u05f0\u05ef\3\2\2\2\u05f1")
        buf.write("\u05f4\3\2\2\2\u05f2\u05f0\3\2\2\2\u05f2\u05f3\3\2\2\2")
        buf.write("\u05f3\u05f5\3\2\2\2\u05f4\u05f2\3\2\2\2\u05f5\u05f9\5")
        buf.write("\u0122\u0092\2\u05f6\u05f8\7\7\2\2\u05f7\u05f6\3\2\2\2")
        buf.write("\u05f8\u05fb\3\2\2\2\u05f9\u05f7\3\2\2\2\u05f9\u05fa\3")
        buf.write("\2\2\2\u05fa\u05fc\3\2\2\2\u05fb\u05f9\3\2\2\2\u05fc\u0600")
        buf.write("\7\33\2\2\u05fd\u05ff\7\7\2\2\u05fe\u05fd\3\2\2\2\u05ff")
        buf.write("\u0602\3\2\2\2\u0600\u05fe\3\2\2\2\u0600\u0601\3\2\2\2")
        buf.write("\u0601\u0603\3\2\2\2\u0602\u0600\3\2\2\2\u0603\u0604\5")
        buf.write("V,\2\u0604m\3\2\2\2\u0605\u0606\7\17\2\2\u0606\u0607\5")
        buf.write("p9\2\u0607\u0608\7\20\2\2\u0608o\3\2\2\2\u0609\u060b\5")
        buf.write("\u0126\u0094\2\u060a\u0609\3\2\2\2\u060b\u060e\3\2\2\2")
        buf.write("\u060c\u060a\3\2\2\2\u060c\u060d\3\2\2\2\u060d\u061d\3")
        buf.write("\2\2\2\u060e\u060c\3\2\2\2\u060f\u061a\5r:\2\u0610\u0612")
        buf.write("\5\u0126\u0094\2\u0611\u0610\3\2\2\2\u0612\u0613\3\2\2")
        buf.write("\2\u0613\u0611\3\2\2\2\u0613\u0614\3\2\2\2\u0614\u0616")
        buf.write("\3\2\2\2\u0615\u0617\5r:\2\u0616\u0615\3\2\2\2\u0616\u0617")
        buf.write("\3\2\2\2\u0617\u0619\3\2\2\2\u0618\u0611\3\2\2\2\u0619")
        buf.write("\u061c\3\2\2\2\u061a\u0618\3\2\2\2\u061a\u061b\3\2\2\2")
        buf.write("\u061b\u061e\3\2\2\2\u061c\u061a\3\2\2\2\u061d\u060f\3")
        buf.write("\2\2\2\u061d\u061e\3\2\2\2\u061eq\3\2\2\2\u061f\u0622")
        buf.write("\5v<\2\u0620\u0622\5t;\2\u0621\u061f\3\2\2\2\u0621\u0620")
        buf.write("\3\2\2\2\u0622s\3\2\2\2\u0623\u0625\5\u0116\u008c\2\u0624")
        buf.write("\u0623\3\2\2\2\u0625\u0628\3\2\2\2\u0626\u0624\3\2\2\2")
        buf.write("\u0626\u0627\3\2\2\2\u0627\u062c\3\2\2\2\u0628\u0626\3")
        buf.write("\2\2\2\u0629\u062b\7\7\2\2\u062a\u0629\3\2\2\2\u062b\u062e")
        buf.write("\3\2\2\2\u062c\u062a\3\2\2\2\u062c\u062d\3\2\2\2\u062d")
        buf.write("\u062f\3\2\2\2\u062e\u062c\3\2\2\2\u062f\u0630\5x=\2\u0630")
        buf.write("u\3\2\2\2\u0631\u0633\5\u0114\u008b\2\u0632\u0631\3\2")
        buf.write("\2\2\u0633\u0636\3\2\2\2\u0634\u0632\3\2\2\2\u0634\u0635")
        buf.write("\3\2\2\2\u0635\u063b\3\2\2\2\u0636\u0634\3\2\2\2\u0637")
        buf.write("\u063c\5\26\f\2\u0638\u063c\5\66\34\2\u0639\u063c\5F$")
        buf.write("\2\u063a\u063c\5P)\2\u063b\u0637\3\2\2\2\u063b\u0638\3")
        buf.write("\2\2\2\u063b\u0639\3\2\2\2\u063b\u063a\3\2\2\2\u063cw")
        buf.write("\3\2\2\2\u063d\u0643\5z>\2\u063e\u063f\5\u00e8u\2\u063f")
        buf.write("\u0640\5z>\2\u0640\u0642\3\2\2\2\u0641\u063e\3\2\2\2\u0642")
        buf.write("\u0645\3\2\2\2\u0643\u0641\3\2\2\2\u0643\u0644\3\2\2\2")
        buf.write("\u0644y\3\2\2\2\u0645\u0643\3\2\2\2\u0646\u0657\5|?\2")
        buf.write("\u0647\u0649\7\7\2\2\u0648\u0647\3\2\2\2\u0649\u064c\3")
        buf.write("\2\2\2\u064a\u0648\3\2\2\2\u064a\u064b\3\2\2\2\u064b\u064d")
        buf.write("\3\2\2\2\u064c\u064a\3\2\2\2\u064d\u0651\7\31\2\2\u064e")
        buf.write("\u0650\7\7\2\2\u064f\u064e\3\2\2\2\u0650\u0653\3\2\2\2")
        buf.write("\u0651\u064f\3\2\2\2\u0651\u0652\3\2\2\2\u0652\u0654\3")
        buf.write("\2\2\2\u0653\u0651\3\2\2\2\u0654\u0656\5|?\2\u0655\u064a")
        buf.write("\3\2\2\2\u0656\u0659\3\2\2\2\u0657\u0655\3\2\2\2\u0657")
        buf.write("\u0658\3\2\2\2\u0658{\3\2\2\2\u0659\u0657\3\2\2\2\u065a")
        buf.write("\u066b\5~@\2\u065b\u065d\7\7\2\2\u065c\u065b\3\2\2\2\u065d")
        buf.write("\u0660\3\2\2\2\u065e\u065c\3\2\2\2\u065e\u065f\3\2\2\2")
        buf.write("\u065f\u0661\3\2\2\2\u0660\u065e\3\2\2\2\u0661\u0665\7")
        buf.write("\30\2\2\u0662\u0664\7\7\2\2\u0663\u0662\3\2\2\2\u0664")
        buf.write("\u0667\3\2\2\2\u0665\u0663\3\2\2\2\u0665\u0666\3\2\2\2")
        buf.write("\u0666\u0668\3\2\2\2\u0667\u0665\3\2\2\2\u0668\u066a\5")
        buf.write("~@\2\u0669\u065e\3\2\2\2\u066a\u066d\3\2\2\2\u066b\u0669")
        buf.write("\3\2\2\2\u066b\u066c\3\2\2\2\u066c}\3\2\2\2\u066d\u066b")
        buf.write("\3\2\2\2\u066e\u067a\5\u0080A\2\u066f\u0673\5\u00eav\2")
        buf.write("\u0670\u0672\7\7\2\2\u0671\u0670\3\2\2\2\u0672\u0675\3")
        buf.write("\2\2\2\u0673\u0671\3\2\2\2\u0673\u0674\3\2\2\2\u0674\u0676")
        buf.write("\3\2\2\2\u0675\u0673\3\2\2\2\u0676\u0677\5\u0080A\2\u0677")
        buf.write("\u0679\3\2\2\2\u0678\u066f\3\2\2\2\u0679\u067c\3\2\2\2")
        buf.write("\u067a\u0678\3\2\2\2\u067a\u067b\3\2\2\2\u067b\177\3\2")
        buf.write("\2\2\u067c\u067a\3\2\2\2\u067d\u0687\5\u0082B\2\u067e")
        buf.write("\u0682\5\u00ecw\2\u067f\u0681\7\7\2\2\u0680\u067f\3\2")
        buf.write("\2\2\u0681\u0684\3\2\2\2\u0682\u0680\3\2\2\2\u0682\u0683")
        buf.write("\3\2\2\2\u0683\u0685\3\2\2\2\u0684\u0682\3\2\2\2\u0685")
        buf.write("\u0686\5\u0082B\2\u0686\u0688\3\2\2\2\u0687\u067e\3\2")
        buf.write("\2\2\u0687\u0688\3\2\2\2\u0688\u0081\3\2\2\2\u0689\u06a0")
        buf.write("\5\u0084C\2\u068a\u068e\5\u00eex\2\u068b\u068d\7\7\2\2")
        buf.write("\u068c\u068b\3\2\2\2\u068d\u0690\3\2\2\2\u068e\u068c\3")
        buf.write("\2\2\2\u068e\u068f\3\2\2\2\u068f\u0691\3\2\2\2\u0690\u068e")
        buf.write("\3\2\2\2\u0691\u0692\5\u0084C\2\u0692\u0694\3\2\2\2\u0693")
        buf.write("\u068a\3\2\2\2\u0694\u0695\3\2\2\2\u0695\u0693\3\2\2\2")
        buf.write("\u0695\u0696\3\2\2\2\u0696\u06a1\3\2\2\2\u0697\u069b\5")
        buf.write("\u00f0y\2\u0698\u069a\7\7\2\2\u0699\u0698\3\2\2\2\u069a")
        buf.write("\u069d\3\2\2\2\u069b\u0699\3\2\2\2\u069b\u069c\3\2\2\2")
        buf.write("\u069c\u069e\3\2\2\2\u069d\u069b\3\2\2\2\u069e\u069f\5")
        buf.write("V,\2\u069f\u06a1\3\2\2\2\u06a0\u0693\3\2\2\2\u06a0\u0697")
        buf.write("\3\2\2\2\u06a0\u06a1\3\2\2\2\u06a1\u0083\3\2\2\2\u06a2")
        buf.write("\u06b3\5\u0086D\2\u06a3\u06a5\7\7\2\2\u06a4\u06a3\3\2")
        buf.write("\2\2\u06a5\u06a8\3\2\2\2\u06a6\u06a4\3\2\2\2\u06a6\u06a7")
        buf.write("\3\2\2\2\u06a7\u06a9\3\2\2\2\u06a8\u06a6\3\2\2\2\u06a9")
        buf.write("\u06ad\7,\2\2\u06aa\u06ac\7\7\2\2\u06ab\u06aa\3\2\2\2")
        buf.write("\u06ac\u06af\3\2\2\2\u06ad\u06ab\3\2\2\2\u06ad\u06ae\3")
        buf.write("\2\2\2\u06ae\u06b0\3\2\2\2\u06af\u06ad\3\2\2\2\u06b0\u06b2")
        buf.write("\5\u0086D\2\u06b1\u06a6\3\2\2\2\u06b2\u06b5\3\2\2\2\u06b3")
        buf.write("\u06b1\3\2\2\2\u06b3\u06b4\3\2\2\2\u06b4\u0085\3\2\2\2")
        buf.write("\u06b5\u06b3\3\2\2\2\u06b6\u06c2\5\u0088E\2\u06b7\u06bb")
        buf.write("\5\u0122\u0092\2\u06b8\u06ba\7\7\2\2\u06b9\u06b8\3\2\2")
        buf.write("\2\u06ba\u06bd\3\2\2\2\u06bb\u06b9\3\2\2\2\u06bb\u06bc")
        buf.write("\3\2\2\2\u06bc\u06be\3\2\2\2\u06bd\u06bb\3\2\2\2\u06be")
        buf.write("\u06bf\5\u0088E\2\u06bf\u06c1\3\2\2\2\u06c0\u06b7\3\2")
        buf.write("\2\2\u06c1\u06c4\3\2\2\2\u06c2\u06c0\3\2\2\2\u06c2\u06c3")
        buf.write("\3\2\2\2\u06c3\u0087\3\2\2\2\u06c4\u06c2\3\2\2\2\u06c5")
        buf.write("\u06d0\5\u008aF\2\u06c6\u06ca\7%\2\2\u06c7\u06c9\7\7\2")
        buf.write("\2\u06c8\u06c7\3\2\2\2\u06c9\u06cc\3\2\2\2\u06ca\u06c8")
        buf.write("\3\2\2\2\u06ca\u06cb\3\2\2\2\u06cb\u06cd\3\2\2\2\u06cc")
        buf.write("\u06ca\3\2\2\2\u06cd\u06cf\5\u008aF\2\u06ce\u06c6\3\2")
        buf.write("\2\2\u06cf\u06d2\3\2\2\2\u06d0\u06ce\3\2\2\2\u06d0\u06d1")
        buf.write("\3\2\2\2\u06d1\u0089\3\2\2\2\u06d2\u06d0\3\2\2\2\u06d3")
        buf.write("\u06df\5\u008cG\2\u06d4\u06d8\5\u00f2z\2\u06d5\u06d7\7")
        buf.write("\7\2\2\u06d6\u06d5\3\2\2\2\u06d7\u06da\3\2\2\2\u06d8\u06d6")
        buf.write("\3\2\2\2\u06d8\u06d9\3\2\2\2\u06d9\u06db\3\2\2\2\u06da")
        buf.write("\u06d8\3\2\2\2\u06db\u06dc\5\u008cG\2\u06dc\u06de\3\2")
        buf.write("\2\2\u06dd\u06d4\3\2\2\2\u06de\u06e1\3\2\2\2\u06df\u06dd")
        buf.write("\3\2\2\2\u06df\u06e0\3\2\2\2\u06e0\u008b\3\2\2\2\u06e1")
        buf.write("\u06df\3\2\2\2\u06e2\u06ee\5\u008eH\2\u06e3\u06e7\5\u00f4")
        buf.write("{\2\u06e4\u06e6\7\7\2\2\u06e5\u06e4\3\2\2\2\u06e6\u06e9")
        buf.write("\3\2\2\2\u06e7\u06e5\3\2\2\2\u06e7\u06e8\3\2\2\2\u06e8")
        buf.write("\u06ea\3\2\2\2\u06e9\u06e7\3\2\2\2\u06ea\u06eb\5\u008e")
        buf.write("H\2\u06eb\u06ed\3\2\2\2\u06ec\u06e3\3\2\2\2\u06ed\u06f0")
        buf.write("\3\2\2\2\u06ee\u06ec\3\2\2\2\u06ee\u06ef\3\2\2\2\u06ef")
        buf.write("\u008d\3\2\2\2\u06f0\u06ee\3\2\2\2\u06f1\u06fd\5\u0090")
        buf.write("I\2\u06f2\u06f4\7\7\2\2\u06f3\u06f2\3\2\2\2\u06f4\u06f7")
        buf.write("\3\2\2\2\u06f5\u06f3\3\2\2\2\u06f5\u06f6\3\2\2\2\u06f6")
        buf.write("\u06f8\3\2\2\2\u06f7\u06f5\3\2\2\2\u06f8\u06f9\5\u00f6")
        buf.write("|\2\u06f9\u06fa\5\u0090I\2\u06fa\u06fc\3\2\2\2\u06fb\u06f5")
        buf.write("\3\2\2\2\u06fc\u06ff\3\2\2\2\u06fd\u06fb\3\2\2\2\u06fd")
        buf.write("\u06fe\3\2\2\2\u06fe\u008f\3\2\2\2\u06ff\u06fd\3\2\2\2")
        buf.write("\u0700\u0702\5\u00f8}\2\u0701\u0700\3\2\2\2\u0702\u0705")
        buf.write("\3\2\2\2\u0703\u0701\3\2\2\2\u0703\u0704\3\2\2\2\u0704")
        buf.write("\u0706\3\2\2\2\u0705\u0703\3\2\2\2\u0706\u0707\5\u0092")
        buf.write("J\2\u0707\u0091\3\2\2\2\u0708\u070b\5\u0094K\2\u0709\u070b")
        buf.write("\5\u00e6t\2\u070a\u0708\3\2\2\2\u070a\u0709\3\2\2\2\u070b")
        buf.write("\u070f\3\2\2\2\u070c\u070e\5\u00fa~\2\u070d\u070c\3\2")
        buf.write("\2\2\u070e\u0711\3\2\2\2\u070f\u070d\3\2\2\2\u070f\u0710")
        buf.write("\3\2\2\2\u0710\u0093\3\2\2\2\u0711\u070f\3\2\2\2\u0712")
        buf.write("\u0721\5\u0096L\2\u0713\u0721\5\u00a8U\2\u0714\u0721\5")
        buf.write("\u00b8]\2\u0715\u0721\5\u00c2b\2\u0716\u0721\5\u00c4c")
        buf.write("\2\u0717\u0721\5\u00c6d\2\u0718\u0721\5\u00d6l\2\u0719")
        buf.write("\u0721\5\u00be`\2\u071a\u0721\5\u00e4s\2\u071b\u0721\5")
        buf.write("\u00dco\2\u071c\u0721\5\u00c0a\2\u071d\u0721\5\u0122\u0092")
        buf.write("\2\u071e\u071f\7A\2\2\u071f\u0721\5\u0120\u0091\2\u0720")
        buf.write("\u0712\3\2\2\2\u0720\u0713\3\2\2\2\u0720\u0714\3\2\2\2")
        buf.write("\u0720\u0715\3\2\2\2\u0720\u0716\3\2\2\2\u0720\u0717\3")
        buf.write("\2\2\2\u0720\u0718\3\2\2\2\u0720\u0719\3\2\2\2\u0720\u071a")
        buf.write("\3\2\2\2\u0720\u071b\3\2\2\2\u0720\u071c\3\2\2\2\u0720")
        buf.write("\u071d\3\2\2\2\u0720\u071e\3\2\2\2\u0721\u0095\3\2\2\2")
        buf.write("\u0722\u0723\7\13\2\2\u0723\u0724\5x=\2\u0724\u0725\7")
        buf.write("\f\2\2\u0725\u0097\3\2\2\2\u0726\u0728\5\u00a0Q\2\u0727")
        buf.write("\u0729\5\u009eP\2\u0728\u0727\3\2\2\2\u0728\u0729\3\2")
        buf.write("\2\2\u0729\u072d\3\2\2\2\u072a\u072c\5\u009aN\2\u072b")
        buf.write("\u072a\3\2\2\2\u072c\u072f\3\2\2\2\u072d\u072b\3\2\2\2")
        buf.write("\u072d\u072e\3\2\2\2\u072e\u073d\3\2\2\2\u072f\u072d\3")
        buf.write("\2\2\2\u0730\u0734\5\u009eP\2\u0731\u0733\5\u009aN\2\u0732")
        buf.write("\u0731\3\2\2\2\u0733\u0736\3\2\2\2\u0734\u0732\3\2\2\2")
        buf.write("\u0734\u0735\3\2\2\2\u0735\u073d\3\2\2\2\u0736\u0734\3")
        buf.write("\2\2\2\u0737\u0739\5\u009aN\2\u0738\u0737\3\2\2\2\u0739")
        buf.write("\u073a\3\2\2\2\u073a\u0738\3\2\2\2\u073a\u073b\3\2\2\2")
        buf.write("\u073b\u073d\3\2\2\2\u073c\u0726\3\2\2\2\u073c\u0730\3")
        buf.write("\2\2\2\u073c\u0738\3\2\2\2\u073d\u0099\3\2\2\2\u073e\u0740")
        buf.write("\5\u011e\u0090\2\u073f\u073e\3\2\2\2\u0740\u0743\3\2\2")
        buf.write("\2\u0741\u073f\3\2\2\2\u0741\u0742\3\2\2\2\u0742\u0745")
        buf.write("\3\2\2\2\u0743\u0741\3\2\2\2\u0744\u0746\7\u0091\2\2\u0745")
        buf.write("\u0744\3\2\2\2\u0745\u0746\3\2\2\2\u0746\u074a\3\2\2\2")
        buf.write("\u0747\u0749\7\7\2\2\u0748\u0747\3\2\2\2\u0749\u074c\3")
        buf.write("\2\2\2\u074a\u0748\3\2\2\2\u074a\u074b\3\2\2\2\u074b\u074d")
        buf.write("\3\2\2\2\u074c\u074a\3\2\2\2\u074d\u074e\5\u00b8]\2\u074e")
        buf.write("\u009b\3\2\2\2\u074f\u0758\7\r\2\2\u0750\u0755\5x=\2\u0751")
        buf.write("\u0752\7\n\2\2\u0752\u0754\5x=\2\u0753\u0751\3\2\2\2\u0754")
        buf.write("\u0757\3\2\2\2\u0755\u0753\3\2\2\2\u0755\u0756\3\2\2\2")
        buf.write("\u0756\u0759\3\2\2\2\u0757\u0755\3\2\2\2\u0758\u0750\3")
        buf.write("\2\2\2\u0758\u0759\3\2\2\2\u0759\u075a\3\2\2\2\u075a\u075b")
        buf.write("\7\16\2\2\u075b\u009d\3\2\2\2\u075c\u076e\7\13\2\2\u075d")
        buf.write("\u0762\5\u00a6T\2\u075e\u075f\7\n\2\2\u075f\u0761\5\u00a6")
        buf.write("T\2\u0760\u075e\3\2\2\2\u0761\u0764\3\2\2\2\u0762\u0760")
        buf.write("\3\2\2\2\u0762\u0763\3\2\2\2\u0763\u076c\3\2\2\2\u0764")
        buf.write("\u0762\3\2\2\2\u0765\u0767\7\7\2\2\u0766\u0765\3\2\2\2")
        buf.write("\u0767\u076a\3\2\2\2\u0768\u0766\3\2\2\2\u0768\u0769\3")
        buf.write("\2\2\2\u0769\u076b\3\2\2\2\u076a\u0768\3\2\2\2\u076b\u076d")
        buf.write("\7\n\2\2\u076c\u0768\3\2\2\2\u076c\u076d\3\2\2\2\u076d")
        buf.write("\u076f\3\2\2\2\u076e\u075d\3\2\2\2\u076e\u076f\3\2\2\2")
        buf.write("\u076f\u0770\3\2\2\2\u0770\u0771\7\f\2\2\u0771\u009f\3")
        buf.write("\2\2\2\u0772\u0776\7-\2\2\u0773\u0775\7\7\2\2\u0774\u0773")
        buf.write("\3\2\2\2\u0775\u0778\3\2\2\2\u0776\u0774\3\2\2\2\u0776")
        buf.write("\u0777\3\2\2\2\u0777\u0779\3\2\2\2\u0778\u0776\3\2\2\2")
        buf.write("\u0779\u0784\5\u00a2R\2\u077a\u077c\7\7\2\2\u077b\u077a")
        buf.write("\3\2\2\2\u077c\u077f\3\2\2\2\u077d\u077b\3\2\2\2\u077d")
        buf.write("\u077e\3\2\2\2\u077e\u0780\3\2\2\2\u077f\u077d\3\2\2\2")
        buf.write("\u0780\u0781\7\n\2\2\u0781\u0783\5\u00a2R\2\u0782\u077d")
        buf.write("\3\2\2\2\u0783\u0786\3\2\2\2\u0784\u0782\3\2\2\2\u0784")
        buf.write("\u0785\3\2\2\2\u0785\u078e\3\2\2\2\u0786\u0784\3\2\2\2")
        buf.write("\u0787\u0789\7\7\2\2\u0788\u0787\3\2\2\2\u0789\u078c\3")
        buf.write("\2\2\2\u078a\u0788\3\2\2\2\u078a\u078b\3\2\2\2\u078b\u078d")
        buf.write("\3\2\2\2\u078c\u078a\3\2\2\2\u078d\u078f\7\n\2\2\u078e")
        buf.write("\u078a\3\2\2\2\u078e\u078f\3\2\2\2\u078f\u0793\3\2\2\2")
        buf.write("\u0790\u0792\7\7\2\2\u0791\u0790\3\2\2\2\u0792\u0795\3")
        buf.write("\2\2\2\u0793\u0791\3\2\2\2\u0793\u0794\3\2\2\2\u0794\u0796")
        buf.write("\3\2\2\2\u0795\u0793\3\2\2\2\u0796\u0798\7.\2\2\u0797")
        buf.write("\u0799\7+\2\2\u0798\u0797\3\2\2\2\u0798\u0799\3\2\2\2")
        buf.write("\u0799\u00a1\3\2\2\2\u079a\u079c\5\u00a4S\2\u079b\u079a")
        buf.write("\3\2\2\2\u079b\u079c\3\2\2\2\u079c\u079d\3\2\2\2\u079d")
        buf.write("\u07a0\5V,\2\u079e\u07a0\7\21\2\2\u079f\u079b\3\2\2\2")
        buf.write("\u079f\u079e\3\2\2\2\u07a0\u00a3\3\2\2\2\u07a1\u07a3\5")
        buf.write("\u0108\u0085\2\u07a2\u07a1\3\2\2\2\u07a3\u07a4\3\2\2\2")
        buf.write("\u07a4\u07a2\3\2\2\2\u07a4\u07a5\3\2\2\2\u07a5\u00a5\3")
        buf.write("\2\2\2\u07a6\u07aa\5\u0122\u0092\2\u07a7\u07a9\7\7\2\2")
        buf.write("\u07a8\u07a7\3\2\2\2\u07a9\u07ac\3\2\2\2\u07aa\u07a8\3")
        buf.write("\2\2\2\u07aa\u07ab\3\2\2\2\u07ab\u07ad\3\2\2\2\u07ac\u07aa")
        buf.write("\3\2\2\2\u07ad\u07b1\7\35\2\2\u07ae\u07b0\7\7\2\2\u07af")
        buf.write("\u07ae\3\2\2\2\u07b0\u07b3\3\2\2\2\u07b1\u07af\3\2\2\2")
        buf.write("\u07b1\u07b2\3\2\2\2\u07b2\u07b5\3\2\2\2\u07b3\u07b1\3")
        buf.write("\2\2\2\u07b4\u07a6\3\2\2\2\u07b4\u07b5\3\2\2\2\u07b5\u07b7")
        buf.write("\3\2\2\2\u07b6\u07b8\7\21\2\2\u07b7\u07b6\3\2\2\2\u07b7")
        buf.write("\u07b8\3\2\2\2\u07b8\u07bc\3\2\2\2\u07b9\u07bb\7\7\2\2")
        buf.write("\u07ba\u07b9\3\2\2\2\u07bb\u07be\3\2\2\2\u07bc\u07ba\3")
        buf.write("\2\2\2\u07bc\u07bd\3\2\2\2\u07bd\u07bf\3\2\2\2\u07be\u07bc")
        buf.write("\3\2\2\2\u07bf\u07c0\5x=\2\u07c0\u00a7\3\2\2\2\u07c1\u07cb")
        buf.write("\7\u008c\2\2\u07c2\u07cb\7\u0089\2\2\u07c3\u07cb\5\u00aa")
        buf.write("V\2\u07c4\u07cb\7\u008a\2\2\u07c5\u07cb\7\u008b\2\2\u07c6")
        buf.write("\u07cb\7\u0093\2\2\u07c7\u07cb\7\u0085\2\2\u07c8\u07cb")
        buf.write("\7\u008d\2\2\u07c9\u07cb\7\u0088\2\2\u07ca\u07c1\3\2\2")
        buf.write("\2\u07ca\u07c2\3\2\2\2\u07ca\u07c3\3\2\2\2\u07ca\u07c4")
        buf.write("\3\2\2\2\u07ca\u07c5\3\2\2\2\u07ca\u07c6\3\2\2\2\u07ca")
        buf.write("\u07c7\3\2\2\2\u07ca\u07c8\3\2\2\2\u07ca\u07c9\3\2\2\2")
        buf.write("\u07cb\u00a9\3\2\2\2\u07cc\u07cf\5\u00acW\2\u07cd\u07cf")
        buf.write("\5\u00aeX\2\u07ce\u07cc\3\2\2\2\u07ce\u07cd\3\2\2\2\u07cf")
        buf.write("\u00ab\3\2\2\2\u07d0\u07d5\7\u0083\2\2\u07d1\u07d4\5\u00b0")
        buf.write("Y\2\u07d2\u07d4\5\u00b2Z\2\u07d3\u07d1\3\2\2\2\u07d3\u07d2")
        buf.write("\3\2\2\2\u07d4\u07d7\3\2\2\2\u07d5\u07d3\3\2\2\2\u07d5")
        buf.write("\u07d6\3\2\2\2\u07d6\u07d8\3\2\2\2\u07d7\u07d5\3\2\2\2")
        buf.write("\u07d8\u07d9\7\u009e\2\2\u07d9\u00ad\3\2\2\2\u07da\u07e1")
        buf.write("\7\u0084\2\2\u07db\u07e0\5\u00b4[\2\u07dc\u07e0\5\u00b6")
        buf.write("\\\2\u07dd\u07e0\5\u00acW\2\u07de\u07e0\7\u00a4\2\2\u07df")
        buf.write("\u07db\3\2\2\2\u07df\u07dc\3\2\2\2\u07df\u07dd\3\2\2\2")
        buf.write("\u07df\u07de\3\2\2\2\u07e0\u07e3\3\2\2\2\u07e1\u07df\3")
        buf.write("\2\2\2\u07e1\u07e2\3\2\2\2\u07e2\u07e4\3\2\2\2\u07e3\u07e1")
        buf.write("\3\2\2\2\u07e4\u07e5\7\u00a3\2\2\u07e5\u00af\3\2\2\2\u07e6")
        buf.write("\u07e7\t\5\2\2\u07e7\u00b1\3\2\2\2\u07e8\u07e9\7\u00a2")
        buf.write("\2\2\u07e9\u07ea\5x=\2\u07ea\u07eb\7\20\2\2\u07eb\u00b3")
        buf.write("\3\2\2\2\u07ec\u07ed\t\6\2\2\u07ed\u00b5\3\2\2\2\u07ee")
        buf.write("\u07ef\7\u00a8\2\2\u07ef\u07f0\5x=\2\u07f0\u07f1\7\20")
        buf.write("\2\2\u07f1\u00b7\3\2\2\2\u07f2\u07f4\5\u0116\u008c\2\u07f3")
        buf.write("\u07f2\3\2\2\2\u07f4\u07f7\3\2\2\2\u07f5\u07f3\3\2\2\2")
        buf.write("\u07f5\u07f6\3\2\2\2\u07f6\u0826\3\2\2\2\u07f7\u07f5\3")
        buf.write("\2\2\2\u07f8\u07fc\7\17\2\2\u07f9\u07fb\7\7\2\2\u07fa")
        buf.write("\u07f9\3\2\2\2\u07fb\u07fe\3\2\2\2\u07fc\u07fa\3\2\2\2")
        buf.write("\u07fc\u07fd\3\2\2\2\u07fd\u07ff\3\2\2\2\u07fe\u07fc\3")
        buf.write("\2\2\2\u07ff\u0803\5p9\2\u0800\u0802\7\7\2\2\u0801\u0800")
        buf.write("\3\2\2\2\u0802\u0805\3\2\2\2\u0803\u0801\3\2\2\2\u0803")
        buf.write("\u0804\3\2\2\2\u0804\u0806\3\2\2\2\u0805\u0803\3\2\2\2")
        buf.write("\u0806\u0807\7\20\2\2\u0807\u0827\3\2\2\2\u0808\u080c")
        buf.write("\7\17\2\2\u0809\u080b\7\7\2\2\u080a\u0809\3\2\2\2\u080b")
        buf.write("\u080e\3\2\2\2\u080c\u080a\3\2\2\2\u080c\u080d\3\2\2\2")
        buf.write("\u080d\u080f\3\2\2\2\u080e\u080c\3\2\2\2\u080f\u0813\5")
        buf.write("\u00ba^\2\u0810\u0812\7\7\2\2\u0811\u0810\3\2\2\2\u0812")
        buf.write("\u0815\3\2\2\2\u0813\u0811\3\2\2\2\u0813\u0814\3\2\2\2")
        buf.write("\u0814\u0816\3\2\2\2\u0815\u0813\3\2\2\2\u0816\u081a\7")
        buf.write("#\2\2\u0817\u0819\7\7\2\2\u0818\u0817\3\2\2\2\u0819\u081c")
        buf.write("\3\2\2\2\u081a\u0818\3\2\2\2\u081a\u081b\3\2\2\2\u081b")
        buf.write("\u081d\3\2\2\2\u081c\u081a\3\2\2\2\u081d\u0821\5p9\2\u081e")
        buf.write("\u0820\7\7\2\2\u081f\u081e\3\2\2\2\u0820\u0823\3\2\2\2")
        buf.write("\u0821\u081f\3\2\2\2\u0821\u0822\3\2\2\2\u0822\u0824\3")
        buf.write("\2\2\2\u0823\u0821\3\2\2\2\u0824\u0825\7\20\2\2\u0825")
        buf.write("\u0827\3\2\2\2\u0826\u07f8\3\2\2\2\u0826\u0808\3\2\2\2")
        buf.write("\u0827\u00b9\3\2\2\2\u0828\u082a\5\u00bc_\2\u0829\u0828")
        buf.write("\3\2\2\2\u0829\u082a\3\2\2\2\u082a\u083b\3\2\2\2\u082b")
        buf.write("\u082d\7\7\2\2\u082c\u082b\3\2\2\2\u082d\u0830\3\2\2\2")
        buf.write("\u082e\u082c\3\2\2\2\u082e\u082f\3\2\2\2\u082f\u0831\3")
        buf.write("\2\2\2\u0830\u082e\3\2\2\2\u0831\u0835\7\n\2\2\u0832\u0834")
        buf.write("\7\7\2\2\u0833\u0832\3\2\2\2\u0834\u0837\3\2\2\2\u0835")
        buf.write("\u0833\3\2\2\2\u0835\u0836\3\2\2\2\u0836\u0838\3\2\2\2")
        buf.write("\u0837\u0835\3\2\2\2\u0838\u083a\5\u00bc_\2\u0839\u082e")
        buf.write("\3\2\2\2\u083a\u083d\3\2\2\2\u083b\u0839\3\2\2\2\u083b")
        buf.write("\u083c\3\2\2\2\u083c\u00bb\3\2\2\2\u083d\u083b\3\2\2\2")
        buf.write("\u083e\u0851\5J&\2\u083f\u084e\5H%\2\u0840\u0842\7\7\2")
        buf.write("\2\u0841\u0840\3\2\2\2\u0842\u0845\3\2\2\2\u0843\u0841")
        buf.write("\3\2\2\2\u0843\u0844\3\2\2\2\u0844\u0846\3\2\2\2\u0845")
        buf.write("\u0843\3\2\2\2\u0846\u084a\7\33\2\2\u0847\u0849\7\7\2")
        buf.write("\2\u0848\u0847\3\2\2\2\u0849\u084c\3\2\2\2\u084a\u0848")
        buf.write("\3\2\2\2\u084a\u084b\3\2\2\2\u084b\u084d\3\2\2\2\u084c")
        buf.write("\u084a\3\2\2\2\u084d\u084f\5V,\2\u084e\u0843\3\2\2\2\u084e")
        buf.write("\u084f\3\2\2\2\u084f\u0851\3\2\2\2\u0850\u083e\3\2\2\2")
        buf.write("\u0850\u083f\3\2\2\2\u0851\u00bd\3\2\2\2\u0852\u0861\7")
        buf.write("@\2\2\u0853\u0855\7\7\2\2\u0854\u0853\3\2\2\2\u0855\u0858")
        buf.write("\3\2\2\2\u0856\u0854\3\2\2\2\u0856\u0857\3\2\2\2\u0857")
        buf.write("\u0859\3\2\2\2\u0858\u0856\3\2\2\2\u0859\u085d\7\33\2")
        buf.write("\2\u085a\u085c\7\7\2\2\u085b\u085a\3\2\2\2\u085c\u085f")
        buf.write("\3\2\2\2\u085d\u085b\3\2\2\2\u085d\u085e\3\2\2\2\u085e")
        buf.write("\u0860\3\2\2\2\u085f\u085d\3\2\2\2\u0860\u0862\5\36\20")
        buf.write("\2\u0861\u0856\3\2\2\2\u0861\u0862\3\2\2\2\u0862\u0866")
        buf.write("\3\2\2\2\u0863\u0865\7\7\2\2\u0864\u0863\3\2\2\2\u0865")
        buf.write("\u0868\3\2\2\2\u0866\u0864\3\2\2\2\u0866\u0867\3\2\2\2")
        buf.write("\u0867\u086a\3\2\2\2\u0868\u0866\3\2\2\2\u0869\u086b\5")
        buf.write("&\24\2\u086a\u0869\3\2\2\2\u086a\u086b\3\2\2\2\u086b\u00bf")
        buf.write("\3\2\2\2\u086c\u086e\7\r\2\2\u086d\u086f\5x=\2\u086e\u086d")
        buf.write("\3\2\2\2\u086e\u086f\3\2\2\2\u086f\u0874\3\2\2\2\u0870")
        buf.write("\u0871\7\n\2\2\u0871\u0873\5x=\2\u0872\u0870\3\2\2\2\u0873")
        buf.write("\u0876\3\2\2\2\u0874\u0872\3\2\2\2\u0874\u0875\3\2\2\2")
        buf.write("\u0875\u0877\3\2\2\2\u0876\u0874\3\2\2\2\u0877\u0878\7")
        buf.write("\16\2\2\u0878\u00c1\3\2\2\2\u0879\u087b\7H\2\2\u087a\u087c")
        buf.write("\7\u0090\2\2\u087b\u087a\3\2\2\2\u087b\u087c\3\2\2\2\u087c")
        buf.write("\u00c3\3\2\2\2\u087d\u088e\7I\2\2\u087e\u0882\7-\2\2\u087f")
        buf.write("\u0881\7\7\2\2\u0880\u087f\3\2\2\2\u0881\u0884\3\2\2\2")
        buf.write("\u0882\u0880\3\2\2\2\u0882\u0883\3\2\2\2\u0883\u0885\3")
        buf.write("\2\2\2\u0884\u0882\3\2\2\2\u0885\u0889\5V,\2\u0886\u0888")
        buf.write("\7\7\2\2\u0887\u0886\3\2\2\2\u0888\u088b\3\2\2\2\u0889")
        buf.write("\u0887\3\2\2\2\u0889\u088a\3\2\2\2\u088a\u088c\3\2\2\2")
        buf.write("\u088b\u0889\3\2\2\2\u088c\u088d\7.\2\2\u088d\u088f\3")
        buf.write("\2\2\2\u088e\u087e\3\2\2\2\u088e\u088f\3\2\2\2\u088f\u0891")
        buf.write("\3\2\2\2\u0890\u0892\7\u0090\2\2\u0891\u0890\3\2\2\2\u0891")
        buf.write("\u0892\3\2\2\2\u0892\u00c5\3\2\2\2\u0893\u0896\5\u00c8")
        buf.write("e\2\u0894\u0896\5\u00ccg\2\u0895\u0893\3\2\2\2\u0895\u0894")
        buf.write("\3\2\2\2\u0896\u00c7\3\2\2\2\u0897\u089b\7L\2\2\u0898")
        buf.write("\u089a\7\7\2\2\u0899\u0898\3\2\2\2\u089a\u089d\3\2\2\2")
        buf.write("\u089b\u0899\3\2\2\2\u089b\u089c\3\2\2\2\u089c\u089e\3")
        buf.write("\2\2\2\u089d\u089b\3\2\2\2\u089e\u089f\7\13\2\2\u089f")
        buf.write("\u08a0\5x=\2\u08a0\u08a4\7\f\2\2\u08a1\u08a3\7\7\2\2\u08a2")
        buf.write("\u08a1\3\2\2\2\u08a3\u08a6\3\2\2\2\u08a4\u08a2\3\2\2\2")
        buf.write("\u08a4\u08a5\3\2\2\2\u08a5\u08a8\3\2\2\2\u08a6\u08a4\3")
        buf.write("\2\2\2\u08a7\u08a9\5\u00caf\2\u08a8\u08a7\3\2\2\2\u08a8")
        buf.write("\u08a9\3\2\2\2\u08a9\u08ab\3\2\2\2\u08aa\u08ac\7\34\2")
        buf.write("\2\u08ab\u08aa\3\2\2\2\u08ab\u08ac\3\2\2\2\u08ac\u08bd")
        buf.write("\3\2\2\2\u08ad\u08af\7\7\2\2\u08ae\u08ad\3\2\2\2\u08af")
        buf.write("\u08b2\3\2\2\2\u08b0\u08ae\3\2\2\2\u08b0\u08b1\3\2\2\2")
        buf.write("\u08b1\u08b3\3\2\2\2\u08b2\u08b0\3\2\2\2\u08b3\u08b7\7")
        buf.write("M\2\2\u08b4\u08b6\7\7\2\2\u08b5\u08b4\3\2\2\2\u08b6\u08b9")
        buf.write("\3\2\2\2\u08b7\u08b5\3\2\2\2\u08b7\u08b8\3\2\2\2\u08b8")
        buf.write("\u08bb\3\2\2\2\u08b9\u08b7\3\2\2\2\u08ba\u08bc\5\u00ca")
        buf.write("f\2\u08bb\u08ba\3\2\2\2\u08bb\u08bc\3\2\2\2\u08bc\u08be")
        buf.write("\3\2\2\2\u08bd\u08b0\3\2\2\2\u08bd\u08be\3\2\2\2\u08be")
        buf.write("\u00c9\3\2\2\2\u08bf\u08c2\5n8\2\u08c0\u08c2\5x=\2\u08c1")
        buf.write("\u08bf\3\2\2\2\u08c1\u08c0\3\2\2\2\u08c2\u00cb\3\2\2\2")
        buf.write("\u08c3\u08c7\7N\2\2\u08c4\u08c6\7\7\2\2\u08c5\u08c4\3")
        buf.write("\2\2\2\u08c6\u08c9\3\2\2\2\u08c7\u08c5\3\2\2\2\u08c7\u08c8")
        buf.write("\3\2\2\2\u08c8\u08ce\3\2\2\2\u08c9\u08c7\3\2\2\2\u08ca")
        buf.write("\u08cb\7\13\2\2\u08cb\u08cc\5x=\2\u08cc\u08cd\7\f\2\2")
        buf.write("\u08cd\u08cf\3\2\2\2\u08ce\u08ca\3\2\2\2\u08ce\u08cf\3")
        buf.write("\2\2\2\u08cf\u08d3\3\2\2\2\u08d0\u08d2\7\7\2\2\u08d1\u08d0")
        buf.write("\3\2\2\2\u08d2\u08d5\3\2\2\2\u08d3\u08d1\3\2\2\2\u08d3")
        buf.write("\u08d4\3\2\2\2\u08d4\u08d6\3\2\2\2\u08d5\u08d3\3\2\2\2")
        buf.write("\u08d6\u08da\7\17\2\2\u08d7\u08d9\7\7\2\2\u08d8\u08d7")
        buf.write("\3\2\2\2\u08d9\u08dc\3\2\2\2\u08da\u08d8\3\2\2\2\u08da")
        buf.write("\u08db\3\2\2\2\u08db\u08e6\3\2\2\2\u08dc\u08da\3\2\2\2")
        buf.write("\u08dd\u08e1\5\u00ceh\2\u08de\u08e0\7\7\2\2\u08df\u08de")
        buf.write("\3\2\2\2\u08e0\u08e3\3\2\2\2\u08e1\u08df\3\2\2\2\u08e1")
        buf.write("\u08e2\3\2\2\2\u08e2\u08e5\3\2\2\2\u08e3\u08e1\3\2\2\2")
        buf.write("\u08e4\u08dd\3\2\2\2\u08e5\u08e8\3\2\2\2\u08e6\u08e4\3")
        buf.write("\2\2\2\u08e6\u08e7\3\2\2\2\u08e7\u08ec\3\2\2\2\u08e8\u08e6")
        buf.write("\3\2\2\2\u08e9\u08eb\7\7\2\2\u08ea\u08e9\3\2\2\2\u08eb")
        buf.write("\u08ee\3\2\2\2\u08ec\u08ea\3\2\2\2\u08ec\u08ed\3\2\2\2")
        buf.write("\u08ed\u08ef\3\2\2\2\u08ee\u08ec\3\2\2\2\u08ef\u08f0\7")
        buf.write("\20\2\2\u08f0\u00cd\3\2\2\2\u08f1\u0902\5\u00d0i\2\u08f2")
        buf.write("\u08f4\7\7\2\2\u08f3\u08f2\3\2\2\2\u08f4\u08f7\3\2\2\2")
        buf.write("\u08f5\u08f3\3\2\2\2\u08f5\u08f6\3\2\2\2\u08f6\u08f8\3")
        buf.write("\2\2\2\u08f7\u08f5\3\2\2\2\u08f8\u08fc\7\n\2\2\u08f9\u08fb")
        buf.write("\7\7\2\2\u08fa\u08f9\3\2\2\2\u08fb\u08fe\3\2\2\2\u08fc")
        buf.write("\u08fa\3\2\2\2\u08fc\u08fd\3\2\2\2\u08fd\u08ff\3\2\2\2")
        buf.write("\u08fe\u08fc\3\2\2\2\u08ff\u0901\5\u00d0i\2\u0900\u08f5")
        buf.write("\3\2\2\2\u0901\u0904\3\2\2\2\u0902\u0900\3\2\2\2\u0902")
        buf.write("\u0903\3\2\2\2\u0903\u0908\3\2\2\2\u0904\u0902\3\2\2\2")
        buf.write("\u0905\u0907\7\7\2\2\u0906\u0905\3\2\2\2\u0907\u090a\3")
        buf.write("\2\2\2\u0908\u0906\3\2\2\2\u0908\u0909\3\2\2\2\u0909\u090b")
        buf.write("\3\2\2\2\u090a\u0908\3\2\2\2\u090b\u090f\7#\2\2\u090c")
        buf.write("\u090e\7\7\2\2\u090d\u090c\3\2\2\2\u090e\u0911\3\2\2\2")
        buf.write("\u090f\u090d\3\2\2\2\u090f\u0910\3\2\2\2\u0910\u0912\3")
        buf.write("\2\2\2\u0911\u090f\3\2\2\2\u0912\u0914\5\u00caf\2\u0913")
        buf.write("\u0915\5\u0124\u0093\2\u0914\u0913\3\2\2\2\u0914\u0915")
        buf.write("\3\2\2\2\u0915\u0926\3\2\2\2\u0916\u091a\7M\2\2\u0917")
        buf.write("\u0919\7\7\2\2\u0918\u0917\3\2\2\2\u0919\u091c\3\2\2\2")
        buf.write("\u091a\u0918\3\2\2\2\u091a\u091b\3\2\2\2\u091b\u091d\3")
        buf.write("\2\2\2\u091c\u091a\3\2\2\2\u091d\u0921\7#\2\2\u091e\u0920")
        buf.write("\7\7\2\2\u091f\u091e\3\2\2\2\u0920\u0923\3\2\2\2\u0921")
        buf.write("\u091f\3\2\2\2\u0921\u0922\3\2\2\2\u0922\u0924\3\2\2\2")
        buf.write("\u0923\u0921\3\2\2\2\u0924\u0926\5\u00caf\2\u0925\u08f1")
        buf.write("\3\2\2\2\u0925\u0916\3\2\2\2\u0926\u00cf\3\2\2\2\u0927")
        buf.write("\u092b\5x=\2\u0928\u092b\5\u00d2j\2\u0929\u092b\5\u00d4")
        buf.write("k\2\u092a\u0927\3\2\2\2\u092a\u0928\3\2\2\2\u092a\u0929")
        buf.write("\3\2\2\2\u092b\u00d1\3\2\2\2\u092c\u0930\5\u00eex\2\u092d")
        buf.write("\u092f\7\7\2\2\u092e\u092d\3\2\2\2\u092f\u0932\3\2\2\2")
        buf.write("\u0930\u092e\3\2\2\2\u0930\u0931\3\2\2\2\u0931\u0933\3")
        buf.write("\2\2\2\u0932\u0930\3\2\2\2\u0933\u0934\5x=\2\u0934\u00d3")
        buf.write("\3\2\2\2\u0935\u0939\5\u00f0y\2\u0936\u0938\7\7\2\2\u0937")
        buf.write("\u0936\3\2\2\2\u0938\u093b\3\2\2\2\u0939\u0937\3\2\2\2")
        buf.write("\u0939\u093a\3\2\2\2\u093a\u093c\3\2\2\2\u093b\u0939\3")
        buf.write("\2\2\2\u093c\u093d\5V,\2\u093d\u00d5\3\2\2\2\u093e\u0942")
        buf.write("\7O\2\2\u093f\u0941\7\7\2\2\u0940\u093f\3\2\2\2\u0941")
        buf.write("\u0944\3\2\2\2\u0942\u0940\3\2\2\2\u0942\u0943\3\2\2\2")
        buf.write("\u0943\u0945\3\2\2\2\u0944\u0942\3\2\2\2\u0945\u094f\5")
        buf.write("n8\2\u0946\u0948\7\7\2\2\u0947\u0946\3\2\2\2\u0948\u094b")
        buf.write("\3\2\2\2\u0949\u0947\3\2\2\2\u0949\u094a\3\2\2\2\u094a")
        buf.write("\u094c\3\2\2\2\u094b\u0949\3\2\2\2\u094c\u094e\5\u00d8")
        buf.write("m\2\u094d\u0949\3\2\2\2\u094e\u0951\3\2\2\2\u094f\u094d")
        buf.write("\3\2\2\2\u094f\u0950\3\2\2\2\u0950\u0959\3\2\2\2\u0951")
        buf.write("\u094f\3\2\2\2\u0952\u0954\7\7\2\2\u0953\u0952\3\2\2\2")
        buf.write("\u0954\u0957\3\2\2\2\u0955\u0953\3\2\2\2\u0955\u0956\3")
        buf.write("\2\2\2\u0956\u0958\3\2\2\2\u0957\u0955\3\2\2\2\u0958\u095a")
        buf.write("\5\u00dan\2\u0959\u0955\3\2\2\2\u0959\u095a\3\2\2\2\u095a")
        buf.write("\u00d7\3\2\2\2\u095b\u095f\7P\2\2\u095c\u095e\7\7\2\2")
        buf.write("\u095d\u095c\3\2\2\2\u095e\u0961\3\2\2\2\u095f\u095d\3")
        buf.write("\2\2\2\u095f\u0960\3\2\2\2\u0960\u0962\3\2\2\2\u0961\u095f")
        buf.write("\3\2\2\2\u0962\u0966\7\13\2\2\u0963\u0965\5\u0116\u008c")
        buf.write("\2\u0964\u0963\3\2\2\2\u0965\u0968\3\2\2\2\u0966\u0964")
        buf.write("\3\2\2\2\u0966\u0967\3\2\2\2\u0967\u0969\3\2\2\2\u0968")
        buf.write("\u0966\3\2\2\2\u0969\u096a\5\u0122\u0092\2\u096a\u096b")
        buf.write("\7\33\2\2\u096b\u096c\5d\63\2\u096c\u0970\7\f\2\2\u096d")
        buf.write("\u096f\7\7\2\2\u096e\u096d\3\2\2\2\u096f\u0972\3\2\2\2")
        buf.write("\u0970\u096e\3\2\2\2\u0970\u0971\3\2\2\2\u0971\u0973\3")
        buf.write("\2\2\2\u0972\u0970\3\2\2\2\u0973\u0974\5n8\2\u0974\u00d9")
        buf.write("\3\2\2\2\u0975\u0979\7Q\2\2\u0976\u0978\7\7\2\2\u0977")
        buf.write("\u0976\3\2\2\2\u0978\u097b\3\2\2\2\u0979\u0977\3\2\2\2")
        buf.write("\u0979\u097a\3\2\2\2\u097a\u097c\3\2\2\2\u097b\u0979\3")
        buf.write("\2\2\2\u097c\u097d\5n8\2\u097d\u00db\3\2\2\2\u097e\u0982")
        buf.write("\5\u00dep\2\u097f\u0982\5\u00e0q\2\u0980\u0982\5\u00e2")
        buf.write("r\2\u0981\u097e\3\2\2\2\u0981\u097f\3\2\2\2\u0981\u0980")
        buf.write("\3\2\2\2\u0982\u00dd\3\2\2\2\u0983\u0987\7R\2\2\u0984")
        buf.write("\u0986\7\7\2\2\u0985\u0984\3\2\2\2\u0986\u0989\3\2\2\2")
        buf.write("\u0987\u0985\3\2\2\2\u0987\u0988\3\2\2\2\u0988\u098a\3")
        buf.write("\2\2\2\u0989\u0987\3\2\2\2\u098a\u098e\7\13\2\2\u098b")
        buf.write("\u098d\5\u0116\u008c\2\u098c\u098b\3\2\2\2\u098d\u0990")
        buf.write("\3\2\2\2\u098e\u098c\3\2\2\2\u098e\u098f\3\2\2\2\u098f")
        buf.write("\u0993\3\2\2\2\u0990\u098e\3\2\2\2\u0991\u0994\5J&\2\u0992")
        buf.write("\u0994\5H%\2\u0993\u0991\3\2\2\2\u0993\u0992\3\2\2\2\u0994")
        buf.write("\u0995\3\2\2\2\u0995\u0996\7[\2\2\u0996\u0997\5x=\2\u0997")
        buf.write("\u099b\7\f\2\2\u0998\u099a\7\7\2\2\u0999\u0998\3\2\2\2")
        buf.write("\u099a\u099d\3\2\2\2\u099b\u0999\3\2\2\2\u099b\u099c\3")
        buf.write("\2\2\2\u099c\u099f\3\2\2\2\u099d\u099b\3\2\2\2\u099e\u09a0")
        buf.write("\5\u00caf\2\u099f\u099e\3\2\2\2\u099f\u09a0\3\2\2\2\u09a0")
        buf.write("\u00df\3\2\2\2\u09a1\u09a5\7T\2\2\u09a2\u09a4\7\7\2\2")
        buf.write("\u09a3\u09a2\3\2\2\2\u09a4\u09a7\3\2\2\2\u09a5\u09a3\3")
        buf.write("\2\2\2\u09a5\u09a6\3\2\2\2\u09a6\u09a8\3\2\2\2\u09a7\u09a5")
        buf.write("\3\2\2\2\u09a8\u09a9\7\13\2\2\u09a9\u09aa\5x=\2\u09aa")
        buf.write("\u09ae\7\f\2\2\u09ab\u09ad\7\7\2\2\u09ac\u09ab\3\2\2\2")
        buf.write("\u09ad\u09b0\3\2\2\2\u09ae\u09ac\3\2\2\2\u09ae\u09af\3")
        buf.write("\2\2\2\u09af\u09b2\3\2\2\2\u09b0\u09ae\3\2\2\2\u09b1\u09b3")
        buf.write("\5\u00caf\2\u09b2\u09b1\3\2\2\2\u09b2\u09b3\3\2\2\2\u09b3")
        buf.write("\u00e1\3\2\2\2\u09b4\u09b8\7S\2\2\u09b5\u09b7\7\7\2\2")
        buf.write("\u09b6\u09b5\3\2\2\2\u09b7\u09ba\3\2\2\2\u09b8\u09b6\3")
        buf.write("\2\2\2\u09b8\u09b9\3\2\2\2\u09b9\u09bc\3\2\2\2\u09ba\u09b8")
        buf.write("\3\2\2\2\u09bb\u09bd\5\u00caf\2\u09bc\u09bb\3\2\2\2\u09bc")
        buf.write("\u09bd\3\2\2\2\u09bd\u09c1\3\2\2\2\u09be\u09c0\7\7\2\2")
        buf.write("\u09bf\u09be\3\2\2\2\u09c0\u09c3\3\2\2\2\u09c1\u09bf\3")
        buf.write("\2\2\2\u09c1\u09c2\3\2\2\2\u09c2\u09c4\3\2\2\2\u09c3\u09c1")
        buf.write("\3\2\2\2\u09c4\u09c8\7T\2\2\u09c5\u09c7\7\7\2\2\u09c6")
        buf.write("\u09c5\3\2\2\2\u09c7\u09ca\3\2\2\2\u09c8\u09c6\3\2\2\2")
        buf.write("\u09c8\u09c9\3\2\2\2\u09c9\u09cb\3\2\2\2\u09ca\u09c8\3")
        buf.write("\2\2\2\u09cb\u09cc\7\13\2\2\u09cc\u09cd\5x=\2\u09cd\u09ce")
        buf.write("\7\f\2\2\u09ce\u00e3\3\2\2\2\u09cf\u09d3\7U\2\2\u09d0")
        buf.write("\u09d2\7\7\2\2\u09d1\u09d0\3\2\2\2\u09d2\u09d5\3\2\2\2")
        buf.write("\u09d3\u09d1\3\2\2\2\u09d3\u09d4\3\2\2\2\u09d4\u09d6\3")
        buf.write("\2\2\2\u09d5\u09d3\3\2\2\2\u09d6\u09e0\5x=\2\u09d7\u09d9")
        buf.write("\t\7\2\2\u09d8\u09da\5x=\2\u09d9\u09d8\3\2\2\2\u09d9\u09da")
        buf.write("\3\2\2\2\u09da\u09e0\3\2\2\2\u09db\u09e0\7W\2\2\u09dc")
        buf.write("\u09e0\78\2\2\u09dd\u09e0\7X\2\2\u09de\u09e0\79\2\2\u09df")
        buf.write("\u09cf\3\2\2\2\u09df\u09d7\3\2\2\2\u09df\u09db\3\2\2\2")
        buf.write("\u09df\u09dc\3\2\2\2\u09df\u09dd\3\2\2\2\u09df\u09de\3")
        buf.write("\2\2\2\u09e0\u00e5\3\2\2\2\u09e1\u09eb\5d\63\2\u09e2\u09e6")
        buf.write("\7+\2\2\u09e3\u09e5\7\7\2\2\u09e4\u09e3\3\2\2\2\u09e5")
        buf.write("\u09e8\3\2\2\2\u09e6\u09e4\3\2\2\2\u09e6\u09e7\3\2\2\2")
        buf.write("\u09e7\u09ea\3\2\2\2\u09e8\u09e6\3\2\2\2\u09e9\u09e2\3")
        buf.write("\2\2\2\u09ea\u09ed\3\2\2\2\u09eb\u09e9\3\2\2\2\u09eb\u09ec")
        buf.write("\3\2\2\2\u09ec\u09ef\3\2\2\2\u09ed\u09eb\3\2\2\2\u09ee")
        buf.write("\u09e1\3\2\2\2\u09ee\u09ef\3\2\2\2\u09ef\u09f3\3\2\2\2")
        buf.write("\u09f0\u09f2\7\7\2\2\u09f1\u09f0\3\2\2\2\u09f2\u09f5\3")
        buf.write("\2\2\2\u09f3\u09f1\3\2\2\2\u09f3\u09f4\3\2\2\2\u09f4\u09f6")
        buf.write("\3\2\2\2\u09f5\u09f3\3\2\2\2\u09f6\u09fa\t\b\2\2\u09f7")
        buf.write("\u09f9\7\7\2\2\u09f8\u09f7\3\2\2\2\u09f9\u09fc\3\2\2\2")
        buf.write("\u09fa\u09f8\3\2\2\2\u09fa\u09fb\3\2\2\2\u09fb\u09ff\3")
        buf.write("\2\2\2\u09fc\u09fa\3\2\2\2\u09fd\u0a00\5\u0120\u0091\2")
        buf.write("\u09fe\u0a00\7=\2\2\u09ff\u09fd\3\2\2\2\u09ff\u09fe\3")
        buf.write("\2\2\2\u0a00\u0a11\3\2\2\2\u0a01\u0a05\7H\2\2\u0a02\u0a04")
        buf.write("\7\7\2\2\u0a03\u0a02\3\2\2\2\u0a04\u0a07\3\2\2\2\u0a05")
        buf.write("\u0a03\3\2\2\2\u0a05\u0a06\3\2\2\2\u0a06\u0a08\3\2\2\2")
        buf.write("\u0a07\u0a05\3\2\2\2\u0a08\u0a0c\7&\2\2\u0a09\u0a0b\7")
        buf.write("\7\2\2\u0a0a\u0a09\3\2\2\2\u0a0b\u0a0e\3\2\2\2\u0a0c\u0a0a")
        buf.write("\3\2\2\2\u0a0c\u0a0d\3\2\2\2\u0a0d\u0a0f\3\2\2\2\u0a0e")
        buf.write("\u0a0c\3\2\2\2\u0a0f\u0a11\7=\2\2\u0a10\u09ee\3\2\2\2")
        buf.write("\u0a10\u0a01\3\2\2\2\u0a11\u00e7\3\2\2\2\u0a12\u0a13\t")
        buf.write("\t\2\2\u0a13\u00e9\3\2\2\2\u0a14\u0a15\t\n\2\2\u0a15\u00eb")
        buf.write("\3\2\2\2\u0a16\u0a17\t\13\2\2\u0a17\u00ed\3\2\2\2\u0a18")
        buf.write("\u0a19\t\f\2\2\u0a19\u00ef\3\2\2\2\u0a1a\u0a1b\t\r\2\2")
        buf.write("\u0a1b\u00f1\3\2\2\2\u0a1c\u0a1d\t\16\2\2\u0a1d\u00f3")
        buf.write("\3\2\2\2\u0a1e\u0a1f\t\17\2\2\u0a1f\u00f5\3\2\2\2\u0a20")
        buf.write("\u0a21\t\20\2\2\u0a21\u00f7\3\2\2\2\u0a22\u0a2a\7\26\2")
        buf.write("\2\u0a23\u0a2a\7\27\2\2\u0a24\u0a2a\7\24\2\2\u0a25\u0a2a")
        buf.write("\7\25\2\2\u0a26\u0a2a\7\32\2\2\u0a27\u0a2a\5\u0116\u008c")
        buf.write("\2\u0a28\u0a2a\5\u0114\u008b\2\u0a29\u0a22\3\2\2\2\u0a29")
        buf.write("\u0a23\3\2\2\2\u0a29\u0a24\3\2\2\2\u0a29\u0a25\3\2\2\2")
        buf.write("\u0a29\u0a26\3\2\2\2\u0a29\u0a27\3\2\2\2\u0a29\u0a28\3")
        buf.write("\2\2\2\u0a2a\u00f9\3\2\2\2\u0a2b\u0a3b\7\26\2\2\u0a2c")
        buf.write("\u0a3b\7\27\2\2\u0a2d\u0a2e\7\32\2\2\u0a2e\u0a3b\7\32")
        buf.write("\2\2\u0a2f\u0a3b\5\u0098M\2\u0a30\u0a3b\5\u009cO\2\u0a31")
        buf.write("\u0a33\7\7\2\2\u0a32\u0a31\3\2\2\2\u0a33\u0a36\3\2\2\2")
        buf.write("\u0a34\u0a32\3\2\2\2\u0a34\u0a35\3\2\2\2\u0a35\u0a37\3")
        buf.write("\2\2\2\u0a36\u0a34\3\2\2\2\u0a37\u0a38\5\u00fc\177\2\u0a38")
        buf.write("\u0a39\5\u0092J\2\u0a39\u0a3b\3\2\2\2\u0a3a\u0a2b\3\2")
        buf.write("\2\2\u0a3a\u0a2c\3\2\2\2\u0a3a\u0a2d\3\2\2\2\u0a3a\u0a2f")
        buf.write("\3\2\2\2\u0a3a\u0a30\3\2\2\2\u0a3a\u0a34\3\2\2\2\u0a3b")
        buf.write("\u00fb\3\2\2\2\u0a3c\u0a40\7\t\2\2\u0a3d\u0a3e\7+\2\2")
        buf.write("\u0a3e\u0a40\7\t\2\2\u0a3f\u0a3c\3\2\2\2\u0a3f\u0a3d\3")
        buf.write("\2\2\2\u0a40\u00fd\3\2\2\2\u0a41\u0a44\5\u0116\u008c\2")
        buf.write("\u0a42\u0a44\5\u0100\u0081\2\u0a43\u0a41\3\2\2\2\u0a43")
        buf.write("\u0a42\3\2\2\2\u0a44\u0a45\3\2\2\2\u0a45\u0a43\3\2\2\2")
        buf.write("\u0a45\u0a46\3\2\2\2\u0a46\u00ff\3\2\2\2\u0a47\u0a51\5")
        buf.write("\u0102\u0082\2\u0a48\u0a51\5\u0104\u0083\2\u0a49\u0a51")
        buf.write("\5\u0106\u0084\2\u0a4a\u0a51\5\u0108\u0085\2\u0a4b\u0a51")
        buf.write("\5\u010a\u0086\2\u0a4c\u0a51\5\u010c\u0087\2\u0a4d\u0a51")
        buf.write("\5\u010e\u0088\2\u0a4e\u0a51\5\u0110\u0089\2\u0a4f\u0a51")
        buf.write("\5\u0112\u008a\2\u0a50\u0a47\3\2\2\2\u0a50\u0a48\3\2\2")
        buf.write("\2\u0a50\u0a49\3\2\2\2\u0a50\u0a4a\3\2\2\2\u0a50\u0a4b")
        buf.write("\3\2\2\2\u0a50\u0a4c\3\2\2\2\u0a50\u0a4d\3\2\2\2\u0a50")
        buf.write("\u0a4e\3\2\2\2\u0a50\u0a4f\3\2\2\2\u0a51\u0a55\3\2\2\2")
        buf.write("\u0a52\u0a54\7\7\2\2\u0a53\u0a52\3\2\2\2\u0a54\u0a57\3")
        buf.write("\2\2\2\u0a55\u0a53\3\2\2\2\u0a55\u0a56\3\2\2\2\u0a56\u0101")
        buf.write("\3\2\2\2\u0a57\u0a55\3\2\2\2\u0a58\u0a59\t\21\2\2\u0a59")
        buf.write("\u0103\3\2\2\2\u0a5a\u0a5b\t\22\2\2\u0a5b\u0105\3\2\2")
        buf.write("\2\u0a5c\u0a5d\t\23\2\2\u0a5d\u0107\3\2\2\2\u0a5e\u0a5f")
        buf.write("\t\24\2\2\u0a5f\u0109\3\2\2\2\u0a60\u0a61\t\25\2\2\u0a61")
        buf.write("\u010b\3\2\2\2\u0a62\u0a63\7}\2\2\u0a63\u010d\3\2\2\2")
        buf.write("\u0a64\u0a65\t\26\2\2\u0a65\u010f\3\2\2\2\u0a66\u0a67")
        buf.write("\t\27\2\2\u0a67\u0111\3\2\2\2\u0a68\u0a69\7\u0082\2\2")
        buf.write("\u0a69\u0113\3\2\2\2\u0a6a\u0a6e\7\u0091\2\2\u0a6b\u0a6d")
        buf.write("\7\7\2\2\u0a6c\u0a6b\3\2\2\2\u0a6d\u0a70\3\2\2\2\u0a6e")
        buf.write("\u0a6c\3\2\2\2\u0a6e\u0a6f\3\2\2\2\u0a6f\u0115\3\2\2\2")
        buf.write("\u0a70\u0a6e\3\2\2\2\u0a71\u0a74\5\u0118\u008d\2\u0a72")
        buf.write("\u0a74\5\u011a\u008e\2\u0a73\u0a71\3\2\2\2\u0a73\u0a72")
        buf.write("\3\2\2\2\u0a74\u0a78\3\2\2\2\u0a75\u0a77\7\7\2\2\u0a76")
        buf.write("\u0a75\3\2\2\2\u0a77\u0a7a\3\2\2\2\u0a78\u0a76\3\2\2\2")
        buf.write("\u0a78\u0a79\3\2\2\2\u0a79\u0117\3\2\2\2\u0a7a\u0a78\3")
        buf.write("\2\2\2\u0a7b\u0a7f\5\u011c\u008f\2\u0a7c\u0a7e\7\7\2\2")
        buf.write("\u0a7d\u0a7c\3\2\2\2\u0a7e\u0a81\3\2\2\2\u0a7f\u0a7d\3")
        buf.write("\2\2\2\u0a7f\u0a80\3\2\2\2\u0a80\u0a82\3\2\2\2\u0a81\u0a7f")
        buf.write("\3\2\2\2\u0a82\u0a86\7\33\2\2\u0a83\u0a85\7\7\2\2\u0a84")
        buf.write("\u0a83\3\2\2\2\u0a85\u0a88\3\2\2\2\u0a86\u0a84\3\2\2\2")
        buf.write("\u0a86\u0a87\3\2\2\2\u0a87\u0a89\3\2\2\2\u0a88\u0a86\3")
        buf.write("\2\2\2\u0a89\u0a8a\5\u011e\u0090\2\u0a8a\u0ab2\3\2\2\2")
        buf.write("\u0a8b\u0a9c\7\u0090\2\2\u0a8c\u0a8e\7\7\2\2\u0a8d\u0a8c")
        buf.write("\3\2\2\2\u0a8e\u0a91\3\2\2\2\u0a8f\u0a8d\3\2\2\2\u0a8f")
        buf.write("\u0a90\3\2\2\2\u0a90\u0a92\3\2\2\2\u0a91\u0a8f\3\2\2\2")
        buf.write("\u0a92\u0a96\7\t\2\2\u0a93\u0a95\7\7\2\2\u0a94\u0a93\3")
        buf.write("\2\2\2\u0a95\u0a98\3\2\2\2\u0a96\u0a94\3\2\2\2\u0a96\u0a97")
        buf.write("\3\2\2\2\u0a97\u0a99\3\2\2\2\u0a98\u0a96\3\2\2\2\u0a99")
        buf.write("\u0a9b\5\u0122\u0092\2\u0a9a\u0a8f\3\2\2\2\u0a9b\u0a9e")
        buf.write("\3\2\2\2\u0a9c\u0a9a\3\2\2\2\u0a9c\u0a9d\3\2\2\2\u0a9d")
        buf.write("\u0aa6\3\2\2\2\u0a9e\u0a9c\3\2\2\2\u0a9f\u0aa1\7\7\2\2")
        buf.write("\u0aa0\u0a9f\3\2\2\2\u0aa1\u0aa4\3\2\2\2\u0aa2\u0aa0\3")
        buf.write("\2\2\2\u0aa2\u0aa3\3\2\2\2\u0aa3\u0aa5\3\2\2\2\u0aa4\u0aa2")
        buf.write("\3\2\2\2\u0aa5\u0aa7\5\u00a0Q\2\u0aa6\u0aa2\3\2\2\2\u0aa6")
        buf.write("\u0aa7\3\2\2\2\u0aa7\u0aaf\3\2\2\2\u0aa8\u0aaa\7\7\2\2")
        buf.write("\u0aa9\u0aa8\3\2\2\2\u0aaa\u0aad\3\2\2\2\u0aab\u0aa9\3")
        buf.write("\2\2\2\u0aab\u0aac\3\2\2\2\u0aac\u0aae\3\2\2\2\u0aad\u0aab")
        buf.write("\3\2\2\2\u0aae\u0ab0\5\u009eP\2\u0aaf\u0aab\3\2\2\2\u0aaf")
        buf.write("\u0ab0\3\2\2\2\u0ab0\u0ab2\3\2\2\2\u0ab1\u0a7b\3\2\2\2")
        buf.write("\u0ab1\u0a8b\3\2\2\2\u0ab2\u0119\3\2\2\2\u0ab3\u0ab4\5")
        buf.write("\u011c\u008f\2\u0ab4\u0ab5\7\33\2\2\u0ab5\u0ab7\7\r\2")
        buf.write("\2\u0ab6\u0ab8\5\u011e\u0090\2\u0ab7\u0ab6\3\2\2\2\u0ab8")
        buf.write("\u0ab9\3\2\2\2\u0ab9\u0ab7\3\2\2\2\u0ab9\u0aba\3\2\2\2")
        buf.write("\u0aba\u0abb\3\2\2\2\u0abb\u0abc\7\16\2\2\u0abc\u0ac7")
        buf.write("\3\2\2\2\u0abd\u0abe\7*\2\2\u0abe\u0ac0\7\r\2\2\u0abf")
        buf.write("\u0ac1\5\u011e\u0090\2\u0ac0\u0abf\3\2\2\2\u0ac1\u0ac2")
        buf.write("\3\2\2\2\u0ac2\u0ac0\3\2\2\2\u0ac2\u0ac3\3\2\2\2\u0ac3")
        buf.write("\u0ac4\3\2\2\2\u0ac4\u0ac5\7\16\2\2\u0ac5\u0ac7\3\2\2")
        buf.write("\2\u0ac6\u0ab3\3\2\2\2\u0ac6\u0abd\3\2\2\2\u0ac7\u011b")
        buf.write("\3\2\2\2\u0ac8\u0ac9\t\30\2\2\u0ac9\u011d\3\2\2\2\u0aca")
        buf.write("\u0acc\5\u0120\u0091\2\u0acb\u0acd\5\u00a0Q\2\u0acc\u0acb")
        buf.write("\3\2\2\2\u0acc\u0acd\3\2\2\2\u0acd\u0acf\3\2\2\2\u0ace")
        buf.write("\u0ad0\5\u009eP\2\u0acf\u0ace\3\2\2\2\u0acf\u0ad0\3\2")
        buf.write("\2\2\u0ad0\u011f\3\2\2\2\u0ad1\u0adc\5\u0122\u0092\2\u0ad2")
        buf.write("\u0ad4\7\7\2\2\u0ad3\u0ad2\3\2\2\2\u0ad4\u0ad7\3\2\2\2")
        buf.write("\u0ad5\u0ad3\3\2\2\2\u0ad5\u0ad6\3\2\2\2\u0ad6\u0ad8\3")
        buf.write("\2\2\2\u0ad7\u0ad5\3\2\2\2\u0ad8\u0ad9\7\t\2\2\u0ad9\u0adb")
        buf.write("\5\u0122\u0092\2\u0ada\u0ad5\3\2\2\2\u0adb\u0ade\3\2\2")
        buf.write("\2\u0adc\u0ada\3\2\2\2\u0adc\u0add\3\2\2\2\u0add\u0121")
        buf.write("\3\2\2\2\u0ade\u0adc\3\2\2\2\u0adf\u0ae0\t\31\2\2\u0ae0")
        buf.write("\u0123\3\2\2\2\u0ae1\u0ae3\7\7\2\2\u0ae2\u0ae1\3\2\2\2")
        buf.write("\u0ae3\u0ae4\3\2\2\2\u0ae4\u0ae2\3\2\2\2\u0ae4\u0ae5\3")
        buf.write("\2\2\2\u0ae5\u0af4\3\2\2\2\u0ae6\u0ae8\7\7\2\2\u0ae7\u0ae6")
        buf.write("\3\2\2\2\u0ae8\u0aeb\3\2\2\2\u0ae9\u0ae7\3\2\2\2\u0ae9")
        buf.write("\u0aea\3\2\2\2\u0aea\u0aec\3\2\2\2\u0aeb\u0ae9\3\2\2\2")
        buf.write("\u0aec\u0af0\7\34\2\2\u0aed\u0aef\7\7\2\2\u0aee\u0aed")
        buf.write("\3\2\2\2\u0aef\u0af2\3\2\2\2\u0af0\u0aee\3\2\2\2\u0af0")
        buf.write("\u0af1\3\2\2\2\u0af1\u0af4\3\2\2\2\u0af2\u0af0\3\2\2\2")
        buf.write("\u0af3\u0ae2\3\2\2\2\u0af3\u0ae9\3\2\2\2\u0af4\u0125\3")
        buf.write("\2\2\2\u0af5\u0af6\t\32\2\2\u0af6\u0127\3\2\2\2\u01b1")
        buf.write("\u012b\u0132\u0139\u013c\u0140\u0143\u014a\u0151\u0158")
        buf.write("\u015b\u015f\u0162\u0167\u016f\u0177\u017c\u017f\u0183")
        buf.write("\u0186\u018b\u018d\u0192\u019a\u019d\u01a7\u01aa\u01b0")
        buf.write("\u01b7\u01bb\u01c0\u01c4\u01c9\u01d0\u01d4\u01d9\u01dd")
        buf.write("\u01e2\u01e9\u01ed\u01f0\u01f6\u01f9\u0203\u0207\u0209")
        buf.write("\u020e\u0211\u0218\u021d\u0224\u022b\u0231\u0237\u023d")
        buf.write("\u0246\u024d\u0256\u025c\u0262\u026f\u0274\u027a\u0280")
        buf.write("\u0286\u028d\u0294\u0298\u029d\u02a1\u02a7\u02af\u02b3")
        buf.write("\u02b9\u02bd\u02c2\u02c9\u02cf\u02d2\u02d7\u02e0\u02e5")
        buf.write("\u02e8\u02ed\u02f4\u02f8\u02fd\u0301\u0306\u030a\u030d")
        buf.write("\u0313\u031a\u031f\u0324\u0328\u032d\u0334\u0339\u033e")
        buf.write("\u0342\u0347\u034e\u0355\u0359\u035e\u0362\u0367\u036b")
        buf.write("\u0373\u0377\u0379\u037e\u0383\u038a\u038f\u0396\u039a")
        buf.write("\u039d\u03a3\u03aa\u03ae\u03b3\u03ba\u03be\u03c3\u03c7")
        buf.write("\u03ca\u03d0\u03d4\u03da\u03de\u03e3\u03ea\u03ee\u03f3")
        buf.write("\u03f7\u03fa\u0400\u0404\u0409\u0410\u0415\u041a\u041f")
        buf.write("\u0424\u0428\u042d\u0434\u0438\u043d\u0444\u0449\u0450")
        buf.write("\u0452\u045a\u0462\u0467\u0469\u046c\u0470\u0476\u047e")
        buf.write("\u0485\u0489\u048e\u0496\u049a\u049c\u049f\u04a3\u04a9")
        buf.write("\u04af\u04b1\u04b6\u04bc\u04c1\u04c4\u04ca\u04d1\u04d5")
        buf.write("\u04da\u04e1\u04ea\u04f1\u04f8\u04fe\u0504\u0508\u050d")
        buf.write("\u0513\u0518\u051d\u0522\u0529\u052d\u0530\u0536\u053d")
        buf.write("\u0540\u0542\u054a\u054f\u0555\u055d\u0563\u056a\u056d")
        buf.write("\u0573\u057a\u0582\u0588\u058f\u0595\u059c\u05a0\u05a6")
        buf.write("\u05ab\u05b0\u05b7\u05bc\u05c0\u05c6\u05ca\u05cf\u05d8")
        buf.write("\u05df\u05e6\u05ec\u05f2\u05f9\u0600\u060c\u0613\u0616")
        buf.write("\u061a\u061d\u0621\u0626\u062c\u0634\u063b\u0643\u064a")
        buf.write("\u0651\u0657\u065e\u0665\u066b\u0673\u067a\u0682\u0687")
        buf.write("\u068e\u0695\u069b\u06a0\u06a6\u06ad\u06b3\u06bb\u06c2")
        buf.write("\u06ca\u06d0\u06d8\u06df\u06e7\u06ee\u06f5\u06fd\u0703")
        buf.write("\u070a\u070f\u0720\u0728\u072d\u0734\u073a\u073c\u0741")
        buf.write("\u0745\u074a\u0755\u0758\u0762\u0768\u076c\u076e\u0776")
        buf.write("\u077d\u0784\u078a\u078e\u0793\u0798\u079b\u079f\u07a4")
        buf.write("\u07aa\u07b1\u07b4\u07b7\u07bc\u07ca\u07ce\u07d3\u07d5")
        buf.write("\u07df\u07e1\u07f5\u07fc\u0803\u080c\u0813\u081a\u0821")
        buf.write("\u0826\u0829\u082e\u0835\u083b\u0843\u084a\u084e\u0850")
        buf.write("\u0856\u085d\u0861\u0866\u086a\u086e\u0874\u087b\u0882")
        buf.write("\u0889\u088e\u0891\u0895\u089b\u08a4\u08a8\u08ab\u08b0")
        buf.write("\u08b7\u08bb\u08bd\u08c1\u08c7\u08ce\u08d3\u08da\u08e1")
        buf.write("\u08e6\u08ec\u08f5\u08fc\u0902\u0908\u090f\u0914\u091a")
        buf.write("\u0921\u0925\u092a\u0930\u0939\u0942\u0949\u094f\u0955")
        buf.write("\u0959\u095f\u0966\u0970\u0979\u0981\u0987\u098e\u0993")
        buf.write("\u099b\u099f\u09a5\u09ae\u09b2\u09b8\u09bc\u09c1\u09c8")
        buf.write("\u09d3\u09d9\u09df\u09e6\u09eb\u09ee\u09f3\u09fa\u09ff")
        buf.write("\u0a05\u0a0c\u0a10\u0a29\u0a34\u0a3a\u0a3f\u0a43\u0a45")
        buf.write("\u0a50\u0a55\u0a6e\u0a73\u0a78\u0a7f\u0a86\u0a8f\u0a96")
        buf.write("\u0a9c\u0aa2\u0aa6\u0aab\u0aaf\u0ab1\u0ab9\u0ac2\u0ac6")
        buf.write("\u0acc\u0acf\u0ad5\u0adc\u0ae4\u0ae9\u0af0\u0af3")
        return buf.getvalue()


class KotlinParser ( Parser ):

    grammarFileName = "KotlinParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'...'", "'.'", "','", "'('", 
                     "<INVALID>", "'['", "<INVALID>", "'{'", "'}'", "'*'", 
                     "'%'", "'/'", "'+'", "'-'", "'++'", "'--'", "'&&'", 
                     "'||'", "'!'", "':'", "';'", "'='", "'+='", "'-='", 
                     "'*='", "'/='", "'%='", "'->'", "'=>'", "'..'", "'::'", 
                     "'?::'", "';;'", "'#'", "'@'", "'?'", "'?:'", "'<'", 
                     "'>'", "'<='", "'>='", "'!='", "'!=='", "'as?'", "'=='", 
                     "'==='", "'''", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'@file'", "'package'", "'import'", "'class'", "'interface'", 
                     "'fun'", "'object'", "'val'", "'var'", "'typealias'", 
                     "'constructor'", "'by'", "'companion'", "'init'", "'this'", 
                     "'super'", "'typeof'", "'where'", "'if'", "'else'", 
                     "'when'", "'try'", "'catch'", "'finally'", "'for'", 
                     "'do'", "'while'", "'throw'", "'return'", "'continue'", 
                     "'break'", "'as'", "'is'", "'in'", "<INVALID>", "<INVALID>", 
                     "'out'", "'@field'", "'@property'", "'@get'", "'@set'", 
                     "'get'", "'set'", "'@receiver'", "'@param'", "'@setparam'", 
                     "'@delegate'", "'dynamic'", "'public'", "'private'", 
                     "'protected'", "'internal'", "'enum'", "'sealed'", 
                     "'annotation'", "'data'", "'inner'", "'tailrec'", "'operator'", 
                     "'inline'", "'infix'", "'external'", "'suspend'", "'override'", 
                     "'abstract'", "'final'", "'open'", "'const'", "'lateinit'", 
                     "'vararg'", "'noinline'", "'crossinline'", "'reified'", 
                     "<INVALID>", "'\"\"\"'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'null'" ]

    symbolicNames = [ "<INVALID>", "ShebangLine", "DelimitedComment", "LineComment", 
                      "WS", "NL", "RESERVED", "DOT", "COMMA", "LPAREN", 
                      "RPAREN", "LSQUARE", "RSQUARE", "LCURL", "RCURL", 
                      "MULT", "MOD", "DIV", "ADD", "SUB", "INCR", "DECR", 
                      "CONJ", "DISJ", "EXCL", "COLON", "SEMICOLON", "ASSIGNMENT", 
                      "ADD_ASSIGNMENT", "SUB_ASSIGNMENT", "MULT_ASSIGNMENT", 
                      "DIV_ASSIGNMENT", "MOD_ASSIGNMENT", "ARROW", "DOUBLE_ARROW", 
                      "RANGE", "COLONCOLON", "Q_COLONCOLON", "DOUBLE_SEMICOLON", 
                      "HASH", "AT", "QUEST", "ELVIS", "LANGLE", "RANGLE", 
                      "LE", "GE", "EXCL_EQ", "EXCL_EQEQ", "AS_SAFE", "EQEQ", 
                      "EQEQEQ", "SINGLE_QUOTE", "RETURN_AT", "CONTINUE_AT", 
                      "BREAK_AT", "FILE", "PACKAGE", "IMPORT", "CLASS", 
                      "INTERFACE", "FUN", "OBJECT", "VAL", "VAR", "TYPE_ALIAS", 
                      "CONSTRUCTOR", "BY", "COMPANION", "INIT", "THIS", 
                      "SUPER", "TYPEOF", "WHERE", "IF", "ELSE", "WHEN", 
                      "TRY", "CATCH", "FINALLY", "FOR", "DO", "WHILE", "THROW", 
                      "RETURN", "CONTINUE", "BREAK", "AS", "IS", "IN", "NOT_IS", 
                      "NOT_IN", "OUT", "FIELD", "PROPERTY", "GET", "SET", 
                      "GETTER", "SETTER", "RECEIVER", "PARAM", "SETPARAM", 
                      "DELEGATE", "DYNAMIC", "PUBLIC", "PRIVATE", "PROTECTED", 
                      "INTERNAL", "ENUM", "SEALED", "ANNOTATION", "DATA", 
                      "INNER", "TAILREC", "OPERATOR", "INLINE", "INFIX", 
                      "EXTERNAL", "SUSPEND", "OVERRIDE", "ABSTRACT", "FINAL", 
                      "OPEN", "CONST", "LATEINIT", "VARARG", "NOINLINE", 
                      "CROSSINLINE", "REIFIED", "QUOTE_OPEN", "TRIPLE_QUOTE_OPEN", 
                      "RealLiteral", "FloatLiteral", "DoubleLiteral", "LongLiteral", 
                      "IntegerLiteral", "HexLiteral", "BinLiteral", "BooleanLiteral", 
                      "NullLiteral", "Identifier", "PineIdentifier", "LabelReference", 
                      "LabelDefinition", "FieldIdentifier", "CharacterLiteral", 
                      "UNICODE_CLASS_LL", "UNICODE_CLASS_LM", "UNICODE_CLASS_LO", 
                      "UNICODE_CLASS_LT", "UNICODE_CLASS_LU", "UNICODE_CLASS_ND", 
                      "UNICODE_CLASS_NL", "Inside_Comment", "Inside_WS", 
                      "Inside_NL", "QUOTE_CLOSE", "LineStrRef", "LineStrText", 
                      "LineStrEscapedChar", "LineStrExprStart", "TRIPLE_QUOTE_CLOSE", 
                      "MultiLineStringQuote", "MultiLineStrRef", "MultiLineStrText", 
                      "MultiLineStrEscapedChar", "MultiLineStrExprStart", 
                      "MultiLineNL", "StrExpr_IN", "StrExpr_Comment", "StrExpr_WS", 
                      "StrExpr_NL", "COLOR" ]

    RULE_kotlinFile = 0
    RULE_script = 1
    RULE_preamble = 2
    RULE_fileAnnotations = 3
    RULE_fileAnnotation = 4
    RULE_packageHeader = 5
    RULE_importList = 6
    RULE_importHeader = 7
    RULE_importAlias = 8
    RULE_topLevelObject = 9
    RULE_classDeclaration = 10
    RULE_primaryConstructor = 11
    RULE_classParameters = 12
    RULE_classParameter = 13
    RULE_delegationSpecifiers = 14
    RULE_delegationSpecifier = 15
    RULE_constructorInvocation = 16
    RULE_explicitDelegation = 17
    RULE_classBody = 18
    RULE_classMemberDeclaration = 19
    RULE_anonymousInitializer = 20
    RULE_secondaryConstructor = 21
    RULE_constructorDelegationCall = 22
    RULE_enumClassBody = 23
    RULE_enumEntries = 24
    RULE_enumEntry = 25
    RULE_functionDeclaration = 26
    RULE_functionValueParameters = 27
    RULE_functionValueParameter = 28
    RULE_parameter = 29
    RULE_receiverType = 30
    RULE_functionBody = 31
    RULE_objectDeclaration = 32
    RULE_companionObject = 33
    RULE_propertyDeclaration = 34
    RULE_multiVariableDeclaration = 35
    RULE_variableDeclaration = 36
    RULE_getter = 37
    RULE_setter = 38
    RULE_typeAlias = 39
    RULE_typeParameters = 40
    RULE_typeParameter = 41
    RULE_type = 42
    RULE_typeModifierList = 43
    RULE_parenthesizedType = 44
    RULE_nullableType = 45
    RULE_typeReference = 46
    RULE_functionType = 47
    RULE_functionTypeReceiver = 48
    RULE_userType = 49
    RULE_simpleUserType = 50
    RULE_functionTypeParameters = 51
    RULE_typeConstraints = 52
    RULE_typeConstraint = 53
    RULE_block = 54
    RULE_statements = 55
    RULE_statement = 56
    RULE_blockLevelExpression = 57
    RULE_declaration = 58
    RULE_expression = 59
    RULE_disjunction = 60
    RULE_conjunction = 61
    RULE_equalityComparison = 62
    RULE_comparison = 63
    RULE_namedInfix = 64
    RULE_elvisExpression = 65
    RULE_infixFunctionCall = 66
    RULE_rangeExpression = 67
    RULE_additiveExpression = 68
    RULE_multiplicativeExpression = 69
    RULE_typeRHS = 70
    RULE_prefixUnaryExpression = 71
    RULE_postfixUnaryExpression = 72
    RULE_atomicExpression = 73
    RULE_parenthesizedExpression = 74
    RULE_callSuffix = 75
    RULE_annotatedLambda = 76
    RULE_arrayAccess = 77
    RULE_valueArguments = 78
    RULE_typeArguments = 79
    RULE_typeProjection = 80
    RULE_typeProjectionModifierList = 81
    RULE_valueArgument = 82
    RULE_literalConstant = 83
    RULE_stringLiteral = 84
    RULE_lineStringLiteral = 85
    RULE_multiLineStringLiteral = 86
    RULE_lineStringContent = 87
    RULE_lineStringExpression = 88
    RULE_multiLineStringContent = 89
    RULE_multiLineStringExpression = 90
    RULE_functionLiteral = 91
    RULE_lambdaParameters = 92
    RULE_lambdaParameter = 93
    RULE_objectLiteral = 94
    RULE_collectionLiteral = 95
    RULE_thisExpression = 96
    RULE_superExpression = 97
    RULE_conditionalExpression = 98
    RULE_ifExpression = 99
    RULE_controlStructureBody = 100
    RULE_whenExpression = 101
    RULE_whenEntry = 102
    RULE_whenCondition = 103
    RULE_rangeTest = 104
    RULE_typeTest = 105
    RULE_tryExpression = 106
    RULE_catchBlock = 107
    RULE_finallyBlock = 108
    RULE_loopExpression = 109
    RULE_forExpression = 110
    RULE_whileExpression = 111
    RULE_doWhileExpression = 112
    RULE_jumpExpression = 113
    RULE_callableReference = 114
    RULE_assignmentOperator = 115
    RULE_equalityOperation = 116
    RULE_comparisonOperator = 117
    RULE_inOperator = 118
    RULE_isOperator = 119
    RULE_additiveOperator = 120
    RULE_multiplicativeOperation = 121
    RULE_typeOperation = 122
    RULE_prefixUnaryOperation = 123
    RULE_postfixUnaryOperation = 124
    RULE_memberAccessOperator = 125
    RULE_modifierList = 126
    RULE_modifier = 127
    RULE_classModifier = 128
    RULE_memberModifier = 129
    RULE_visibilityModifier = 130
    RULE_varianceAnnotation = 131
    RULE_functionModifier = 132
    RULE_propertyModifier = 133
    RULE_inheritanceModifier = 134
    RULE_parameterModifier = 135
    RULE_typeParameterModifier = 136
    RULE_labelDefinition = 137
    RULE_annotations = 138
    RULE_annotation = 139
    RULE_annotationList = 140
    RULE_annotationUseSiteTarget = 141
    RULE_unescapedAnnotation = 142
    RULE_identifier = 143
    RULE_simpleIdentifier = 144
    RULE_semi = 145
    RULE_anysemi = 146

    ruleNames =  [ "kotlinFile", "script", "preamble", "fileAnnotations", 
                   "fileAnnotation", "packageHeader", "importList", "importHeader", 
                   "importAlias", "topLevelObject", "classDeclaration", 
                   "primaryConstructor", "classParameters", "classParameter", 
                   "delegationSpecifiers", "delegationSpecifier", "constructorInvocation", 
                   "explicitDelegation", "classBody", "classMemberDeclaration", 
                   "anonymousInitializer", "secondaryConstructor", "constructorDelegationCall", 
                   "enumClassBody", "enumEntries", "enumEntry", "functionDeclaration", 
                   "functionValueParameters", "functionValueParameter", 
                   "parameter", "receiverType", "functionBody", "objectDeclaration", 
                   "companionObject", "propertyDeclaration", "multiVariableDeclaration", 
                   "variableDeclaration", "getter", "setter", "typeAlias", 
                   "typeParameters", "typeParameter", "type", "typeModifierList", 
                   "parenthesizedType", "nullableType", "typeReference", 
                   "functionType", "functionTypeReceiver", "userType", "simpleUserType", 
                   "functionTypeParameters", "typeConstraints", "typeConstraint", 
                   "block", "statements", "statement", "blockLevelExpression", 
                   "declaration", "expression", "disjunction", "conjunction", 
                   "equalityComparison", "comparison", "namedInfix", "elvisExpression", 
                   "infixFunctionCall", "rangeExpression", "additiveExpression", 
                   "multiplicativeExpression", "typeRHS", "prefixUnaryExpression", 
                   "postfixUnaryExpression", "atomicExpression", "parenthesizedExpression", 
                   "callSuffix", "annotatedLambda", "arrayAccess", "valueArguments", 
                   "typeArguments", "typeProjection", "typeProjectionModifierList", 
                   "valueArgument", "literalConstant", "stringLiteral", 
                   "lineStringLiteral", "multiLineStringLiteral", "lineStringContent", 
                   "lineStringExpression", "multiLineStringContent", "multiLineStringExpression", 
                   "functionLiteral", "lambdaParameters", "lambdaParameter", 
                   "objectLiteral", "collectionLiteral", "thisExpression", 
                   "superExpression", "conditionalExpression", "ifExpression", 
                   "controlStructureBody", "whenExpression", "whenEntry", 
                   "whenCondition", "rangeTest", "typeTest", "tryExpression", 
                   "catchBlock", "finallyBlock", "loopExpression", "forExpression", 
                   "whileExpression", "doWhileExpression", "jumpExpression", 
                   "callableReference", "assignmentOperator", "equalityOperation", 
                   "comparisonOperator", "inOperator", "isOperator", "additiveOperator", 
                   "multiplicativeOperation", "typeOperation", "prefixUnaryOperation", 
                   "postfixUnaryOperation", "memberAccessOperator", "modifierList", 
                   "modifier", "classModifier", "memberModifier", "visibilityModifier", 
                   "varianceAnnotation", "functionModifier", "propertyModifier", 
                   "inheritanceModifier", "parameterModifier", "typeParameterModifier", 
                   "labelDefinition", "annotations", "annotation", "annotationList", 
                   "annotationUseSiteTarget", "unescapedAnnotation", "identifier", 
                   "simpleIdentifier", "semi", "anysemi" ]

    EOF = Token.EOF
    ShebangLine=1
    DelimitedComment=2
    LineComment=3
    WS=4
    NL=5
    RESERVED=6
    DOT=7
    COMMA=8
    LPAREN=9
    RPAREN=10
    LSQUARE=11
    RSQUARE=12
    LCURL=13
    RCURL=14
    MULT=15
    MOD=16
    DIV=17
    ADD=18
    SUB=19
    INCR=20
    DECR=21
    CONJ=22
    DISJ=23
    EXCL=24
    COLON=25
    SEMICOLON=26
    ASSIGNMENT=27
    ADD_ASSIGNMENT=28
    SUB_ASSIGNMENT=29
    MULT_ASSIGNMENT=30
    DIV_ASSIGNMENT=31
    MOD_ASSIGNMENT=32
    ARROW=33
    DOUBLE_ARROW=34
    RANGE=35
    COLONCOLON=36
    Q_COLONCOLON=37
    DOUBLE_SEMICOLON=38
    HASH=39
    AT=40
    QUEST=41
    ELVIS=42
    LANGLE=43
    RANGLE=44
    LE=45
    GE=46
    EXCL_EQ=47
    EXCL_EQEQ=48
    AS_SAFE=49
    EQEQ=50
    EQEQEQ=51
    SINGLE_QUOTE=52
    RETURN_AT=53
    CONTINUE_AT=54
    BREAK_AT=55
    FILE=56
    PACKAGE=57
    IMPORT=58
    CLASS=59
    INTERFACE=60
    FUN=61
    OBJECT=62
    VAL=63
    VAR=64
    TYPE_ALIAS=65
    CONSTRUCTOR=66
    BY=67
    COMPANION=68
    INIT=69
    THIS=70
    SUPER=71
    TYPEOF=72
    WHERE=73
    IF=74
    ELSE=75
    WHEN=76
    TRY=77
    CATCH=78
    FINALLY=79
    FOR=80
    DO=81
    WHILE=82
    THROW=83
    RETURN=84
    CONTINUE=85
    BREAK=86
    AS=87
    IS=88
    IN=89
    NOT_IS=90
    NOT_IN=91
    OUT=92
    FIELD=93
    PROPERTY=94
    GET=95
    SET=96
    GETTER=97
    SETTER=98
    RECEIVER=99
    PARAM=100
    SETPARAM=101
    DELEGATE=102
    DYNAMIC=103
    PUBLIC=104
    PRIVATE=105
    PROTECTED=106
    INTERNAL=107
    ENUM=108
    SEALED=109
    ANNOTATION=110
    DATA=111
    INNER=112
    TAILREC=113
    OPERATOR=114
    INLINE=115
    INFIX=116
    EXTERNAL=117
    SUSPEND=118
    OVERRIDE=119
    ABSTRACT=120
    FINAL=121
    OPEN=122
    CONST=123
    LATEINIT=124
    VARARG=125
    NOINLINE=126
    CROSSINLINE=127
    REIFIED=128
    QUOTE_OPEN=129
    TRIPLE_QUOTE_OPEN=130
    RealLiteral=131
    FloatLiteral=132
    DoubleLiteral=133
    LongLiteral=134
    IntegerLiteral=135
    HexLiteral=136
    BinLiteral=137
    BooleanLiteral=138
    NullLiteral=139
    Identifier=140
    PineIdentifier=141
    LabelReference=142
    LabelDefinition=143
    FieldIdentifier=144
    CharacterLiteral=145
    UNICODE_CLASS_LL=146
    UNICODE_CLASS_LM=147
    UNICODE_CLASS_LO=148
    UNICODE_CLASS_LT=149
    UNICODE_CLASS_LU=150
    UNICODE_CLASS_ND=151
    UNICODE_CLASS_NL=152
    Inside_Comment=153
    Inside_WS=154
    Inside_NL=155
    QUOTE_CLOSE=156
    LineStrRef=157
    LineStrText=158
    LineStrEscapedChar=159
    LineStrExprStart=160
    TRIPLE_QUOTE_CLOSE=161
    MultiLineStringQuote=162
    MultiLineStrRef=163
    MultiLineStrText=164
    MultiLineStrEscapedChar=165
    MultiLineStrExprStart=166
    MultiLineNL=167
    StrExpr_IN=168
    StrExpr_Comment=169
    StrExpr_WS=170
    StrExpr_NL=171
    COLOR=172

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class KotlinFileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def preamble(self):
            return self.getTypedRuleContext(KotlinParser.PreambleContext,0)


        def EOF(self):
            return self.getToken(KotlinParser.EOF, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def anysemi(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnysemiContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnysemiContext,i)


        def topLevelObject(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TopLevelObjectContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TopLevelObjectContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_kotlinFile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKotlinFile" ):
                listener.enterKotlinFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKotlinFile" ):
                listener.exitKotlinFile(self)




    def kotlinFile(self):

        localctx = KotlinParser.KotlinFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_kotlinFile)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 297
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 294
                    self.match(KotlinParser.NL) 
                self.state = 299
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 300
            self.preamble()
            self.state = 304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL or _la==KotlinParser.SEMICOLON:
                self.state = 301
                self.anysemi()
                self.state = 306
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (KotlinParser.AT - 40)) | (1 << (KotlinParser.FILE - 40)) | (1 << (KotlinParser.CLASS - 40)) | (1 << (KotlinParser.INTERFACE - 40)) | (1 << (KotlinParser.FUN - 40)) | (1 << (KotlinParser.OBJECT - 40)) | (1 << (KotlinParser.VAL - 40)) | (1 << (KotlinParser.VAR - 40)) | (1 << (KotlinParser.TYPE_ALIAS - 40)) | (1 << (KotlinParser.IN - 40)) | (1 << (KotlinParser.OUT - 40)) | (1 << (KotlinParser.FIELD - 40)) | (1 << (KotlinParser.PROPERTY - 40)) | (1 << (KotlinParser.GET - 40)) | (1 << (KotlinParser.SET - 40)) | (1 << (KotlinParser.RECEIVER - 40)) | (1 << (KotlinParser.PARAM - 40)) | (1 << (KotlinParser.SETPARAM - 40)) | (1 << (KotlinParser.DELEGATE - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (KotlinParser.PUBLIC - 104)) | (1 << (KotlinParser.PRIVATE - 104)) | (1 << (KotlinParser.PROTECTED - 104)) | (1 << (KotlinParser.INTERNAL - 104)) | (1 << (KotlinParser.ENUM - 104)) | (1 << (KotlinParser.SEALED - 104)) | (1 << (KotlinParser.ANNOTATION - 104)) | (1 << (KotlinParser.DATA - 104)) | (1 << (KotlinParser.INNER - 104)) | (1 << (KotlinParser.TAILREC - 104)) | (1 << (KotlinParser.OPERATOR - 104)) | (1 << (KotlinParser.INLINE - 104)) | (1 << (KotlinParser.INFIX - 104)) | (1 << (KotlinParser.EXTERNAL - 104)) | (1 << (KotlinParser.SUSPEND - 104)) | (1 << (KotlinParser.OVERRIDE - 104)) | (1 << (KotlinParser.ABSTRACT - 104)) | (1 << (KotlinParser.FINAL - 104)) | (1 << (KotlinParser.OPEN - 104)) | (1 << (KotlinParser.CONST - 104)) | (1 << (KotlinParser.LATEINIT - 104)) | (1 << (KotlinParser.VARARG - 104)) | (1 << (KotlinParser.NOINLINE - 104)) | (1 << (KotlinParser.CROSSINLINE - 104)) | (1 << (KotlinParser.REIFIED - 104)) | (1 << (KotlinParser.LabelReference - 104)))) != 0):
                self.state = 307
                self.topLevelObject()
                self.state = 318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL or _la==KotlinParser.SEMICOLON:
                    self.state = 309 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 308
                            self.anysemi()

                        else:
                            raise NoViableAltException(self)
                        self.state = 311 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

                    self.state = 314
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (KotlinParser.AT - 40)) | (1 << (KotlinParser.FILE - 40)) | (1 << (KotlinParser.CLASS - 40)) | (1 << (KotlinParser.INTERFACE - 40)) | (1 << (KotlinParser.FUN - 40)) | (1 << (KotlinParser.OBJECT - 40)) | (1 << (KotlinParser.VAL - 40)) | (1 << (KotlinParser.VAR - 40)) | (1 << (KotlinParser.TYPE_ALIAS - 40)) | (1 << (KotlinParser.IN - 40)) | (1 << (KotlinParser.OUT - 40)) | (1 << (KotlinParser.FIELD - 40)) | (1 << (KotlinParser.PROPERTY - 40)) | (1 << (KotlinParser.GET - 40)) | (1 << (KotlinParser.SET - 40)) | (1 << (KotlinParser.RECEIVER - 40)) | (1 << (KotlinParser.PARAM - 40)) | (1 << (KotlinParser.SETPARAM - 40)) | (1 << (KotlinParser.DELEGATE - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (KotlinParser.PUBLIC - 104)) | (1 << (KotlinParser.PRIVATE - 104)) | (1 << (KotlinParser.PROTECTED - 104)) | (1 << (KotlinParser.INTERNAL - 104)) | (1 << (KotlinParser.ENUM - 104)) | (1 << (KotlinParser.SEALED - 104)) | (1 << (KotlinParser.ANNOTATION - 104)) | (1 << (KotlinParser.DATA - 104)) | (1 << (KotlinParser.INNER - 104)) | (1 << (KotlinParser.TAILREC - 104)) | (1 << (KotlinParser.OPERATOR - 104)) | (1 << (KotlinParser.INLINE - 104)) | (1 << (KotlinParser.INFIX - 104)) | (1 << (KotlinParser.EXTERNAL - 104)) | (1 << (KotlinParser.SUSPEND - 104)) | (1 << (KotlinParser.OVERRIDE - 104)) | (1 << (KotlinParser.ABSTRACT - 104)) | (1 << (KotlinParser.FINAL - 104)) | (1 << (KotlinParser.OPEN - 104)) | (1 << (KotlinParser.CONST - 104)) | (1 << (KotlinParser.LATEINIT - 104)) | (1 << (KotlinParser.VARARG - 104)) | (1 << (KotlinParser.NOINLINE - 104)) | (1 << (KotlinParser.CROSSINLINE - 104)) | (1 << (KotlinParser.REIFIED - 104)) | (1 << (KotlinParser.LabelReference - 104)))) != 0):
                        self.state = 313
                        self.topLevelObject()


                    self.state = 320
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 323
            self.match(KotlinParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def preamble(self):
            return self.getTypedRuleContext(KotlinParser.PreambleContext,0)


        def EOF(self):
            return self.getToken(KotlinParser.EOF, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def anysemi(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnysemiContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnysemiContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ExpressionContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_script

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScript" ):
                listener.enterScript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScript" ):
                listener.exitScript(self)




    def script(self):

        localctx = KotlinParser.ScriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_script)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 328
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 325
                    self.match(KotlinParser.NL) 
                self.state = 330
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

            self.state = 331
            self.preamble()
            self.state = 335
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 332
                    self.anysemi() 
                self.state = 337
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

            self.state = 352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.NL) | (1 << KotlinParser.LPAREN) | (1 << KotlinParser.LSQUARE) | (1 << KotlinParser.LCURL) | (1 << KotlinParser.ADD) | (1 << KotlinParser.SUB) | (1 << KotlinParser.INCR) | (1 << KotlinParser.DECR) | (1 << KotlinParser.EXCL) | (1 << KotlinParser.COLONCOLON) | (1 << KotlinParser.Q_COLONCOLON) | (1 << KotlinParser.AT) | (1 << KotlinParser.RETURN_AT) | (1 << KotlinParser.CONTINUE_AT) | (1 << KotlinParser.BREAK_AT) | (1 << KotlinParser.FILE) | (1 << KotlinParser.IMPORT) | (1 << KotlinParser.OBJECT) | (1 << KotlinParser.VAL))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (KotlinParser.CONSTRUCTOR - 66)) | (1 << (KotlinParser.BY - 66)) | (1 << (KotlinParser.COMPANION - 66)) | (1 << (KotlinParser.INIT - 66)) | (1 << (KotlinParser.THIS - 66)) | (1 << (KotlinParser.SUPER - 66)) | (1 << (KotlinParser.WHERE - 66)) | (1 << (KotlinParser.IF - 66)) | (1 << (KotlinParser.WHEN - 66)) | (1 << (KotlinParser.TRY - 66)) | (1 << (KotlinParser.CATCH - 66)) | (1 << (KotlinParser.FINALLY - 66)) | (1 << (KotlinParser.FOR - 66)) | (1 << (KotlinParser.DO - 66)) | (1 << (KotlinParser.WHILE - 66)) | (1 << (KotlinParser.THROW - 66)) | (1 << (KotlinParser.RETURN - 66)) | (1 << (KotlinParser.CONTINUE - 66)) | (1 << (KotlinParser.BREAK - 66)) | (1 << (KotlinParser.OUT - 66)) | (1 << (KotlinParser.FIELD - 66)) | (1 << (KotlinParser.PROPERTY - 66)) | (1 << (KotlinParser.GET - 66)) | (1 << (KotlinParser.SET - 66)) | (1 << (KotlinParser.GETTER - 66)) | (1 << (KotlinParser.SETTER - 66)) | (1 << (KotlinParser.RECEIVER - 66)) | (1 << (KotlinParser.PARAM - 66)) | (1 << (KotlinParser.SETPARAM - 66)) | (1 << (KotlinParser.DELEGATE - 66)) | (1 << (KotlinParser.DYNAMIC - 66)) | (1 << (KotlinParser.PUBLIC - 66)) | (1 << (KotlinParser.PRIVATE - 66)) | (1 << (KotlinParser.PROTECTED - 66)) | (1 << (KotlinParser.INTERNAL - 66)) | (1 << (KotlinParser.ENUM - 66)) | (1 << (KotlinParser.SEALED - 66)) | (1 << (KotlinParser.ANNOTATION - 66)) | (1 << (KotlinParser.DATA - 66)) | (1 << (KotlinParser.INNER - 66)) | (1 << (KotlinParser.TAILREC - 66)) | (1 << (KotlinParser.OPERATOR - 66)) | (1 << (KotlinParser.INLINE - 66)) | (1 << (KotlinParser.INFIX - 66)) | (1 << (KotlinParser.EXTERNAL - 66)) | (1 << (KotlinParser.SUSPEND - 66)) | (1 << (KotlinParser.OVERRIDE - 66)) | (1 << (KotlinParser.ABSTRACT - 66)) | (1 << (KotlinParser.FINAL - 66)) | (1 << (KotlinParser.OPEN - 66)) | (1 << (KotlinParser.CONST - 66)) | (1 << (KotlinParser.LATEINIT - 66)) | (1 << (KotlinParser.VARARG - 66)) | (1 << (KotlinParser.NOINLINE - 66)) | (1 << (KotlinParser.CROSSINLINE - 66)) | (1 << (KotlinParser.REIFIED - 66)) | (1 << (KotlinParser.QUOTE_OPEN - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (KotlinParser.TRIPLE_QUOTE_OPEN - 130)) | (1 << (KotlinParser.RealLiteral - 130)) | (1 << (KotlinParser.LongLiteral - 130)) | (1 << (KotlinParser.IntegerLiteral - 130)) | (1 << (KotlinParser.HexLiteral - 130)) | (1 << (KotlinParser.BinLiteral - 130)) | (1 << (KotlinParser.BooleanLiteral - 130)) | (1 << (KotlinParser.NullLiteral - 130)) | (1 << (KotlinParser.Identifier - 130)) | (1 << (KotlinParser.LabelReference - 130)) | (1 << (KotlinParser.LabelDefinition - 130)) | (1 << (KotlinParser.CharacterLiteral - 130)))) != 0):
                self.state = 338
                self.expression()
                self.state = 349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL or _la==KotlinParser.SEMICOLON:
                    self.state = 340 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 339
                            self.anysemi()

                        else:
                            raise NoViableAltException(self)
                        self.state = 342 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

                    self.state = 345
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                    if la_ == 1:
                        self.state = 344
                        self.expression()


                    self.state = 351
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 354
            self.match(KotlinParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PreambleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def packageHeader(self):
            return self.getTypedRuleContext(KotlinParser.PackageHeaderContext,0)


        def importList(self):
            return self.getTypedRuleContext(KotlinParser.ImportListContext,0)


        def fileAnnotations(self):
            return self.getTypedRuleContext(KotlinParser.FileAnnotationsContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_preamble

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreamble" ):
                listener.enterPreamble(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreamble" ):
                listener.exitPreamble(self)




    def preamble(self):

        localctx = KotlinParser.PreambleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_preamble)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 356
                self.fileAnnotations()


            self.state = 359
            self.packageHeader()
            self.state = 360
            self.importList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FileAnnotationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fileAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.FileAnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.FileAnnotationContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_fileAnnotations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileAnnotations" ):
                listener.enterFileAnnotations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileAnnotations" ):
                listener.exitFileAnnotations(self)




    def fileAnnotations(self):

        localctx = KotlinParser.FileAnnotationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_fileAnnotations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 362
                    self.fileAnnotation()

                else:
                    raise NoViableAltException(self)
                self.state = 365 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FileAnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILE(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.FILE)
            else:
                return self.getToken(KotlinParser.FILE, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COLON)
            else:
                return self.getToken(KotlinParser.COLON, i)

        def LSQUARE(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.LSQUARE)
            else:
                return self.getToken(KotlinParser.LSQUARE, i)

        def RSQUARE(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.RSQUARE)
            else:
                return self.getToken(KotlinParser.RSQUARE, i)

        def unescapedAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.UnescapedAnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.UnescapedAnnotationContext,i)


        def semi(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.SemiContext)
            else:
                return self.getTypedRuleContext(KotlinParser.SemiContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_fileAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileAnnotation" ):
                listener.enterFileAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileAnnotation" ):
                listener.exitFileAnnotation(self)




    def fileAnnotation(self):

        localctx = KotlinParser.FileAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_fileAnnotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 383 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 367
                    self.match(KotlinParser.FILE)
                    self.state = 368
                    self.match(KotlinParser.COLON)
                    self.state = 378
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [KotlinParser.LSQUARE]:
                        self.state = 369
                        self.match(KotlinParser.LSQUARE)
                        self.state = 371 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 370
                            self.unescapedAnnotation()
                            self.state = 373 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (KotlinParser.IMPORT - 58)) | (1 << (KotlinParser.CONSTRUCTOR - 58)) | (1 << (KotlinParser.BY - 58)) | (1 << (KotlinParser.COMPANION - 58)) | (1 << (KotlinParser.INIT - 58)) | (1 << (KotlinParser.WHERE - 58)) | (1 << (KotlinParser.CATCH - 58)) | (1 << (KotlinParser.FINALLY - 58)) | (1 << (KotlinParser.OUT - 58)) | (1 << (KotlinParser.GETTER - 58)) | (1 << (KotlinParser.SETTER - 58)) | (1 << (KotlinParser.DYNAMIC - 58)) | (1 << (KotlinParser.PUBLIC - 58)) | (1 << (KotlinParser.PRIVATE - 58)) | (1 << (KotlinParser.PROTECTED - 58)) | (1 << (KotlinParser.INTERNAL - 58)) | (1 << (KotlinParser.ENUM - 58)) | (1 << (KotlinParser.SEALED - 58)) | (1 << (KotlinParser.ANNOTATION - 58)) | (1 << (KotlinParser.DATA - 58)) | (1 << (KotlinParser.INNER - 58)) | (1 << (KotlinParser.TAILREC - 58)) | (1 << (KotlinParser.OPERATOR - 58)) | (1 << (KotlinParser.INLINE - 58)) | (1 << (KotlinParser.INFIX - 58)) | (1 << (KotlinParser.EXTERNAL - 58)) | (1 << (KotlinParser.SUSPEND - 58)) | (1 << (KotlinParser.OVERRIDE - 58)) | (1 << (KotlinParser.ABSTRACT - 58)) | (1 << (KotlinParser.FINAL - 58)))) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & ((1 << (KotlinParser.OPEN - 122)) | (1 << (KotlinParser.CONST - 122)) | (1 << (KotlinParser.LATEINIT - 122)) | (1 << (KotlinParser.VARARG - 122)) | (1 << (KotlinParser.NOINLINE - 122)) | (1 << (KotlinParser.CROSSINLINE - 122)) | (1 << (KotlinParser.REIFIED - 122)) | (1 << (KotlinParser.Identifier - 122)))) != 0)):
                                break

                        self.state = 375
                        self.match(KotlinParser.RSQUARE)
                        pass
                    elif token in [KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.OUT, KotlinParser.GETTER, KotlinParser.SETTER, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.Identifier]:
                        self.state = 377
                        self.unescapedAnnotation()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 381
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                    if la_ == 1:
                        self.state = 380
                        self.semi()



                else:
                    raise NoViableAltException(self)
                self.state = 385 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PackageHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACKAGE(self):
            return self.getToken(KotlinParser.PACKAGE, 0)

        def identifier(self):
            return self.getTypedRuleContext(KotlinParser.IdentifierContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def semi(self):
            return self.getTypedRuleContext(KotlinParser.SemiContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_packageHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageHeader" ):
                listener.enterPackageHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageHeader" ):
                listener.exitPackageHeader(self)




    def packageHeader(self):

        localctx = KotlinParser.PackageHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_packageHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                    self.state = 387
                    self.modifierList()


                self.state = 390
                self.match(KotlinParser.PACKAGE)
                self.state = 391
                self.identifier()
                self.state = 393
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                if la_ == 1:
                    self.state = 392
                    self.semi()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importHeader(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ImportHeaderContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ImportHeaderContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_importList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportList" ):
                listener.enterImportList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportList" ):
                listener.exitImportList(self)




    def importList(self):

        localctx = KotlinParser.ImportListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_importList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 397
                    self.importHeader() 
                self.state = 402
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(KotlinParser.IMPORT, 0)

        def identifier(self):
            return self.getTypedRuleContext(KotlinParser.IdentifierContext,0)


        def DOT(self):
            return self.getToken(KotlinParser.DOT, 0)

        def MULT(self):
            return self.getToken(KotlinParser.MULT, 0)

        def importAlias(self):
            return self.getTypedRuleContext(KotlinParser.ImportAliasContext,0)


        def semi(self):
            return self.getTypedRuleContext(KotlinParser.SemiContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_importHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportHeader" ):
                listener.enterImportHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportHeader" ):
                listener.exitImportHeader(self)




    def importHeader(self):

        localctx = KotlinParser.ImportHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_importHeader)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 403
            self.match(KotlinParser.IMPORT)
            self.state = 404
            self.identifier()
            self.state = 408
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.DOT]:
                self.state = 405
                self.match(KotlinParser.DOT)
                self.state = 406
                self.match(KotlinParser.MULT)
                pass
            elif token in [KotlinParser.AS]:
                self.state = 407
                self.importAlias()
                pass
            elif token in [KotlinParser.EOF, KotlinParser.NL, KotlinParser.LPAREN, KotlinParser.LSQUARE, KotlinParser.LCURL, KotlinParser.ADD, KotlinParser.SUB, KotlinParser.INCR, KotlinParser.DECR, KotlinParser.EXCL, KotlinParser.SEMICOLON, KotlinParser.COLONCOLON, KotlinParser.Q_COLONCOLON, KotlinParser.AT, KotlinParser.RETURN_AT, KotlinParser.CONTINUE_AT, KotlinParser.BREAK_AT, KotlinParser.FILE, KotlinParser.IMPORT, KotlinParser.CLASS, KotlinParser.INTERFACE, KotlinParser.FUN, KotlinParser.OBJECT, KotlinParser.VAL, KotlinParser.VAR, KotlinParser.TYPE_ALIAS, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.THIS, KotlinParser.SUPER, KotlinParser.WHERE, KotlinParser.IF, KotlinParser.WHEN, KotlinParser.TRY, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.FOR, KotlinParser.DO, KotlinParser.WHILE, KotlinParser.THROW, KotlinParser.RETURN, KotlinParser.CONTINUE, KotlinParser.BREAK, KotlinParser.IN, KotlinParser.OUT, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.GETTER, KotlinParser.SETTER, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.QUOTE_OPEN, KotlinParser.TRIPLE_QUOTE_OPEN, KotlinParser.RealLiteral, KotlinParser.LongLiteral, KotlinParser.IntegerLiteral, KotlinParser.HexLiteral, KotlinParser.BinLiteral, KotlinParser.BooleanLiteral, KotlinParser.NullLiteral, KotlinParser.Identifier, KotlinParser.LabelReference, KotlinParser.LabelDefinition, KotlinParser.CharacterLiteral]:
                pass
            else:
                pass
            self.state = 411
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 410
                self.semi()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(KotlinParser.AS, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_importAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportAlias" ):
                listener.enterImportAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportAlias" ):
                listener.exitImportAlias(self)




    def importAlias(self):

        localctx = KotlinParser.ImportAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_importAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self.match(KotlinParser.AS)
            self.state = 414
            self.simpleIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TopLevelObjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.ClassDeclarationContext,0)


        def objectDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.ObjectDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.FunctionDeclarationContext,0)


        def propertyDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.PropertyDeclarationContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(KotlinParser.TypeAliasContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_topLevelObject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelObject" ):
                listener.enterTopLevelObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelObject" ):
                listener.exitTopLevelObject(self)




    def topLevelObject(self):

        localctx = KotlinParser.TopLevelObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_topLevelObject)
        try:
            self.state = 421
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 416
                self.classDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 417
                self.objectDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 418
                self.functionDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 419
                self.propertyDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 420
                self.typeAlias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def CLASS(self):
            return self.getToken(KotlinParser.CLASS, 0)

        def INTERFACE(self):
            return self.getToken(KotlinParser.INTERFACE, 0)

        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def typeParameters(self):
            return self.getTypedRuleContext(KotlinParser.TypeParametersContext,0)


        def primaryConstructor(self):
            return self.getTypedRuleContext(KotlinParser.PrimaryConstructorContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def delegationSpecifiers(self):
            return self.getTypedRuleContext(KotlinParser.DelegationSpecifiersContext,0)


        def typeConstraints(self):
            return self.getTypedRuleContext(KotlinParser.TypeConstraintsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(KotlinParser.ClassBodyContext,0)


        def enumClassBody(self):
            return self.getTypedRuleContext(KotlinParser.EnumClassBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclaration" ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclaration" ):
                listener.exitClassDeclaration(self)




    def classDeclaration(self):

        localctx = KotlinParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_classDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                self.state = 423
                self.modifierList()


            self.state = 426
            _la = self._input.LA(1)
            if not(_la==KotlinParser.CLASS or _la==KotlinParser.INTERFACE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 427
                self.match(KotlinParser.NL)
                self.state = 432
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 433
            self.simpleIdentifier()
            self.state = 441
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 434
                    self.match(KotlinParser.NL)
                    self.state = 439
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 440
                self.typeParameters()


            self.state = 450
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 446
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 443
                    self.match(KotlinParser.NL)
                    self.state = 448
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 449
                self.primaryConstructor()


            self.state = 466
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 452
                    self.match(KotlinParser.NL)
                    self.state = 457
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 458
                self.match(KotlinParser.COLON)
                self.state = 462
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 459
                    self.match(KotlinParser.NL)
                    self.state = 464
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 465
                self.delegationSpecifiers()


            self.state = 475
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 468
                    self.match(KotlinParser.NL)
                    self.state = 473
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 474
                self.typeConstraints()


            self.state = 491
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 477
                    self.match(KotlinParser.NL)
                    self.state = 482
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 483
                self.classBody()

            elif la_ == 2:
                self.state = 487
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 484
                    self.match(KotlinParser.NL)
                    self.state = 489
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 490
                self.enumClassBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimaryConstructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classParameters(self):
            return self.getTypedRuleContext(KotlinParser.ClassParametersContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def CONSTRUCTOR(self):
            return self.getToken(KotlinParser.CONSTRUCTOR, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_primaryConstructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryConstructor" ):
                listener.enterPrimaryConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryConstructor" ):
                listener.exitPrimaryConstructor(self)




    def primaryConstructor(self):

        localctx = KotlinParser.PrimaryConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_primaryConstructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                self.state = 493
                self.modifierList()


            self.state = 503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.CONSTRUCTOR:
                self.state = 496
                self.match(KotlinParser.CONSTRUCTOR)
                self.state = 500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 497
                    self.match(KotlinParser.NL)
                    self.state = 502
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 505
            self.classParameters()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def classParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ClassParameterContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ClassParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_classParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassParameters" ):
                listener.enterClassParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassParameters" ):
                listener.exitClassParameters(self)




    def classParameters(self):

        localctx = KotlinParser.ClassParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_classParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            self.match(KotlinParser.LPAREN)
            self.state = 519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (KotlinParser.AT - 40)) | (1 << (KotlinParser.FILE - 40)) | (1 << (KotlinParser.IMPORT - 40)) | (1 << (KotlinParser.VAL - 40)) | (1 << (KotlinParser.VAR - 40)) | (1 << (KotlinParser.CONSTRUCTOR - 40)) | (1 << (KotlinParser.BY - 40)) | (1 << (KotlinParser.COMPANION - 40)) | (1 << (KotlinParser.INIT - 40)) | (1 << (KotlinParser.WHERE - 40)) | (1 << (KotlinParser.CATCH - 40)) | (1 << (KotlinParser.FINALLY - 40)) | (1 << (KotlinParser.IN - 40)) | (1 << (KotlinParser.OUT - 40)) | (1 << (KotlinParser.FIELD - 40)) | (1 << (KotlinParser.PROPERTY - 40)) | (1 << (KotlinParser.GET - 40)) | (1 << (KotlinParser.SET - 40)) | (1 << (KotlinParser.GETTER - 40)) | (1 << (KotlinParser.SETTER - 40)) | (1 << (KotlinParser.RECEIVER - 40)) | (1 << (KotlinParser.PARAM - 40)) | (1 << (KotlinParser.SETPARAM - 40)) | (1 << (KotlinParser.DELEGATE - 40)) | (1 << (KotlinParser.DYNAMIC - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (KotlinParser.PUBLIC - 104)) | (1 << (KotlinParser.PRIVATE - 104)) | (1 << (KotlinParser.PROTECTED - 104)) | (1 << (KotlinParser.INTERNAL - 104)) | (1 << (KotlinParser.ENUM - 104)) | (1 << (KotlinParser.SEALED - 104)) | (1 << (KotlinParser.ANNOTATION - 104)) | (1 << (KotlinParser.DATA - 104)) | (1 << (KotlinParser.INNER - 104)) | (1 << (KotlinParser.TAILREC - 104)) | (1 << (KotlinParser.OPERATOR - 104)) | (1 << (KotlinParser.INLINE - 104)) | (1 << (KotlinParser.INFIX - 104)) | (1 << (KotlinParser.EXTERNAL - 104)) | (1 << (KotlinParser.SUSPEND - 104)) | (1 << (KotlinParser.OVERRIDE - 104)) | (1 << (KotlinParser.ABSTRACT - 104)) | (1 << (KotlinParser.FINAL - 104)) | (1 << (KotlinParser.OPEN - 104)) | (1 << (KotlinParser.CONST - 104)) | (1 << (KotlinParser.LATEINIT - 104)) | (1 << (KotlinParser.VARARG - 104)) | (1 << (KotlinParser.NOINLINE - 104)) | (1 << (KotlinParser.CROSSINLINE - 104)) | (1 << (KotlinParser.REIFIED - 104)) | (1 << (KotlinParser.Identifier - 104)) | (1 << (KotlinParser.LabelReference - 104)))) != 0):
                self.state = 508
                self.classParameter()
                self.state = 513
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 509
                        self.match(KotlinParser.COMMA)
                        self.state = 510
                        self.classParameter() 
                    self.state = 515
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

                self.state = 517
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==KotlinParser.COMMA:
                    self.state = 516
                    self.match(KotlinParser.COMMA)




            self.state = 521
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def VAL(self):
            return self.getToken(KotlinParser.VAL, 0)

        def VAR(self):
            return self.getToken(KotlinParser.VAR, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_classParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassParameter" ):
                listener.enterClassParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassParameter" ):
                listener.exitClassParameter(self)




    def classParameter(self):

        localctx = KotlinParser.ClassParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_classParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 524
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.state = 523
                self.modifierList()


            self.state = 527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.VAL or _la==KotlinParser.VAR:
                self.state = 526
                _la = self._input.LA(1)
                if not(_la==KotlinParser.VAL or _la==KotlinParser.VAR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 529
            self.simpleIdentifier()
            self.state = 530
            self.match(KotlinParser.COLON)
            self.state = 531
            self.type()
            self.state = 534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.ASSIGNMENT:
                self.state = 532
                self.match(KotlinParser.ASSIGNMENT)
                self.state = 533
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DelegationSpecifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def delegationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.DelegationSpecifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.DelegationSpecifierContext,i)


        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_delegationSpecifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelegationSpecifiers" ):
                listener.enterDelegationSpecifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelegationSpecifiers" ):
                listener.exitDelegationSpecifiers(self)




    def delegationSpecifiers(self):

        localctx = KotlinParser.DelegationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_delegationSpecifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (KotlinParser.FIELD - 93)) | (1 << (KotlinParser.PROPERTY - 93)) | (1 << (KotlinParser.GET - 93)) | (1 << (KotlinParser.SET - 93)) | (1 << (KotlinParser.RECEIVER - 93)) | (1 << (KotlinParser.PARAM - 93)) | (1 << (KotlinParser.SETPARAM - 93)) | (1 << (KotlinParser.DELEGATE - 93)) | (1 << (KotlinParser.LabelReference - 93)))) != 0):
                self.state = 536
                self.annotations()
                self.state = 541
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 542
            self.delegationSpecifier()
            self.state = 565
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 546
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 543
                        self.match(KotlinParser.NL)
                        self.state = 548
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 549
                    self.match(KotlinParser.COMMA)
                    self.state = 553
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 550
                        self.match(KotlinParser.NL)
                        self.state = 555
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 559
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (KotlinParser.FIELD - 93)) | (1 << (KotlinParser.PROPERTY - 93)) | (1 << (KotlinParser.GET - 93)) | (1 << (KotlinParser.SET - 93)) | (1 << (KotlinParser.RECEIVER - 93)) | (1 << (KotlinParser.PARAM - 93)) | (1 << (KotlinParser.SETPARAM - 93)) | (1 << (KotlinParser.DELEGATE - 93)) | (1 << (KotlinParser.LabelReference - 93)))) != 0):
                        self.state = 556
                        self.annotations()
                        self.state = 561
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 562
                    self.delegationSpecifier() 
                self.state = 567
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DelegationSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructorInvocation(self):
            return self.getTypedRuleContext(KotlinParser.ConstructorInvocationContext,0)


        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def explicitDelegation(self):
            return self.getTypedRuleContext(KotlinParser.ExplicitDelegationContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_delegationSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelegationSpecifier" ):
                listener.enterDelegationSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelegationSpecifier" ):
                listener.exitDelegationSpecifier(self)




    def delegationSpecifier(self):

        localctx = KotlinParser.DelegationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_delegationSpecifier)
        try:
            self.state = 571
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 568
                self.constructorInvocation()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 569
                self.userType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 570
                self.explicitDelegation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstructorInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def callSuffix(self):
            return self.getTypedRuleContext(KotlinParser.CallSuffixContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_constructorInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorInvocation" ):
                listener.enterConstructorInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorInvocation" ):
                listener.exitConstructorInvocation(self)




    def constructorInvocation(self):

        localctx = KotlinParser.ConstructorInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_constructorInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 573
            self.userType()
            self.state = 574
            self.callSuffix()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExplicitDelegationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def BY(self):
            return self.getToken(KotlinParser.BY, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_explicitDelegation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitDelegation" ):
                listener.enterExplicitDelegation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitDelegation" ):
                listener.exitExplicitDelegation(self)




    def explicitDelegation(self):

        localctx = KotlinParser.ExplicitDelegationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_explicitDelegation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self.userType()
            self.state = 580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 577
                self.match(KotlinParser.NL)
                self.state = 582
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 583
            self.match(KotlinParser.BY)
            self.state = 587
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 584
                    self.match(KotlinParser.NL) 
                self.state = 589
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

            self.state = 590
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self):
            return self.getToken(KotlinParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def classMemberDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ClassMemberDeclarationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ClassMemberDeclarationContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_classBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBody" ):
                listener.enterClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBody" ):
                listener.exitClassBody(self)




    def classBody(self):

        localctx = KotlinParser.ClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_classBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.match(KotlinParser.LCURL)
            self.state = 596
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 593
                    self.match(KotlinParser.NL) 
                self.state = 598
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

            self.state = 602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (KotlinParser.AT - 40)) | (1 << (KotlinParser.FILE - 40)) | (1 << (KotlinParser.CLASS - 40)) | (1 << (KotlinParser.INTERFACE - 40)) | (1 << (KotlinParser.FUN - 40)) | (1 << (KotlinParser.OBJECT - 40)) | (1 << (KotlinParser.VAL - 40)) | (1 << (KotlinParser.VAR - 40)) | (1 << (KotlinParser.TYPE_ALIAS - 40)) | (1 << (KotlinParser.CONSTRUCTOR - 40)) | (1 << (KotlinParser.COMPANION - 40)) | (1 << (KotlinParser.INIT - 40)) | (1 << (KotlinParser.IN - 40)) | (1 << (KotlinParser.OUT - 40)) | (1 << (KotlinParser.FIELD - 40)) | (1 << (KotlinParser.PROPERTY - 40)) | (1 << (KotlinParser.GET - 40)) | (1 << (KotlinParser.SET - 40)) | (1 << (KotlinParser.RECEIVER - 40)) | (1 << (KotlinParser.PARAM - 40)) | (1 << (KotlinParser.SETPARAM - 40)) | (1 << (KotlinParser.DELEGATE - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (KotlinParser.PUBLIC - 104)) | (1 << (KotlinParser.PRIVATE - 104)) | (1 << (KotlinParser.PROTECTED - 104)) | (1 << (KotlinParser.INTERNAL - 104)) | (1 << (KotlinParser.ENUM - 104)) | (1 << (KotlinParser.SEALED - 104)) | (1 << (KotlinParser.ANNOTATION - 104)) | (1 << (KotlinParser.DATA - 104)) | (1 << (KotlinParser.INNER - 104)) | (1 << (KotlinParser.TAILREC - 104)) | (1 << (KotlinParser.OPERATOR - 104)) | (1 << (KotlinParser.INLINE - 104)) | (1 << (KotlinParser.INFIX - 104)) | (1 << (KotlinParser.EXTERNAL - 104)) | (1 << (KotlinParser.SUSPEND - 104)) | (1 << (KotlinParser.OVERRIDE - 104)) | (1 << (KotlinParser.ABSTRACT - 104)) | (1 << (KotlinParser.FINAL - 104)) | (1 << (KotlinParser.OPEN - 104)) | (1 << (KotlinParser.CONST - 104)) | (1 << (KotlinParser.LATEINIT - 104)) | (1 << (KotlinParser.VARARG - 104)) | (1 << (KotlinParser.NOINLINE - 104)) | (1 << (KotlinParser.CROSSINLINE - 104)) | (1 << (KotlinParser.REIFIED - 104)) | (1 << (KotlinParser.LabelReference - 104)))) != 0):
                self.state = 599
                self.classMemberDeclaration()
                self.state = 604
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 605
                self.match(KotlinParser.NL)
                self.state = 610
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 611
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassMemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.ClassDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.FunctionDeclarationContext,0)


        def objectDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.ObjectDeclarationContext,0)


        def companionObject(self):
            return self.getTypedRuleContext(KotlinParser.CompanionObjectContext,0)


        def propertyDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.PropertyDeclarationContext,0)


        def anonymousInitializer(self):
            return self.getTypedRuleContext(KotlinParser.AnonymousInitializerContext,0)


        def secondaryConstructor(self):
            return self.getTypedRuleContext(KotlinParser.SecondaryConstructorContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(KotlinParser.TypeAliasContext,0)


        def anysemi(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnysemiContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnysemiContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_classMemberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassMemberDeclaration" ):
                listener.enterClassMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassMemberDeclaration" ):
                listener.exitClassMemberDeclaration(self)




    def classMemberDeclaration(self):

        localctx = KotlinParser.ClassMemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_classMemberDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 613
                self.classDeclaration()
                pass

            elif la_ == 2:
                self.state = 614
                self.functionDeclaration()
                pass

            elif la_ == 3:
                self.state = 615
                self.objectDeclaration()
                pass

            elif la_ == 4:
                self.state = 616
                self.companionObject()
                pass

            elif la_ == 5:
                self.state = 617
                self.propertyDeclaration()
                pass

            elif la_ == 6:
                self.state = 618
                self.anonymousInitializer()
                pass

            elif la_ == 7:
                self.state = 619
                self.secondaryConstructor()
                pass

            elif la_ == 8:
                self.state = 620
                self.typeAlias()
                pass


            self.state = 624 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 623
                    self.anysemi()

                else:
                    raise NoViableAltException(self)
                self.state = 626 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnonymousInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INIT(self):
            return self.getToken(KotlinParser.INIT, 0)

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_anonymousInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymousInitializer" ):
                listener.enterAnonymousInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymousInitializer" ):
                listener.exitAnonymousInitializer(self)




    def anonymousInitializer(self):

        localctx = KotlinParser.AnonymousInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_anonymousInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.match(KotlinParser.INIT)
            self.state = 632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 629
                self.match(KotlinParser.NL)
                self.state = 634
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 635
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SecondaryConstructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRUCTOR(self):
            return self.getToken(KotlinParser.CONSTRUCTOR, 0)

        def functionValueParameters(self):
            return self.getTypedRuleContext(KotlinParser.FunctionValueParametersContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def constructorDelegationCall(self):
            return self.getTypedRuleContext(KotlinParser.ConstructorDelegationCallContext,0)


        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_secondaryConstructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecondaryConstructor" ):
                listener.enterSecondaryConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecondaryConstructor" ):
                listener.exitSecondaryConstructor(self)




    def secondaryConstructor(self):

        localctx = KotlinParser.SecondaryConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_secondaryConstructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                self.state = 637
                self.modifierList()


            self.state = 640
            self.match(KotlinParser.CONSTRUCTOR)
            self.state = 644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 641
                self.match(KotlinParser.NL)
                self.state = 646
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 647
            self.functionValueParameters()
            self.state = 662
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 648
                    self.match(KotlinParser.NL)
                    self.state = 653
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 654
                self.match(KotlinParser.COLON)
                self.state = 658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 655
                    self.match(KotlinParser.NL)
                    self.state = 660
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 661
                self.constructorDelegationCall()


            self.state = 667
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 664
                    self.match(KotlinParser.NL) 
                self.state = 669
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

            self.state = 671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.LCURL:
                self.state = 670
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstructorDelegationCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THIS(self):
            return self.getToken(KotlinParser.THIS, 0)

        def valueArguments(self):
            return self.getTypedRuleContext(KotlinParser.ValueArgumentsContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def SUPER(self):
            return self.getToken(KotlinParser.SUPER, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_constructorDelegationCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDelegationCall" ):
                listener.enterConstructorDelegationCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDelegationCall" ):
                listener.exitConstructorDelegationCall(self)




    def constructorDelegationCall(self):

        localctx = KotlinParser.ConstructorDelegationCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_constructorDelegationCall)
        self._la = 0 # Token type
        try:
            self.state = 689
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.THIS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 673
                self.match(KotlinParser.THIS)
                self.state = 677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 674
                    self.match(KotlinParser.NL)
                    self.state = 679
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 680
                self.valueArguments()
                pass
            elif token in [KotlinParser.SUPER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 681
                self.match(KotlinParser.SUPER)
                self.state = 685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 682
                    self.match(KotlinParser.NL)
                    self.state = 687
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 688
                self.valueArguments()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumClassBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self):
            return self.getToken(KotlinParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def enumEntries(self):
            return self.getTypedRuleContext(KotlinParser.EnumEntriesContext,0)


        def SEMICOLON(self):
            return self.getToken(KotlinParser.SEMICOLON, 0)

        def classMemberDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ClassMemberDeclarationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ClassMemberDeclarationContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_enumClassBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumClassBody" ):
                listener.enterEnumClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumClassBody" ):
                listener.exitEnumClassBody(self)




    def enumClassBody(self):

        localctx = KotlinParser.EnumClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_enumClassBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self.match(KotlinParser.LCURL)
            self.state = 695
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 692
                    self.match(KotlinParser.NL) 
                self.state = 697
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

            self.state = 699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (KotlinParser.AT - 40)) | (1 << (KotlinParser.FILE - 40)) | (1 << (KotlinParser.IMPORT - 40)) | (1 << (KotlinParser.CONSTRUCTOR - 40)) | (1 << (KotlinParser.BY - 40)) | (1 << (KotlinParser.COMPANION - 40)) | (1 << (KotlinParser.INIT - 40)) | (1 << (KotlinParser.WHERE - 40)) | (1 << (KotlinParser.CATCH - 40)) | (1 << (KotlinParser.FINALLY - 40)) | (1 << (KotlinParser.OUT - 40)) | (1 << (KotlinParser.FIELD - 40)) | (1 << (KotlinParser.PROPERTY - 40)) | (1 << (KotlinParser.GET - 40)) | (1 << (KotlinParser.SET - 40)) | (1 << (KotlinParser.GETTER - 40)) | (1 << (KotlinParser.SETTER - 40)) | (1 << (KotlinParser.RECEIVER - 40)) | (1 << (KotlinParser.PARAM - 40)) | (1 << (KotlinParser.SETPARAM - 40)) | (1 << (KotlinParser.DELEGATE - 40)) | (1 << (KotlinParser.DYNAMIC - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (KotlinParser.PUBLIC - 104)) | (1 << (KotlinParser.PRIVATE - 104)) | (1 << (KotlinParser.PROTECTED - 104)) | (1 << (KotlinParser.INTERNAL - 104)) | (1 << (KotlinParser.ENUM - 104)) | (1 << (KotlinParser.SEALED - 104)) | (1 << (KotlinParser.ANNOTATION - 104)) | (1 << (KotlinParser.DATA - 104)) | (1 << (KotlinParser.INNER - 104)) | (1 << (KotlinParser.TAILREC - 104)) | (1 << (KotlinParser.OPERATOR - 104)) | (1 << (KotlinParser.INLINE - 104)) | (1 << (KotlinParser.INFIX - 104)) | (1 << (KotlinParser.EXTERNAL - 104)) | (1 << (KotlinParser.SUSPEND - 104)) | (1 << (KotlinParser.OVERRIDE - 104)) | (1 << (KotlinParser.ABSTRACT - 104)) | (1 << (KotlinParser.FINAL - 104)) | (1 << (KotlinParser.OPEN - 104)) | (1 << (KotlinParser.CONST - 104)) | (1 << (KotlinParser.LATEINIT - 104)) | (1 << (KotlinParser.VARARG - 104)) | (1 << (KotlinParser.NOINLINE - 104)) | (1 << (KotlinParser.CROSSINLINE - 104)) | (1 << (KotlinParser.REIFIED - 104)) | (1 << (KotlinParser.Identifier - 104)) | (1 << (KotlinParser.LabelReference - 104)))) != 0):
                self.state = 698
                self.enumEntries()


            self.state = 720
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 701
                    self.match(KotlinParser.NL)
                    self.state = 706
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 707
                self.match(KotlinParser.SEMICOLON)
                self.state = 711
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 708
                        self.match(KotlinParser.NL) 
                    self.state = 713
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

                self.state = 717
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (KotlinParser.AT - 40)) | (1 << (KotlinParser.FILE - 40)) | (1 << (KotlinParser.CLASS - 40)) | (1 << (KotlinParser.INTERFACE - 40)) | (1 << (KotlinParser.FUN - 40)) | (1 << (KotlinParser.OBJECT - 40)) | (1 << (KotlinParser.VAL - 40)) | (1 << (KotlinParser.VAR - 40)) | (1 << (KotlinParser.TYPE_ALIAS - 40)) | (1 << (KotlinParser.CONSTRUCTOR - 40)) | (1 << (KotlinParser.COMPANION - 40)) | (1 << (KotlinParser.INIT - 40)) | (1 << (KotlinParser.IN - 40)) | (1 << (KotlinParser.OUT - 40)) | (1 << (KotlinParser.FIELD - 40)) | (1 << (KotlinParser.PROPERTY - 40)) | (1 << (KotlinParser.GET - 40)) | (1 << (KotlinParser.SET - 40)) | (1 << (KotlinParser.RECEIVER - 40)) | (1 << (KotlinParser.PARAM - 40)) | (1 << (KotlinParser.SETPARAM - 40)) | (1 << (KotlinParser.DELEGATE - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (KotlinParser.PUBLIC - 104)) | (1 << (KotlinParser.PRIVATE - 104)) | (1 << (KotlinParser.PROTECTED - 104)) | (1 << (KotlinParser.INTERNAL - 104)) | (1 << (KotlinParser.ENUM - 104)) | (1 << (KotlinParser.SEALED - 104)) | (1 << (KotlinParser.ANNOTATION - 104)) | (1 << (KotlinParser.DATA - 104)) | (1 << (KotlinParser.INNER - 104)) | (1 << (KotlinParser.TAILREC - 104)) | (1 << (KotlinParser.OPERATOR - 104)) | (1 << (KotlinParser.INLINE - 104)) | (1 << (KotlinParser.INFIX - 104)) | (1 << (KotlinParser.EXTERNAL - 104)) | (1 << (KotlinParser.SUSPEND - 104)) | (1 << (KotlinParser.OVERRIDE - 104)) | (1 << (KotlinParser.ABSTRACT - 104)) | (1 << (KotlinParser.FINAL - 104)) | (1 << (KotlinParser.OPEN - 104)) | (1 << (KotlinParser.CONST - 104)) | (1 << (KotlinParser.LATEINIT - 104)) | (1 << (KotlinParser.VARARG - 104)) | (1 << (KotlinParser.NOINLINE - 104)) | (1 << (KotlinParser.CROSSINLINE - 104)) | (1 << (KotlinParser.REIFIED - 104)) | (1 << (KotlinParser.LabelReference - 104)))) != 0):
                    self.state = 714
                    self.classMemberDeclaration()
                    self.state = 719
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 725
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 722
                self.match(KotlinParser.NL)
                self.state = 727
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 728
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumEntriesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.EnumEntryContext)
            else:
                return self.getTypedRuleContext(KotlinParser.EnumEntryContext,i)


        def SEMICOLON(self):
            return self.getToken(KotlinParser.SEMICOLON, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_enumEntries

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumEntries" ):
                listener.enterEnumEntries(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumEntries" ):
                listener.exitEnumEntries(self)




    def enumEntries(self):

        localctx = KotlinParser.EnumEntriesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_enumEntries)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 737 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 730
                self.enumEntry()
                self.state = 734
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 731
                        self.match(KotlinParser.NL) 
                    self.state = 736
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

                self.state = 739 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (KotlinParser.AT - 40)) | (1 << (KotlinParser.FILE - 40)) | (1 << (KotlinParser.IMPORT - 40)) | (1 << (KotlinParser.CONSTRUCTOR - 40)) | (1 << (KotlinParser.BY - 40)) | (1 << (KotlinParser.COMPANION - 40)) | (1 << (KotlinParser.INIT - 40)) | (1 << (KotlinParser.WHERE - 40)) | (1 << (KotlinParser.CATCH - 40)) | (1 << (KotlinParser.FINALLY - 40)) | (1 << (KotlinParser.OUT - 40)) | (1 << (KotlinParser.FIELD - 40)) | (1 << (KotlinParser.PROPERTY - 40)) | (1 << (KotlinParser.GET - 40)) | (1 << (KotlinParser.SET - 40)) | (1 << (KotlinParser.GETTER - 40)) | (1 << (KotlinParser.SETTER - 40)) | (1 << (KotlinParser.RECEIVER - 40)) | (1 << (KotlinParser.PARAM - 40)) | (1 << (KotlinParser.SETPARAM - 40)) | (1 << (KotlinParser.DELEGATE - 40)) | (1 << (KotlinParser.DYNAMIC - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (KotlinParser.PUBLIC - 104)) | (1 << (KotlinParser.PRIVATE - 104)) | (1 << (KotlinParser.PROTECTED - 104)) | (1 << (KotlinParser.INTERNAL - 104)) | (1 << (KotlinParser.ENUM - 104)) | (1 << (KotlinParser.SEALED - 104)) | (1 << (KotlinParser.ANNOTATION - 104)) | (1 << (KotlinParser.DATA - 104)) | (1 << (KotlinParser.INNER - 104)) | (1 << (KotlinParser.TAILREC - 104)) | (1 << (KotlinParser.OPERATOR - 104)) | (1 << (KotlinParser.INLINE - 104)) | (1 << (KotlinParser.INFIX - 104)) | (1 << (KotlinParser.EXTERNAL - 104)) | (1 << (KotlinParser.SUSPEND - 104)) | (1 << (KotlinParser.OVERRIDE - 104)) | (1 << (KotlinParser.ABSTRACT - 104)) | (1 << (KotlinParser.FINAL - 104)) | (1 << (KotlinParser.OPEN - 104)) | (1 << (KotlinParser.CONST - 104)) | (1 << (KotlinParser.LATEINIT - 104)) | (1 << (KotlinParser.VARARG - 104)) | (1 << (KotlinParser.NOINLINE - 104)) | (1 << (KotlinParser.CROSSINLINE - 104)) | (1 << (KotlinParser.REIFIED - 104)) | (1 << (KotlinParser.Identifier - 104)) | (1 << (KotlinParser.LabelReference - 104)))) != 0)):
                    break

            self.state = 742
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 741
                self.match(KotlinParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumEntryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def valueArguments(self):
            return self.getTypedRuleContext(KotlinParser.ValueArgumentsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(KotlinParser.ClassBodyContext,0)


        def COMMA(self):
            return self.getToken(KotlinParser.COMMA, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_enumEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumEntry" ):
                listener.enterEnumEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumEntry" ):
                listener.exitEnumEntry(self)




    def enumEntry(self):

        localctx = KotlinParser.EnumEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_enumEntry)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (KotlinParser.FIELD - 93)) | (1 << (KotlinParser.PROPERTY - 93)) | (1 << (KotlinParser.GET - 93)) | (1 << (KotlinParser.SET - 93)) | (1 << (KotlinParser.RECEIVER - 93)) | (1 << (KotlinParser.PARAM - 93)) | (1 << (KotlinParser.SETPARAM - 93)) | (1 << (KotlinParser.DELEGATE - 93)) | (1 << (KotlinParser.LabelReference - 93)))) != 0):
                self.state = 744
                self.annotations()
                self.state = 749
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 750
            self.simpleIdentifier()
            self.state = 758
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 751
                    self.match(KotlinParser.NL)
                    self.state = 756
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 757
                self.valueArguments()


            self.state = 767
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 760
                    self.match(KotlinParser.NL)
                    self.state = 765
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 766
                self.classBody()


            self.state = 776
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 769
                    self.match(KotlinParser.NL)
                    self.state = 774
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 775
                self.match(KotlinParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUN(self):
            return self.getToken(KotlinParser.FUN, 0)

        def functionValueParameters(self):
            return self.getTypedRuleContext(KotlinParser.FunctionValueParametersContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.DOT)
            else:
                return self.getToken(KotlinParser.DOT, i)

        def typeParameters(self):
            return self.getTypedRuleContext(KotlinParser.TypeParametersContext,0)


        def receiverType(self):
            return self.getTypedRuleContext(KotlinParser.ReceiverTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(KotlinParser.IdentifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def typeConstraints(self):
            return self.getTypedRuleContext(KotlinParser.TypeConstraintsContext,0)


        def functionBody(self):
            return self.getTypedRuleContext(KotlinParser.FunctionBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_functionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDeclaration" ):
                listener.enterFunctionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDeclaration" ):
                listener.exitFunctionDeclaration(self)




    def functionDeclaration(self):

        localctx = KotlinParser.FunctionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_functionDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                self.state = 778
                self.modifierList()


            self.state = 781
            self.match(KotlinParser.FUN)
            self.state = 797
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 782
                    self.match(KotlinParser.NL)
                    self.state = 787
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 788
                self.type()
                self.state = 792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 789
                    self.match(KotlinParser.NL)
                    self.state = 794
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 795
                self.match(KotlinParser.DOT)


            self.state = 806
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 802
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 799
                    self.match(KotlinParser.NL)
                    self.state = 804
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 805
                self.typeParameters()


            self.state = 823
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 808
                    self.match(KotlinParser.NL)
                    self.state = 813
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 814
                self.receiverType()
                self.state = 818
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 815
                    self.match(KotlinParser.NL)
                    self.state = 820
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 821
                self.match(KotlinParser.DOT)


            self.state = 832
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 825
                    self.match(KotlinParser.NL)
                    self.state = 830
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 831
                self.identifier()


            self.state = 837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 834
                self.match(KotlinParser.NL)
                self.state = 839
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 840
            self.functionValueParameters()
            self.state = 855
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 841
                    self.match(KotlinParser.NL)
                    self.state = 846
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 847
                self.match(KotlinParser.COLON)
                self.state = 851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 848
                    self.match(KotlinParser.NL)
                    self.state = 853
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 854
                self.type()


            self.state = 864
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 857
                    self.match(KotlinParser.NL)
                    self.state = 862
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 863
                self.typeConstraints()


            self.state = 873
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 866
                    self.match(KotlinParser.NL)
                    self.state = 871
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 872
                self.functionBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionValueParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def functionValueParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.FunctionValueParameterContext)
            else:
                return self.getTypedRuleContext(KotlinParser.FunctionValueParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionValueParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionValueParameters" ):
                listener.enterFunctionValueParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionValueParameters" ):
                listener.exitFunctionValueParameters(self)




    def functionValueParameters(self):

        localctx = KotlinParser.FunctionValueParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_functionValueParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self.match(KotlinParser.LPAREN)
            self.state = 887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (KotlinParser.AT - 40)) | (1 << (KotlinParser.FILE - 40)) | (1 << (KotlinParser.IMPORT - 40)) | (1 << (KotlinParser.CONSTRUCTOR - 40)) | (1 << (KotlinParser.BY - 40)) | (1 << (KotlinParser.COMPANION - 40)) | (1 << (KotlinParser.INIT - 40)) | (1 << (KotlinParser.WHERE - 40)) | (1 << (KotlinParser.CATCH - 40)) | (1 << (KotlinParser.FINALLY - 40)) | (1 << (KotlinParser.IN - 40)) | (1 << (KotlinParser.OUT - 40)) | (1 << (KotlinParser.FIELD - 40)) | (1 << (KotlinParser.PROPERTY - 40)) | (1 << (KotlinParser.GET - 40)) | (1 << (KotlinParser.SET - 40)) | (1 << (KotlinParser.GETTER - 40)) | (1 << (KotlinParser.SETTER - 40)) | (1 << (KotlinParser.RECEIVER - 40)) | (1 << (KotlinParser.PARAM - 40)) | (1 << (KotlinParser.SETPARAM - 40)) | (1 << (KotlinParser.DELEGATE - 40)) | (1 << (KotlinParser.DYNAMIC - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (KotlinParser.PUBLIC - 104)) | (1 << (KotlinParser.PRIVATE - 104)) | (1 << (KotlinParser.PROTECTED - 104)) | (1 << (KotlinParser.INTERNAL - 104)) | (1 << (KotlinParser.ENUM - 104)) | (1 << (KotlinParser.SEALED - 104)) | (1 << (KotlinParser.ANNOTATION - 104)) | (1 << (KotlinParser.DATA - 104)) | (1 << (KotlinParser.INNER - 104)) | (1 << (KotlinParser.TAILREC - 104)) | (1 << (KotlinParser.OPERATOR - 104)) | (1 << (KotlinParser.INLINE - 104)) | (1 << (KotlinParser.INFIX - 104)) | (1 << (KotlinParser.EXTERNAL - 104)) | (1 << (KotlinParser.SUSPEND - 104)) | (1 << (KotlinParser.OVERRIDE - 104)) | (1 << (KotlinParser.ABSTRACT - 104)) | (1 << (KotlinParser.FINAL - 104)) | (1 << (KotlinParser.OPEN - 104)) | (1 << (KotlinParser.CONST - 104)) | (1 << (KotlinParser.LATEINIT - 104)) | (1 << (KotlinParser.VARARG - 104)) | (1 << (KotlinParser.NOINLINE - 104)) | (1 << (KotlinParser.CROSSINLINE - 104)) | (1 << (KotlinParser.REIFIED - 104)) | (1 << (KotlinParser.Identifier - 104)) | (1 << (KotlinParser.LabelReference - 104)))) != 0):
                self.state = 876
                self.functionValueParameter()
                self.state = 881
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 877
                        self.match(KotlinParser.COMMA)
                        self.state = 878
                        self.functionValueParameter() 
                    self.state = 883
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

                self.state = 885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==KotlinParser.COMMA:
                    self.state = 884
                    self.match(KotlinParser.COMMA)




            self.state = 889
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionValueParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self):
            return self.getTypedRuleContext(KotlinParser.ParameterContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_functionValueParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionValueParameter" ):
                listener.enterFunctionValueParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionValueParameter" ):
                listener.exitFunctionValueParameter(self)




    def functionValueParameter(self):

        localctx = KotlinParser.FunctionValueParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_functionValueParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 891
                self.modifierList()


            self.state = 894
            self.parameter()
            self.state = 897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.ASSIGNMENT:
                self.state = 895
                self.match(KotlinParser.ASSIGNMENT)
                self.state = 896
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)




    def parameter(self):

        localctx = KotlinParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 899
            self.simpleIdentifier()
            self.state = 900
            self.match(KotlinParser.COLON)
            self.state = 901
            self.type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReceiverTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parenthesizedType(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedTypeContext,0)


        def nullableType(self):
            return self.getTypedRuleContext(KotlinParser.NullableTypeContext,0)


        def typeReference(self):
            return self.getTypedRuleContext(KotlinParser.TypeReferenceContext,0)


        def typeModifierList(self):
            return self.getTypedRuleContext(KotlinParser.TypeModifierListContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_receiverType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiverType" ):
                listener.enterReceiverType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiverType" ):
                listener.exitReceiverType(self)




    def receiverType(self):

        localctx = KotlinParser.ReceiverTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_receiverType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 904
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 903
                self.typeModifierList()


            self.state = 909
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 906
                self.parenthesizedType()
                pass

            elif la_ == 2:
                self.state = 907
                self.nullableType()
                pass

            elif la_ == 3:
                self.state = 908
                self.typeReference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionBody" ):
                listener.enterFunctionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionBody" ):
                listener.exitFunctionBody(self)




    def functionBody(self):

        localctx = KotlinParser.FunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_functionBody)
        try:
            self.state = 920
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.LCURL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 911
                self.block()
                pass
            elif token in [KotlinParser.ASSIGNMENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 912
                self.match(KotlinParser.ASSIGNMENT)
                self.state = 916
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 913
                        self.match(KotlinParser.NL) 
                    self.state = 918
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

                self.state = 919
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT(self):
            return self.getToken(KotlinParser.OBJECT, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def primaryConstructor(self):
            return self.getTypedRuleContext(KotlinParser.PrimaryConstructorContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def delegationSpecifiers(self):
            return self.getTypedRuleContext(KotlinParser.DelegationSpecifiersContext,0)


        def classBody(self):
            return self.getTypedRuleContext(KotlinParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_objectDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectDeclaration" ):
                listener.enterObjectDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectDeclaration" ):
                listener.exitObjectDeclaration(self)




    def objectDeclaration(self):

        localctx = KotlinParser.ObjectDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_objectDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 923
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                self.state = 922
                self.modifierList()


            self.state = 925
            self.match(KotlinParser.OBJECT)
            self.state = 929
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 926
                self.match(KotlinParser.NL)
                self.state = 931
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 932
            self.simpleIdentifier()
            self.state = 940
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 933
                    self.match(KotlinParser.NL)
                    self.state = 938
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 939
                self.primaryConstructor()


            self.state = 956
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 945
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 942
                    self.match(KotlinParser.NL)
                    self.state = 947
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 948
                self.match(KotlinParser.COLON)
                self.state = 952
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 949
                    self.match(KotlinParser.NL)
                    self.state = 954
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 955
                self.delegationSpecifiers()


            self.state = 965
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 961
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 958
                    self.match(KotlinParser.NL)
                    self.state = 963
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 964
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompanionObjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPANION(self):
            return self.getToken(KotlinParser.COMPANION, 0)

        def OBJECT(self):
            return self.getToken(KotlinParser.OBJECT, 0)

        def modifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ModifierListContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ModifierListContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def delegationSpecifiers(self):
            return self.getTypedRuleContext(KotlinParser.DelegationSpecifiersContext,0)


        def classBody(self):
            return self.getTypedRuleContext(KotlinParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_companionObject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompanionObject" ):
                listener.enterCompanionObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompanionObject" ):
                listener.exitCompanionObject(self)




    def companionObject(self):

        localctx = KotlinParser.CompanionObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_companionObject)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 968
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                self.state = 967
                self.modifierList()


            self.state = 970
            self.match(KotlinParser.COMPANION)
            self.state = 974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 971
                self.match(KotlinParser.NL)
                self.state = 976
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                self.state = 977
                self.modifierList()


            self.state = 980
            self.match(KotlinParser.OBJECT)
            self.state = 988
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.state = 984
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 981
                    self.match(KotlinParser.NL)
                    self.state = 986
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 987
                self.simpleIdentifier()


            self.state = 1004
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.state = 993
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 990
                    self.match(KotlinParser.NL)
                    self.state = 995
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 996
                self.match(KotlinParser.COLON)
                self.state = 1000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 997
                    self.match(KotlinParser.NL)
                    self.state = 1002
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1003
                self.delegationSpecifiers()


            self.state = 1013
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.state = 1009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1006
                    self.match(KotlinParser.NL)
                    self.state = 1011
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1012
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAL(self):
            return self.getToken(KotlinParser.VAL, 0)

        def VAR(self):
            return self.getToken(KotlinParser.VAR, 0)

        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(KotlinParser.TypeParametersContext,0)


        def type(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def DOT(self):
            return self.getToken(KotlinParser.DOT, 0)

        def typeConstraints(self):
            return self.getTypedRuleContext(KotlinParser.TypeConstraintsContext,0)


        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def getter(self):
            return self.getTypedRuleContext(KotlinParser.GetterContext,0)


        def setter(self):
            return self.getTypedRuleContext(KotlinParser.SetterContext,0)


        def multiVariableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.MultiVariableDeclarationContext,0)


        def variableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.VariableDeclarationContext,0)


        def BY(self):
            return self.getToken(KotlinParser.BY, 0)

        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def semi(self):
            return self.getTypedRuleContext(KotlinParser.SemiContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_propertyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyDeclaration" ):
                listener.enterPropertyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyDeclaration" ):
                listener.exitPropertyDeclaration(self)




    def propertyDeclaration(self):

        localctx = KotlinParser.PropertyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_propertyDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1016
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                self.state = 1015
                self.modifierList()


            self.state = 1018
            _la = self._input.LA(1)
            if not(_la==KotlinParser.VAL or _la==KotlinParser.VAR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1026
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.state = 1022
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1019
                    self.match(KotlinParser.NL)
                    self.state = 1024
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1025
                self.typeParameters()


            self.state = 1043
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.state = 1031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1028
                    self.match(KotlinParser.NL)
                    self.state = 1033
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1034
                self.type()
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1035
                    self.match(KotlinParser.NL)
                    self.state = 1040
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1041
                self.match(KotlinParser.DOT)


            self.state = 1048
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1045
                self.match(KotlinParser.NL)
                self.state = 1050
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1053
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.LPAREN]:
                self.state = 1051
                self.multiVariableDeclaration()
                pass
            elif token in [KotlinParser.Identifier, KotlinParser.PineIdentifier]:
                self.state = 1052
                self.variableDeclaration()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1062
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.state = 1058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1055
                    self.match(KotlinParser.NL)
                    self.state = 1060
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1061
                self.typeConstraints()


            self.state = 1078
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.state = 1067
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1064
                    self.match(KotlinParser.NL)
                    self.state = 1069
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1070
                _la = self._input.LA(1)
                if not(_la==KotlinParser.ASSIGNMENT or _la==KotlinParser.BY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1074
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,147,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1071
                        self.match(KotlinParser.NL) 
                    self.state = 1076
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,147,self._ctx)

                self.state = 1077
                self.expression()


            self.state = 1104
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.state = 1083
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1080
                    self.match(KotlinParser.NL)
                    self.state = 1085
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1086
                self.getter()
                self.state = 1090
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
                if la_ == 1:
                    self.state = 1087
                    self.semi()
                    self.state = 1088
                    self.setter()



            elif la_ == 2:
                self.state = 1095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1092
                    self.match(KotlinParser.NL)
                    self.state = 1097
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1098
                self.setter()
                self.state = 1102
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
                if la_ == 1:
                    self.state = 1099
                    self.semi()
                    self.state = 1100
                    self.getter()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultiVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.VariableDeclarationContext,i)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiVariableDeclaration" ):
                listener.enterMultiVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiVariableDeclaration" ):
                listener.exitMultiVariableDeclaration(self)




    def multiVariableDeclaration(self):

        localctx = KotlinParser.MultiVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_multiVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1106
            self.match(KotlinParser.LPAREN)
            self.state = 1107
            self.variableDeclaration()
            self.state = 1112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.COMMA:
                self.state = 1108
                self.match(KotlinParser.COMMA)
                self.state = 1109
                self.variableDeclaration()
                self.state = 1114
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1115
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PineIdentifier(self):
            return self.getToken(KotlinParser.PineIdentifier, 0)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def Identifier(self):
            return self.getToken(KotlinParser.Identifier, 0)

        def COLOR(self):
            return self.getToken(KotlinParser.COLOR, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)




    def variableDeclaration(self):

        localctx = KotlinParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_variableDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1127
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.PineIdentifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1117
                self.match(KotlinParser.PineIdentifier)
                self.state = 1120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==KotlinParser.COLON:
                    self.state = 1118
                    self.match(KotlinParser.COLON)
                    self.state = 1119
                    self.type()


                pass
            elif token in [KotlinParser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1122
                self.match(KotlinParser.Identifier)
                self.state = 1125
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==KotlinParser.COLOR:
                    self.state = 1123
                    self.match(KotlinParser.COLOR)
                    self.state = 1124
                    self.type()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GetterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GETTER(self):
            return self.getToken(KotlinParser.GETTER, 0)

        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_getter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetter" ):
                listener.enterGetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetter" ):
                listener.exitGetter(self)




    def getter(self):

        localctx = KotlinParser.GetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_getter)
        self._la = 0 # Token type
        try:
            self.state = 1178
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1130
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                    self.state = 1129
                    self.modifierList()


                self.state = 1132
                self.match(KotlinParser.GETTER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1134
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                    self.state = 1133
                    self.modifierList()


                self.state = 1136
                self.match(KotlinParser.GETTER)
                self.state = 1140
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1137
                    self.match(KotlinParser.NL)
                    self.state = 1142
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1143
                self.match(KotlinParser.LPAREN)
                self.state = 1144
                self.match(KotlinParser.RPAREN)
                self.state = 1159
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
                if la_ == 1:
                    self.state = 1148
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1145
                        self.match(KotlinParser.NL)
                        self.state = 1150
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1151
                    self.match(KotlinParser.COLON)
                    self.state = 1155
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1152
                        self.match(KotlinParser.NL)
                        self.state = 1157
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1158
                    self.type()


                self.state = 1164
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1161
                    self.match(KotlinParser.NL)
                    self.state = 1166
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1176
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [KotlinParser.LCURL]:
                    self.state = 1167
                    self.block()
                    pass
                elif token in [KotlinParser.ASSIGNMENT]:
                    self.state = 1168
                    self.match(KotlinParser.ASSIGNMENT)
                    self.state = 1172
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,165,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1169
                            self.match(KotlinParser.NL) 
                        self.state = 1174
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,165,self._ctx)

                    self.state = 1175
                    self.expression()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETTER(self):
            return self.getToken(KotlinParser.SETTER, 0)

        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def functionBody(self):
            return self.getTypedRuleContext(KotlinParser.FunctionBodyContext,0)


        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def parameter(self):
            return self.getTypedRuleContext(KotlinParser.ParameterContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def parameterModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ParameterModifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ParameterModifierContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_setter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetter" ):
                listener.enterSetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetter" ):
                listener.exitSetter(self)




    def setter(self):

        localctx = KotlinParser.SetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_setter)
        self._la = 0 # Token type
        try:
            self.state = 1215
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                    self.state = 1180
                    self.modifierList()


                self.state = 1183
                self.match(KotlinParser.SETTER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1185
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                    self.state = 1184
                    self.modifierList()


                self.state = 1187
                self.match(KotlinParser.SETTER)
                self.state = 1191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1188
                    self.match(KotlinParser.NL)
                    self.state = 1193
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1194
                self.match(KotlinParser.LPAREN)
                self.state = 1199
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,172,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1197
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [KotlinParser.AT, KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.LabelReference]:
                            self.state = 1195
                            self.annotations()
                            pass
                        elif token in [KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE]:
                            self.state = 1196
                            self.parameterModifier()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 1201
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,172,self._ctx)

                self.state = 1204
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
                if la_ == 1:
                    self.state = 1202
                    self.simpleIdentifier()
                    pass

                elif la_ == 2:
                    self.state = 1203
                    self.parameter()
                    pass


                self.state = 1206
                self.match(KotlinParser.RPAREN)
                self.state = 1210
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1207
                    self.match(KotlinParser.NL)
                    self.state = 1212
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1213
                self.functionBody()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE_ALIAS(self):
            return self.getToken(KotlinParser.TYPE_ALIAS, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def type(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def typeParameters(self):
            return self.getTypedRuleContext(KotlinParser.TypeParametersContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_typeAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAlias" ):
                listener.enterTypeAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAlias" ):
                listener.exitTypeAlias(self)




    def typeAlias(self):

        localctx = KotlinParser.TypeAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_typeAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                self.state = 1217
                self.modifierList()


            self.state = 1220
            self.match(KotlinParser.TYPE_ALIAS)
            self.state = 1224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1221
                self.match(KotlinParser.NL)
                self.state = 1226
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1227
            self.simpleIdentifier()
            self.state = 1235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.state = 1231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1228
                    self.match(KotlinParser.NL)
                    self.state = 1233
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1234
                self.typeParameters()


            self.state = 1240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1237
                self.match(KotlinParser.NL)
                self.state = 1242
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1243
            self.match(KotlinParser.ASSIGNMENT)
            self.state = 1247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1244
                self.match(KotlinParser.NL)
                self.state = 1249
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1250
            self.type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGLE(self):
            return self.getToken(KotlinParser.LANGLE, 0)

        def typeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeParameterContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeParameterContext,i)


        def RANGLE(self):
            return self.getToken(KotlinParser.RANGLE, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameters" ):
                listener.enterTypeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameters" ):
                listener.exitTypeParameters(self)




    def typeParameters(self):

        localctx = KotlinParser.TypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_typeParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1252
            self.match(KotlinParser.LANGLE)
            self.state = 1256
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,182,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1253
                    self.match(KotlinParser.NL) 
                self.state = 1258
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,182,self._ctx)

            self.state = 1259
            self.typeParameter()
            self.state = 1276
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,185,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1263
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1260
                        self.match(KotlinParser.NL)
                        self.state = 1265
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1266
                    self.match(KotlinParser.COMMA)
                    self.state = 1270
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,184,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1267
                            self.match(KotlinParser.NL) 
                        self.state = 1272
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,184,self._ctx)

                    self.state = 1273
                    self.typeParameter() 
                self.state = 1278
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,185,self._ctx)

            self.state = 1286
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
            if la_ == 1:
                self.state = 1282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1279
                    self.match(KotlinParser.NL)
                    self.state = 1284
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1285
                self.match(KotlinParser.COMMA)


            self.state = 1291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1288
                self.match(KotlinParser.NL)
                self.state = 1293
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1294
            self.match(KotlinParser.RANGLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def MULT(self):
            return self.getToken(KotlinParser.MULT, 0)

        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_typeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameter" ):
                listener.enterTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameter" ):
                listener.exitTypeParameter(self)




    def typeParameter(self):

        localctx = KotlinParser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_typeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1297
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.state = 1296
                self.modifierList()


            self.state = 1302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1299
                self.match(KotlinParser.NL)
                self.state = 1304
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1307
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.OUT, KotlinParser.GETTER, KotlinParser.SETTER, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.Identifier]:
                self.state = 1305
                self.simpleIdentifier()
                pass
            elif token in [KotlinParser.MULT]:
                self.state = 1306
                self.match(KotlinParser.MULT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1323
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.state = 1312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1309
                    self.match(KotlinParser.NL)
                    self.state = 1314
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1315
                self.match(KotlinParser.COLON)
                self.state = 1319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1316
                    self.match(KotlinParser.NL)
                    self.state = 1321
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1322
                self.type()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionType(self):
            return self.getTypedRuleContext(KotlinParser.FunctionTypeContext,0)


        def parenthesizedType(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedTypeContext,0)


        def nullableType(self):
            return self.getTypedRuleContext(KotlinParser.NullableTypeContext,0)


        def typeReference(self):
            return self.getTypedRuleContext(KotlinParser.TypeReferenceContext,0)


        def typeModifierList(self):
            return self.getTypedRuleContext(KotlinParser.TypeModifierListContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)




    def type(self):

        localctx = KotlinParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1326
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.state = 1325
                self.typeModifierList()


            self.state = 1332
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
            if la_ == 1:
                self.state = 1328
                self.functionType()
                pass

            elif la_ == 2:
                self.state = 1329
                self.parenthesizedType()
                pass

            elif la_ == 3:
                self.state = 1330
                self.nullableType()
                pass

            elif la_ == 4:
                self.state = 1331
                self.typeReference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeModifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def SUSPEND(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.SUSPEND)
            else:
                return self.getToken(KotlinParser.SUSPEND, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeModifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeModifierList" ):
                listener.enterTypeModifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeModifierList" ):
                listener.exitTypeModifierList(self)




    def typeModifierList(self):

        localctx = KotlinParser.TypeModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_typeModifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1342 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1342
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [KotlinParser.AT, KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.LabelReference]:
                        self.state = 1334
                        self.annotations()
                        pass
                    elif token in [KotlinParser.SUSPEND]:
                        self.state = 1335
                        self.match(KotlinParser.SUSPEND)
                        self.state = 1339
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==KotlinParser.NL:
                            self.state = 1336
                            self.match(KotlinParser.NL)
                            self.state = 1341
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 1344 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,199,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParenthesizedTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def type(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_parenthesizedType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedType" ):
                listener.enterParenthesizedType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedType" ):
                listener.exitParenthesizedType(self)




    def parenthesizedType(self):

        localctx = KotlinParser.ParenthesizedTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_parenthesizedType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1346
            self.match(KotlinParser.LPAREN)
            self.state = 1347
            self.type()
            self.state = 1348
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NullableTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeReference(self):
            return self.getTypedRuleContext(KotlinParser.TypeReferenceContext,0)


        def parenthesizedType(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedTypeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def QUEST(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.QUEST)
            else:
                return self.getToken(KotlinParser.QUEST, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_nullableType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullableType" ):
                listener.enterNullableType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullableType" ):
                listener.exitNullableType(self)




    def nullableType(self):

        localctx = KotlinParser.NullableTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_nullableType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1352
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.state = 1350
                self.typeReference()
                pass

            elif la_ == 2:
                self.state = 1351
                self.parenthesizedType()
                pass


            self.state = 1357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1354
                self.match(KotlinParser.NL)
                self.state = 1359
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1361 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1360
                    self.match(KotlinParser.QUEST)

                else:
                    raise NoViableAltException(self)
                self.state = 1363 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,202,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def typeReference(self):
            return self.getTypedRuleContext(KotlinParser.TypeReferenceContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def DYNAMIC(self):
            return self.getToken(KotlinParser.DYNAMIC, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeReference" ):
                listener.enterTypeReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeReference" ):
                listener.exitTypeReference(self)




    def typeReference(self):

        localctx = KotlinParser.TypeReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_typeReference)
        try:
            self.state = 1371
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1365
                self.match(KotlinParser.LPAREN)
                self.state = 1366
                self.typeReference()
                self.state = 1367
                self.match(KotlinParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1369
                self.userType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1370
                self.match(KotlinParser.DYNAMIC)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameters(self):
            return self.getTypedRuleContext(KotlinParser.FunctionTypeParametersContext,0)


        def ARROW(self):
            return self.getToken(KotlinParser.ARROW, 0)

        def type(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def functionTypeReceiver(self):
            return self.getTypedRuleContext(KotlinParser.FunctionTypeReceiverContext,0)


        def DOT(self):
            return self.getToken(KotlinParser.DOT, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionType" ):
                listener.enterFunctionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionType" ):
                listener.exitFunctionType(self)




    def functionType(self):

        localctx = KotlinParser.FunctionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_functionType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1387
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.state = 1373
                self.functionTypeReceiver()
                self.state = 1377
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1374
                    self.match(KotlinParser.NL)
                    self.state = 1379
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1380
                self.match(KotlinParser.DOT)
                self.state = 1384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1381
                    self.match(KotlinParser.NL)
                    self.state = 1386
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1389
            self.functionTypeParameters()
            self.state = 1393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1390
                self.match(KotlinParser.NL)
                self.state = 1395
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1396
            self.match(KotlinParser.ARROW)

            self.state = 1400
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1397
                self.match(KotlinParser.NL)
                self.state = 1402
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1403
            self.type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionTypeReceiverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parenthesizedType(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedTypeContext,0)


        def nullableType(self):
            return self.getTypedRuleContext(KotlinParser.NullableTypeContext,0)


        def typeReference(self):
            return self.getTypedRuleContext(KotlinParser.TypeReferenceContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_functionTypeReceiver

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeReceiver" ):
                listener.enterFunctionTypeReceiver(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeReceiver" ):
                listener.exitFunctionTypeReceiver(self)




    def functionTypeReceiver(self):

        localctx = KotlinParser.FunctionTypeReceiverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_functionTypeReceiver)
        try:
            self.state = 1408
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1405
                self.parenthesizedType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1406
                self.nullableType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1407
                self.typeReference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UserTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleUserType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.SimpleUserTypeContext)
            else:
                return self.getTypedRuleContext(KotlinParser.SimpleUserTypeContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.DOT)
            else:
                return self.getToken(KotlinParser.DOT, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_userType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserType" ):
                listener.enterUserType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserType" ):
                listener.exitUserType(self)




    def userType(self):

        localctx = KotlinParser.UserTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_userType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1410
            self.simpleUserType()
            self.state = 1427
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,212,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1414
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1411
                        self.match(KotlinParser.NL)
                        self.state = 1416
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1417
                    self.match(KotlinParser.DOT)
                    self.state = 1421
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1418
                        self.match(KotlinParser.NL)
                        self.state = 1423
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1424
                    self.simpleUserType() 
                self.state = 1429
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,212,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleUserTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(KotlinParser.TypeArgumentsContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_simpleUserType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleUserType" ):
                listener.enterSimpleUserType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleUserType" ):
                listener.exitSimpleUserType(self)




    def simpleUserType(self):

        localctx = KotlinParser.SimpleUserTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_simpleUserType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1430
            self.simpleIdentifier()
            self.state = 1438
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.state = 1434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1431
                    self.match(KotlinParser.NL)
                    self.state = 1436
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1437
                self.typeArguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionTypeParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ParameterContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ParameterContext,i)


        def type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionTypeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameters" ):
                listener.enterFunctionTypeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameters" ):
                listener.exitFunctionTypeParameters(self)




    def functionTypeParameters(self):

        localctx = KotlinParser.FunctionTypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_functionTypeParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1440
            self.match(KotlinParser.LPAREN)
            self.state = 1444
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,215,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1441
                    self.match(KotlinParser.NL) 
                self.state = 1446
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,215,self._ctx)

            self.state = 1449
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.state = 1447
                self.parameter()

            elif la_ == 2:
                self.state = 1448
                self.type()


            self.state = 1470
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,220,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1454
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1451
                        self.match(KotlinParser.NL)
                        self.state = 1456
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1457
                    self.match(KotlinParser.COMMA)
                    self.state = 1461
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1458
                        self.match(KotlinParser.NL)
                        self.state = 1463
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1466
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
                    if la_ == 1:
                        self.state = 1464
                        self.parameter()
                        pass

                    elif la_ == 2:
                        self.state = 1465
                        self.type()
                        pass

             
                self.state = 1472
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,220,self._ctx)

            self.state = 1480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
            if la_ == 1:
                self.state = 1476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1473
                    self.match(KotlinParser.NL)
                    self.state = 1478
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1479
                self.match(KotlinParser.COMMA)


            self.state = 1485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1482
                self.match(KotlinParser.NL)
                self.state = 1487
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1488
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeConstraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(KotlinParser.WHERE, 0)

        def typeConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeConstraintContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeConstraintContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeConstraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConstraints" ):
                listener.enterTypeConstraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConstraints" ):
                listener.exitTypeConstraints(self)




    def typeConstraints(self):

        localctx = KotlinParser.TypeConstraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_typeConstraints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1490
            self.match(KotlinParser.WHERE)
            self.state = 1494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1491
                self.match(KotlinParser.NL)
                self.state = 1496
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1497
            self.typeConstraint()
            self.state = 1514
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,227,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1501
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1498
                        self.match(KotlinParser.NL)
                        self.state = 1503
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1504
                    self.match(KotlinParser.COMMA)
                    self.state = 1508
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1505
                        self.match(KotlinParser.NL)
                        self.state = 1510
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1511
                    self.typeConstraint() 
                self.state = 1516
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,227,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConstraint" ):
                listener.enterTypeConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConstraint" ):
                listener.exitTypeConstraint(self)




    def typeConstraint(self):

        localctx = KotlinParser.TypeConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_typeConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (KotlinParser.FIELD - 93)) | (1 << (KotlinParser.PROPERTY - 93)) | (1 << (KotlinParser.GET - 93)) | (1 << (KotlinParser.SET - 93)) | (1 << (KotlinParser.RECEIVER - 93)) | (1 << (KotlinParser.PARAM - 93)) | (1 << (KotlinParser.SETPARAM - 93)) | (1 << (KotlinParser.DELEGATE - 93)) | (1 << (KotlinParser.LabelReference - 93)))) != 0):
                self.state = 1517
                self.annotations()
                self.state = 1522
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1523
            self.simpleIdentifier()
            self.state = 1527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1524
                self.match(KotlinParser.NL)
                self.state = 1529
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1530
            self.match(KotlinParser.COLON)
            self.state = 1534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1531
                self.match(KotlinParser.NL)
                self.state = 1536
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1537
            self.type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self):
            return self.getToken(KotlinParser.LCURL, 0)

        def statements(self):
            return self.getTypedRuleContext(KotlinParser.StatementsContext,0)


        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = KotlinParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1539
            self.match(KotlinParser.LCURL)
            self.state = 1540
            self.statements()
            self.state = 1541
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anysemi(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnysemiContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnysemiContext,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.StatementContext)
            else:
                return self.getTypedRuleContext(KotlinParser.StatementContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatements" ):
                listener.enterStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatements" ):
                listener.exitStatements(self)




    def statements(self):

        localctx = KotlinParser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_statements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1546
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,231,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1543
                    self.anysemi() 
                self.state = 1548
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,231,self._ctx)

            self.state = 1563
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
            if la_ == 1:
                self.state = 1549
                self.statement()
                self.state = 1560
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,234,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1551 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1550
                                self.anysemi()

                            else:
                                raise NoViableAltException(self)
                            self.state = 1553 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,232,self._ctx)

                        self.state = 1556
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
                        if la_ == 1:
                            self.state = 1555
                            self.statement()

                 
                    self.state = 1562
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,234,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(KotlinParser.DeclarationContext,0)


        def blockLevelExpression(self):
            return self.getTypedRuleContext(KotlinParser.BlockLevelExpressionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = KotlinParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_statement)
        try:
            self.state = 1567
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1565
                self.declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1566
                self.blockLevelExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockLevelExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_blockLevelExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockLevelExpression" ):
                listener.enterBlockLevelExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockLevelExpression" ):
                listener.exitBlockLevelExpression(self)




    def blockLevelExpression(self):

        localctx = KotlinParser.BlockLevelExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_blockLevelExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1572
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,237,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1569
                    self.annotations() 
                self.state = 1574
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,237,self._ctx)

            self.state = 1578
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,238,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1575
                    self.match(KotlinParser.NL) 
                self.state = 1580
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,238,self._ctx)

            self.state = 1581
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.ClassDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.FunctionDeclarationContext,0)


        def propertyDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.PropertyDeclarationContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(KotlinParser.TypeAliasContext,0)


        def labelDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.LabelDefinitionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.LabelDefinitionContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = KotlinParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.LabelDefinition:
                self.state = 1583
                self.labelDefinition()
                self.state = 1588
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1593
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                self.state = 1589
                self.classDeclaration()
                pass

            elif la_ == 2:
                self.state = 1590
                self.functionDeclaration()
                pass

            elif la_ == 3:
                self.state = 1591
                self.propertyDeclaration()
                pass

            elif la_ == 4:
                self.state = 1592
                self.typeAlias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def disjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.DisjunctionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.DisjunctionContext,i)


        def assignmentOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AssignmentOperatorContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AssignmentOperatorContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = KotlinParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1595
            self.disjunction()
            self.state = 1601
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,241,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1596
                    self.assignmentOperator()
                    self.state = 1597
                    self.disjunction() 
                self.state = 1603
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,241,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DisjunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ConjunctionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ConjunctionContext,i)


        def DISJ(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.DISJ)
            else:
                return self.getToken(KotlinParser.DISJ, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_disjunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisjunction" ):
                listener.enterDisjunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisjunction" ):
                listener.exitDisjunction(self)




    def disjunction(self):

        localctx = KotlinParser.DisjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_disjunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1604
            self.conjunction()
            self.state = 1621
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,244,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1608
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1605
                        self.match(KotlinParser.NL)
                        self.state = 1610
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1611
                    self.match(KotlinParser.DISJ)
                    self.state = 1615
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,243,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1612
                            self.match(KotlinParser.NL) 
                        self.state = 1617
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,243,self._ctx)

                    self.state = 1618
                    self.conjunction() 
                self.state = 1623
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,244,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConjunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityComparison(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.EqualityComparisonContext)
            else:
                return self.getTypedRuleContext(KotlinParser.EqualityComparisonContext,i)


        def CONJ(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.CONJ)
            else:
                return self.getToken(KotlinParser.CONJ, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_conjunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConjunction" ):
                listener.enterConjunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConjunction" ):
                listener.exitConjunction(self)




    def conjunction(self):

        localctx = KotlinParser.ConjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_conjunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1624
            self.equalityComparison()
            self.state = 1641
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,247,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1628
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1625
                        self.match(KotlinParser.NL)
                        self.state = 1630
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1631
                    self.match(KotlinParser.CONJ)
                    self.state = 1635
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,246,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1632
                            self.match(KotlinParser.NL) 
                        self.state = 1637
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,246,self._ctx)

                    self.state = 1638
                    self.equalityComparison() 
                self.state = 1643
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,247,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EqualityComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comparison(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ComparisonContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ComparisonContext,i)


        def equalityOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.EqualityOperationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.EqualityOperationContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_equalityComparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityComparison" ):
                listener.enterEqualityComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityComparison" ):
                listener.exitEqualityComparison(self)




    def equalityComparison(self):

        localctx = KotlinParser.EqualityComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_equalityComparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1644
            self.comparison()
            self.state = 1656
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,249,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1645
                    self.equalityOperation()
                    self.state = 1649
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,248,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1646
                            self.match(KotlinParser.NL) 
                        self.state = 1651
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,248,self._ctx)

                    self.state = 1652
                    self.comparison() 
                self.state = 1658
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,249,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedInfix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.NamedInfixContext)
            else:
                return self.getTypedRuleContext(KotlinParser.NamedInfixContext,i)


        def comparisonOperator(self):
            return self.getTypedRuleContext(KotlinParser.ComparisonOperatorContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)




    def comparison(self):

        localctx = KotlinParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_comparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1659
            self.namedInfix()
            self.state = 1669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                self.state = 1660
                self.comparisonOperator()
                self.state = 1664
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,250,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1661
                        self.match(KotlinParser.NL) 
                    self.state = 1666
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,250,self._ctx)

                self.state = 1667
                self.namedInfix()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamedInfixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elvisExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ElvisExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ElvisExpressionContext,i)


        def isOperator(self):
            return self.getTypedRuleContext(KotlinParser.IsOperatorContext,0)


        def type(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def inOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.InOperatorContext)
            else:
                return self.getTypedRuleContext(KotlinParser.InOperatorContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_namedInfix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedInfix" ):
                listener.enterNamedInfix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedInfix" ):
                listener.exitNamedInfix(self)




    def namedInfix(self):

        localctx = KotlinParser.NamedInfixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_namedInfix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1671
            self.elvisExpression()
            self.state = 1694
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                self.state = 1681 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1672
                        self.inOperator()
                        self.state = 1676
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,252,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1673
                                self.match(KotlinParser.NL) 
                            self.state = 1678
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,252,self._ctx)

                        self.state = 1679
                        self.elvisExpression()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1683 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,253,self._ctx)


            elif la_ == 2:
                self.state = 1685
                self.isOperator()
                self.state = 1689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1686
                    self.match(KotlinParser.NL)
                    self.state = 1691
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1692
                self.type()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElvisExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def infixFunctionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.InfixFunctionCallContext)
            else:
                return self.getTypedRuleContext(KotlinParser.InfixFunctionCallContext,i)


        def ELVIS(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.ELVIS)
            else:
                return self.getToken(KotlinParser.ELVIS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_elvisExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElvisExpression" ):
                listener.enterElvisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElvisExpression" ):
                listener.exitElvisExpression(self)




    def elvisExpression(self):

        localctx = KotlinParser.ElvisExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_elvisExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1696
            self.infixFunctionCall()
            self.state = 1713
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,258,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1700
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1697
                        self.match(KotlinParser.NL)
                        self.state = 1702
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1703
                    self.match(KotlinParser.ELVIS)
                    self.state = 1707
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,257,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1704
                            self.match(KotlinParser.NL) 
                        self.state = 1709
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,257,self._ctx)

                    self.state = 1710
                    self.infixFunctionCall() 
                self.state = 1715
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,258,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InfixFunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rangeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.RangeExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.RangeExpressionContext,i)


        def simpleIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.SimpleIdentifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_infixFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInfixFunctionCall" ):
                listener.enterInfixFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInfixFunctionCall" ):
                listener.exitInfixFunctionCall(self)




    def infixFunctionCall(self):

        localctx = KotlinParser.InfixFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_infixFunctionCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1716
            self.rangeExpression()
            self.state = 1728
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,260,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1717
                    self.simpleIdentifier()
                    self.state = 1721
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,259,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1718
                            self.match(KotlinParser.NL) 
                        self.state = 1723
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,259,self._ctx)

                    self.state = 1724
                    self.rangeExpression() 
                self.state = 1730
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,260,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RangeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AdditiveExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AdditiveExpressionContext,i)


        def RANGE(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.RANGE)
            else:
                return self.getToken(KotlinParser.RANGE, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_rangeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeExpression" ):
                listener.enterRangeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeExpression" ):
                listener.exitRangeExpression(self)




    def rangeExpression(self):

        localctx = KotlinParser.RangeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_rangeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1731
            self.additiveExpression()
            self.state = 1742
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,262,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1732
                    self.match(KotlinParser.RANGE)
                    self.state = 1736
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,261,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1733
                            self.match(KotlinParser.NL) 
                        self.state = 1738
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,261,self._ctx)

                    self.state = 1739
                    self.additiveExpression() 
                self.state = 1744
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,262,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AdditiveExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.MultiplicativeExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.MultiplicativeExpressionContext,i)


        def additiveOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AdditiveOperatorContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AdditiveOperatorContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)




    def additiveExpression(self):

        localctx = KotlinParser.AdditiveExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_additiveExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1745
            self.multiplicativeExpression()
            self.state = 1757
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,264,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1746
                    self.additiveOperator()
                    self.state = 1750
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,263,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1747
                            self.match(KotlinParser.NL) 
                        self.state = 1752
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,263,self._ctx)

                    self.state = 1753
                    self.multiplicativeExpression() 
                self.state = 1759
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,264,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultiplicativeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeRHS(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeRHSContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeRHSContext,i)


        def multiplicativeOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.MultiplicativeOperationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.MultiplicativeOperationContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)




    def multiplicativeExpression(self):

        localctx = KotlinParser.MultiplicativeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_multiplicativeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1760
            self.typeRHS()
            self.state = 1772
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,266,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1761
                    self.multiplicativeOperation()
                    self.state = 1765
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,265,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1762
                            self.match(KotlinParser.NL) 
                        self.state = 1767
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,265,self._ctx)

                    self.state = 1768
                    self.typeRHS() 
                self.state = 1774
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,266,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeRHSContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefixUnaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.PrefixUnaryExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.PrefixUnaryExpressionContext,i)


        def typeOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeOperationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeOperationContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeRHS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeRHS" ):
                listener.enterTypeRHS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeRHS" ):
                listener.exitTypeRHS(self)




    def typeRHS(self):

        localctx = KotlinParser.TypeRHSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_typeRHS)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1775
            self.prefixUnaryExpression()
            self.state = 1787
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,268,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1779
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1776
                        self.match(KotlinParser.NL)
                        self.state = 1781
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1782
                    self.typeOperation()
                    self.state = 1783
                    self.prefixUnaryExpression() 
                self.state = 1789
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,268,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrefixUnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixUnaryExpression(self):
            return self.getTypedRuleContext(KotlinParser.PostfixUnaryExpressionContext,0)


        def prefixUnaryOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.PrefixUnaryOperationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.PrefixUnaryOperationContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_prefixUnaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixUnaryExpression" ):
                listener.enterPrefixUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixUnaryExpression" ):
                listener.exitPrefixUnaryExpression(self)




    def prefixUnaryExpression(self):

        localctx = KotlinParser.PrefixUnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_prefixUnaryExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1793
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,269,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1790
                    self.prefixUnaryOperation() 
                self.state = 1795
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,269,self._ctx)

            self.state = 1796
            self.postfixUnaryExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixUnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomicExpression(self):
            return self.getTypedRuleContext(KotlinParser.AtomicExpressionContext,0)


        def callableReference(self):
            return self.getTypedRuleContext(KotlinParser.CallableReferenceContext,0)


        def postfixUnaryOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.PostfixUnaryOperationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.PostfixUnaryOperationContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_postfixUnaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixUnaryExpression" ):
                listener.enterPostfixUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixUnaryExpression" ):
                listener.exitPostfixUnaryExpression(self)




    def postfixUnaryExpression(self):

        localctx = KotlinParser.PostfixUnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_postfixUnaryExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1800
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
            if la_ == 1:
                self.state = 1798
                self.atomicExpression()
                pass

            elif la_ == 2:
                self.state = 1799
                self.callableReference()
                pass


            self.state = 1805
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,271,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1802
                    self.postfixUnaryOperation() 
                self.state = 1807
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,271,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomicExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parenthesizedExpression(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedExpressionContext,0)


        def literalConstant(self):
            return self.getTypedRuleContext(KotlinParser.LiteralConstantContext,0)


        def functionLiteral(self):
            return self.getTypedRuleContext(KotlinParser.FunctionLiteralContext,0)


        def thisExpression(self):
            return self.getTypedRuleContext(KotlinParser.ThisExpressionContext,0)


        def superExpression(self):
            return self.getTypedRuleContext(KotlinParser.SuperExpressionContext,0)


        def conditionalExpression(self):
            return self.getTypedRuleContext(KotlinParser.ConditionalExpressionContext,0)


        def tryExpression(self):
            return self.getTypedRuleContext(KotlinParser.TryExpressionContext,0)


        def objectLiteral(self):
            return self.getTypedRuleContext(KotlinParser.ObjectLiteralContext,0)


        def jumpExpression(self):
            return self.getTypedRuleContext(KotlinParser.JumpExpressionContext,0)


        def loopExpression(self):
            return self.getTypedRuleContext(KotlinParser.LoopExpressionContext,0)


        def collectionLiteral(self):
            return self.getTypedRuleContext(KotlinParser.CollectionLiteralContext,0)


        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def VAL(self):
            return self.getToken(KotlinParser.VAL, 0)

        def identifier(self):
            return self.getTypedRuleContext(KotlinParser.IdentifierContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_atomicExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicExpression" ):
                listener.enterAtomicExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicExpression" ):
                listener.exitAtomicExpression(self)




    def atomicExpression(self):

        localctx = KotlinParser.AtomicExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_atomicExpression)
        try:
            self.state = 1822
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.LPAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1808
                self.parenthesizedExpression()
                pass
            elif token in [KotlinParser.QUOTE_OPEN, KotlinParser.TRIPLE_QUOTE_OPEN, KotlinParser.RealLiteral, KotlinParser.LongLiteral, KotlinParser.IntegerLiteral, KotlinParser.HexLiteral, KotlinParser.BinLiteral, KotlinParser.BooleanLiteral, KotlinParser.NullLiteral, KotlinParser.CharacterLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1809
                self.literalConstant()
                pass
            elif token in [KotlinParser.LCURL, KotlinParser.AT, KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.LabelReference]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1810
                self.functionLiteral()
                pass
            elif token in [KotlinParser.THIS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1811
                self.thisExpression()
                pass
            elif token in [KotlinParser.SUPER]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1812
                self.superExpression()
                pass
            elif token in [KotlinParser.IF, KotlinParser.WHEN]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1813
                self.conditionalExpression()
                pass
            elif token in [KotlinParser.TRY]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1814
                self.tryExpression()
                pass
            elif token in [KotlinParser.OBJECT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1815
                self.objectLiteral()
                pass
            elif token in [KotlinParser.RETURN_AT, KotlinParser.CONTINUE_AT, KotlinParser.BREAK_AT, KotlinParser.THROW, KotlinParser.RETURN, KotlinParser.CONTINUE, KotlinParser.BREAK]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1816
                self.jumpExpression()
                pass
            elif token in [KotlinParser.FOR, KotlinParser.DO, KotlinParser.WHILE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1817
                self.loopExpression()
                pass
            elif token in [KotlinParser.LSQUARE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1818
                self.collectionLiteral()
                pass
            elif token in [KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.OUT, KotlinParser.GETTER, KotlinParser.SETTER, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.Identifier]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1819
                self.simpleIdentifier()
                pass
            elif token in [KotlinParser.VAL]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1820
                self.match(KotlinParser.VAL)
                self.state = 1821
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_parenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)




    def parenthesizedExpression(self):

        localctx = KotlinParser.ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_parenthesizedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1824
            self.match(KotlinParser.LPAREN)
            self.state = 1825
            self.expression()
            self.state = 1826
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeArguments(self):
            return self.getTypedRuleContext(KotlinParser.TypeArgumentsContext,0)


        def valueArguments(self):
            return self.getTypedRuleContext(KotlinParser.ValueArgumentsContext,0)


        def annotatedLambda(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotatedLambdaContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotatedLambdaContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_callSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallSuffix" ):
                listener.enterCallSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallSuffix" ):
                listener.exitCallSuffix(self)




    def callSuffix(self):

        localctx = KotlinParser.CallSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_callSuffix)
        try:
            self.state = 1850
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.LANGLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1828
                self.typeArguments()
                self.state = 1830
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
                if la_ == 1:
                    self.state = 1829
                    self.valueArguments()


                self.state = 1835
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,274,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1832
                        self.annotatedLambda() 
                    self.state = 1837
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,274,self._ctx)

                pass
            elif token in [KotlinParser.LPAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1838
                self.valueArguments()
                self.state = 1842
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,275,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1839
                        self.annotatedLambda() 
                    self.state = 1844
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,275,self._ctx)

                pass
            elif token in [KotlinParser.NL, KotlinParser.LCURL, KotlinParser.AT, KotlinParser.FILE, KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.OUT, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.GETTER, KotlinParser.SETTER, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.Identifier, KotlinParser.LabelReference, KotlinParser.LabelDefinition]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1846 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1845
                        self.annotatedLambda()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1848 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,276,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotatedLambdaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionLiteral(self):
            return self.getTypedRuleContext(KotlinParser.FunctionLiteralContext,0)


        def unescapedAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.UnescapedAnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.UnescapedAnnotationContext,i)


        def LabelDefinition(self):
            return self.getToken(KotlinParser.LabelDefinition, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_annotatedLambda

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotatedLambda" ):
                listener.enterAnnotatedLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotatedLambda" ):
                listener.exitAnnotatedLambda(self)




    def annotatedLambda(self):

        localctx = KotlinParser.AnnotatedLambdaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_annotatedLambda)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (KotlinParser.IMPORT - 58)) | (1 << (KotlinParser.CONSTRUCTOR - 58)) | (1 << (KotlinParser.BY - 58)) | (1 << (KotlinParser.COMPANION - 58)) | (1 << (KotlinParser.INIT - 58)) | (1 << (KotlinParser.WHERE - 58)) | (1 << (KotlinParser.CATCH - 58)) | (1 << (KotlinParser.FINALLY - 58)) | (1 << (KotlinParser.OUT - 58)) | (1 << (KotlinParser.GETTER - 58)) | (1 << (KotlinParser.SETTER - 58)) | (1 << (KotlinParser.DYNAMIC - 58)) | (1 << (KotlinParser.PUBLIC - 58)) | (1 << (KotlinParser.PRIVATE - 58)) | (1 << (KotlinParser.PROTECTED - 58)) | (1 << (KotlinParser.INTERNAL - 58)) | (1 << (KotlinParser.ENUM - 58)) | (1 << (KotlinParser.SEALED - 58)) | (1 << (KotlinParser.ANNOTATION - 58)) | (1 << (KotlinParser.DATA - 58)) | (1 << (KotlinParser.INNER - 58)) | (1 << (KotlinParser.TAILREC - 58)) | (1 << (KotlinParser.OPERATOR - 58)) | (1 << (KotlinParser.INLINE - 58)) | (1 << (KotlinParser.INFIX - 58)) | (1 << (KotlinParser.EXTERNAL - 58)) | (1 << (KotlinParser.SUSPEND - 58)) | (1 << (KotlinParser.OVERRIDE - 58)) | (1 << (KotlinParser.ABSTRACT - 58)) | (1 << (KotlinParser.FINAL - 58)))) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & ((1 << (KotlinParser.OPEN - 122)) | (1 << (KotlinParser.CONST - 122)) | (1 << (KotlinParser.LATEINIT - 122)) | (1 << (KotlinParser.VARARG - 122)) | (1 << (KotlinParser.NOINLINE - 122)) | (1 << (KotlinParser.CROSSINLINE - 122)) | (1 << (KotlinParser.REIFIED - 122)) | (1 << (KotlinParser.Identifier - 122)))) != 0):
                self.state = 1852
                self.unescapedAnnotation()
                self.state = 1857
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.LabelDefinition:
                self.state = 1858
                self.match(KotlinParser.LabelDefinition)


            self.state = 1864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1861
                self.match(KotlinParser.NL)
                self.state = 1866
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1867
            self.functionLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayAccessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(KotlinParser.LSQUARE, 0)

        def RSQUARE(self):
            return self.getToken(KotlinParser.RSQUARE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_arrayAccess

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayAccess" ):
                listener.enterArrayAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayAccess" ):
                listener.exitArrayAccess(self)




    def arrayAccess(self):

        localctx = KotlinParser.ArrayAccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_arrayAccess)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1869
            self.match(KotlinParser.LSQUARE)
            self.state = 1878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.NL) | (1 << KotlinParser.LPAREN) | (1 << KotlinParser.LSQUARE) | (1 << KotlinParser.LCURL) | (1 << KotlinParser.ADD) | (1 << KotlinParser.SUB) | (1 << KotlinParser.INCR) | (1 << KotlinParser.DECR) | (1 << KotlinParser.EXCL) | (1 << KotlinParser.COLONCOLON) | (1 << KotlinParser.Q_COLONCOLON) | (1 << KotlinParser.AT) | (1 << KotlinParser.RETURN_AT) | (1 << KotlinParser.CONTINUE_AT) | (1 << KotlinParser.BREAK_AT) | (1 << KotlinParser.FILE) | (1 << KotlinParser.IMPORT) | (1 << KotlinParser.OBJECT) | (1 << KotlinParser.VAL))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (KotlinParser.CONSTRUCTOR - 66)) | (1 << (KotlinParser.BY - 66)) | (1 << (KotlinParser.COMPANION - 66)) | (1 << (KotlinParser.INIT - 66)) | (1 << (KotlinParser.THIS - 66)) | (1 << (KotlinParser.SUPER - 66)) | (1 << (KotlinParser.WHERE - 66)) | (1 << (KotlinParser.IF - 66)) | (1 << (KotlinParser.WHEN - 66)) | (1 << (KotlinParser.TRY - 66)) | (1 << (KotlinParser.CATCH - 66)) | (1 << (KotlinParser.FINALLY - 66)) | (1 << (KotlinParser.FOR - 66)) | (1 << (KotlinParser.DO - 66)) | (1 << (KotlinParser.WHILE - 66)) | (1 << (KotlinParser.THROW - 66)) | (1 << (KotlinParser.RETURN - 66)) | (1 << (KotlinParser.CONTINUE - 66)) | (1 << (KotlinParser.BREAK - 66)) | (1 << (KotlinParser.OUT - 66)) | (1 << (KotlinParser.FIELD - 66)) | (1 << (KotlinParser.PROPERTY - 66)) | (1 << (KotlinParser.GET - 66)) | (1 << (KotlinParser.SET - 66)) | (1 << (KotlinParser.GETTER - 66)) | (1 << (KotlinParser.SETTER - 66)) | (1 << (KotlinParser.RECEIVER - 66)) | (1 << (KotlinParser.PARAM - 66)) | (1 << (KotlinParser.SETPARAM - 66)) | (1 << (KotlinParser.DELEGATE - 66)) | (1 << (KotlinParser.DYNAMIC - 66)) | (1 << (KotlinParser.PUBLIC - 66)) | (1 << (KotlinParser.PRIVATE - 66)) | (1 << (KotlinParser.PROTECTED - 66)) | (1 << (KotlinParser.INTERNAL - 66)) | (1 << (KotlinParser.ENUM - 66)) | (1 << (KotlinParser.SEALED - 66)) | (1 << (KotlinParser.ANNOTATION - 66)) | (1 << (KotlinParser.DATA - 66)) | (1 << (KotlinParser.INNER - 66)) | (1 << (KotlinParser.TAILREC - 66)) | (1 << (KotlinParser.OPERATOR - 66)) | (1 << (KotlinParser.INLINE - 66)) | (1 << (KotlinParser.INFIX - 66)) | (1 << (KotlinParser.EXTERNAL - 66)) | (1 << (KotlinParser.SUSPEND - 66)) | (1 << (KotlinParser.OVERRIDE - 66)) | (1 << (KotlinParser.ABSTRACT - 66)) | (1 << (KotlinParser.FINAL - 66)) | (1 << (KotlinParser.OPEN - 66)) | (1 << (KotlinParser.CONST - 66)) | (1 << (KotlinParser.LATEINIT - 66)) | (1 << (KotlinParser.VARARG - 66)) | (1 << (KotlinParser.NOINLINE - 66)) | (1 << (KotlinParser.CROSSINLINE - 66)) | (1 << (KotlinParser.REIFIED - 66)) | (1 << (KotlinParser.QUOTE_OPEN - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (KotlinParser.TRIPLE_QUOTE_OPEN - 130)) | (1 << (KotlinParser.RealLiteral - 130)) | (1 << (KotlinParser.LongLiteral - 130)) | (1 << (KotlinParser.IntegerLiteral - 130)) | (1 << (KotlinParser.HexLiteral - 130)) | (1 << (KotlinParser.BinLiteral - 130)) | (1 << (KotlinParser.BooleanLiteral - 130)) | (1 << (KotlinParser.NullLiteral - 130)) | (1 << (KotlinParser.Identifier - 130)) | (1 << (KotlinParser.LabelReference - 130)) | (1 << (KotlinParser.LabelDefinition - 130)) | (1 << (KotlinParser.CharacterLiteral - 130)))) != 0):
                self.state = 1870
                self.expression()
                self.state = 1875
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.COMMA:
                    self.state = 1871
                    self.match(KotlinParser.COMMA)
                    self.state = 1872
                    self.expression()
                    self.state = 1877
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1880
            self.match(KotlinParser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def valueArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ValueArgumentContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ValueArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_valueArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueArguments" ):
                listener.enterValueArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueArguments" ):
                listener.exitValueArguments(self)




    def valueArguments(self):

        localctx = KotlinParser.ValueArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_valueArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1882
            self.match(KotlinParser.LPAREN)
            self.state = 1900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.NL) | (1 << KotlinParser.LPAREN) | (1 << KotlinParser.LSQUARE) | (1 << KotlinParser.LCURL) | (1 << KotlinParser.MULT) | (1 << KotlinParser.ADD) | (1 << KotlinParser.SUB) | (1 << KotlinParser.INCR) | (1 << KotlinParser.DECR) | (1 << KotlinParser.EXCL) | (1 << KotlinParser.COLONCOLON) | (1 << KotlinParser.Q_COLONCOLON) | (1 << KotlinParser.AT) | (1 << KotlinParser.RETURN_AT) | (1 << KotlinParser.CONTINUE_AT) | (1 << KotlinParser.BREAK_AT) | (1 << KotlinParser.FILE) | (1 << KotlinParser.IMPORT) | (1 << KotlinParser.OBJECT) | (1 << KotlinParser.VAL))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (KotlinParser.CONSTRUCTOR - 66)) | (1 << (KotlinParser.BY - 66)) | (1 << (KotlinParser.COMPANION - 66)) | (1 << (KotlinParser.INIT - 66)) | (1 << (KotlinParser.THIS - 66)) | (1 << (KotlinParser.SUPER - 66)) | (1 << (KotlinParser.WHERE - 66)) | (1 << (KotlinParser.IF - 66)) | (1 << (KotlinParser.WHEN - 66)) | (1 << (KotlinParser.TRY - 66)) | (1 << (KotlinParser.CATCH - 66)) | (1 << (KotlinParser.FINALLY - 66)) | (1 << (KotlinParser.FOR - 66)) | (1 << (KotlinParser.DO - 66)) | (1 << (KotlinParser.WHILE - 66)) | (1 << (KotlinParser.THROW - 66)) | (1 << (KotlinParser.RETURN - 66)) | (1 << (KotlinParser.CONTINUE - 66)) | (1 << (KotlinParser.BREAK - 66)) | (1 << (KotlinParser.OUT - 66)) | (1 << (KotlinParser.FIELD - 66)) | (1 << (KotlinParser.PROPERTY - 66)) | (1 << (KotlinParser.GET - 66)) | (1 << (KotlinParser.SET - 66)) | (1 << (KotlinParser.GETTER - 66)) | (1 << (KotlinParser.SETTER - 66)) | (1 << (KotlinParser.RECEIVER - 66)) | (1 << (KotlinParser.PARAM - 66)) | (1 << (KotlinParser.SETPARAM - 66)) | (1 << (KotlinParser.DELEGATE - 66)) | (1 << (KotlinParser.DYNAMIC - 66)) | (1 << (KotlinParser.PUBLIC - 66)) | (1 << (KotlinParser.PRIVATE - 66)) | (1 << (KotlinParser.PROTECTED - 66)) | (1 << (KotlinParser.INTERNAL - 66)) | (1 << (KotlinParser.ENUM - 66)) | (1 << (KotlinParser.SEALED - 66)) | (1 << (KotlinParser.ANNOTATION - 66)) | (1 << (KotlinParser.DATA - 66)) | (1 << (KotlinParser.INNER - 66)) | (1 << (KotlinParser.TAILREC - 66)) | (1 << (KotlinParser.OPERATOR - 66)) | (1 << (KotlinParser.INLINE - 66)) | (1 << (KotlinParser.INFIX - 66)) | (1 << (KotlinParser.EXTERNAL - 66)) | (1 << (KotlinParser.SUSPEND - 66)) | (1 << (KotlinParser.OVERRIDE - 66)) | (1 << (KotlinParser.ABSTRACT - 66)) | (1 << (KotlinParser.FINAL - 66)) | (1 << (KotlinParser.OPEN - 66)) | (1 << (KotlinParser.CONST - 66)) | (1 << (KotlinParser.LATEINIT - 66)) | (1 << (KotlinParser.VARARG - 66)) | (1 << (KotlinParser.NOINLINE - 66)) | (1 << (KotlinParser.CROSSINLINE - 66)) | (1 << (KotlinParser.REIFIED - 66)) | (1 << (KotlinParser.QUOTE_OPEN - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (KotlinParser.TRIPLE_QUOTE_OPEN - 130)) | (1 << (KotlinParser.RealLiteral - 130)) | (1 << (KotlinParser.LongLiteral - 130)) | (1 << (KotlinParser.IntegerLiteral - 130)) | (1 << (KotlinParser.HexLiteral - 130)) | (1 << (KotlinParser.BinLiteral - 130)) | (1 << (KotlinParser.BooleanLiteral - 130)) | (1 << (KotlinParser.NullLiteral - 130)) | (1 << (KotlinParser.Identifier - 130)) | (1 << (KotlinParser.LabelReference - 130)) | (1 << (KotlinParser.LabelDefinition - 130)) | (1 << (KotlinParser.CharacterLiteral - 130)))) != 0):
                self.state = 1883
                self.valueArgument()
                self.state = 1888
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,283,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1884
                        self.match(KotlinParser.COMMA)
                        self.state = 1885
                        self.valueArgument() 
                    self.state = 1890
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,283,self._ctx)

                self.state = 1898
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==KotlinParser.NL or _la==KotlinParser.COMMA:
                    self.state = 1894
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1891
                        self.match(KotlinParser.NL)
                        self.state = 1896
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1897
                    self.match(KotlinParser.COMMA)




            self.state = 1902
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGLE(self):
            return self.getToken(KotlinParser.LANGLE, 0)

        def typeProjection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeProjectionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeProjectionContext,i)


        def RANGLE(self):
            return self.getToken(KotlinParser.RANGLE, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def QUEST(self):
            return self.getToken(KotlinParser.QUEST, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArguments" ):
                listener.enterTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArguments" ):
                listener.exitTypeArguments(self)




    def typeArguments(self):

        localctx = KotlinParser.TypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_typeArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1904
            self.match(KotlinParser.LANGLE)
            self.state = 1908
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1905
                self.match(KotlinParser.NL)
                self.state = 1910
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1911
            self.typeProjection()
            self.state = 1922
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,289,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1915
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1912
                        self.match(KotlinParser.NL)
                        self.state = 1917
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1918
                    self.match(KotlinParser.COMMA)
                    self.state = 1919
                    self.typeProjection() 
                self.state = 1924
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,289,self._ctx)

            self.state = 1932
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
            if la_ == 1:
                self.state = 1928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1925
                    self.match(KotlinParser.NL)
                    self.state = 1930
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1931
                self.match(KotlinParser.COMMA)


            self.state = 1937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1934
                self.match(KotlinParser.NL)
                self.state = 1939
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1940
            self.match(KotlinParser.RANGLE)
            self.state = 1942
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
            if la_ == 1:
                self.state = 1941
                self.match(KotlinParser.QUEST)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeProjectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def typeProjectionModifierList(self):
            return self.getTypedRuleContext(KotlinParser.TypeProjectionModifierListContext,0)


        def MULT(self):
            return self.getToken(KotlinParser.MULT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeProjection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeProjection" ):
                listener.enterTypeProjection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeProjection" ):
                listener.exitTypeProjection(self)




    def typeProjection(self):

        localctx = KotlinParser.TypeProjectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_typeProjection)
        try:
            self.state = 1949
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.LPAREN, KotlinParser.AT, KotlinParser.FILE, KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.IN, KotlinParser.OUT, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.GETTER, KotlinParser.SETTER, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.Identifier, KotlinParser.LabelReference]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1945
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
                if la_ == 1:
                    self.state = 1944
                    self.typeProjectionModifierList()


                self.state = 1947
                self.type()
                pass
            elif token in [KotlinParser.MULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1948
                self.match(KotlinParser.MULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeProjectionModifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varianceAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.VarianceAnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.VarianceAnnotationContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_typeProjectionModifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeProjectionModifierList" ):
                listener.enterTypeProjectionModifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeProjectionModifierList" ):
                listener.exitTypeProjectionModifierList(self)




    def typeProjectionModifierList(self):

        localctx = KotlinParser.TypeProjectionModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_typeProjectionModifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1952 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1951
                    self.varianceAnnotation()

                else:
                    raise NoViableAltException(self)
                self.state = 1954 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,296,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def MULT(self):
            return self.getToken(KotlinParser.MULT, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_valueArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueArgument" ):
                listener.enterValueArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueArgument" ):
                listener.exitValueArgument(self)




    def valueArgument(self):

        localctx = KotlinParser.ValueArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_valueArgument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1970
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
            if la_ == 1:
                self.state = 1956
                self.simpleIdentifier()
                self.state = 1960
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1957
                    self.match(KotlinParser.NL)
                    self.state = 1962
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1963
                self.match(KotlinParser.ASSIGNMENT)
                self.state = 1967
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,298,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1964
                        self.match(KotlinParser.NL) 
                    self.state = 1969
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,298,self._ctx)



            self.state = 1973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.MULT:
                self.state = 1972
                self.match(KotlinParser.MULT)


            self.state = 1978
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,301,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1975
                    self.match(KotlinParser.NL) 
                self.state = 1980
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,301,self._ctx)

            self.state = 1981
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BooleanLiteral(self):
            return self.getToken(KotlinParser.BooleanLiteral, 0)

        def IntegerLiteral(self):
            return self.getToken(KotlinParser.IntegerLiteral, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(KotlinParser.StringLiteralContext,0)


        def HexLiteral(self):
            return self.getToken(KotlinParser.HexLiteral, 0)

        def BinLiteral(self):
            return self.getToken(KotlinParser.BinLiteral, 0)

        def CharacterLiteral(self):
            return self.getToken(KotlinParser.CharacterLiteral, 0)

        def RealLiteral(self):
            return self.getToken(KotlinParser.RealLiteral, 0)

        def NullLiteral(self):
            return self.getToken(KotlinParser.NullLiteral, 0)

        def LongLiteral(self):
            return self.getToken(KotlinParser.LongLiteral, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_literalConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralConstant" ):
                listener.enterLiteralConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralConstant" ):
                listener.exitLiteralConstant(self)




    def literalConstant(self):

        localctx = KotlinParser.LiteralConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_literalConstant)
        try:
            self.state = 1992
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.BooleanLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1983
                self.match(KotlinParser.BooleanLiteral)
                pass
            elif token in [KotlinParser.IntegerLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1984
                self.match(KotlinParser.IntegerLiteral)
                pass
            elif token in [KotlinParser.QUOTE_OPEN, KotlinParser.TRIPLE_QUOTE_OPEN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1985
                self.stringLiteral()
                pass
            elif token in [KotlinParser.HexLiteral]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1986
                self.match(KotlinParser.HexLiteral)
                pass
            elif token in [KotlinParser.BinLiteral]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1987
                self.match(KotlinParser.BinLiteral)
                pass
            elif token in [KotlinParser.CharacterLiteral]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1988
                self.match(KotlinParser.CharacterLiteral)
                pass
            elif token in [KotlinParser.RealLiteral]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1989
                self.match(KotlinParser.RealLiteral)
                pass
            elif token in [KotlinParser.NullLiteral]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1990
                self.match(KotlinParser.NullLiteral)
                pass
            elif token in [KotlinParser.LongLiteral]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1991
                self.match(KotlinParser.LongLiteral)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lineStringLiteral(self):
            return self.getTypedRuleContext(KotlinParser.LineStringLiteralContext,0)


        def multiLineStringLiteral(self):
            return self.getTypedRuleContext(KotlinParser.MultiLineStringLiteralContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)




    def stringLiteral(self):

        localctx = KotlinParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_stringLiteral)
        try:
            self.state = 1996
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.QUOTE_OPEN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1994
                self.lineStringLiteral()
                pass
            elif token in [KotlinParser.TRIPLE_QUOTE_OPEN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1995
                self.multiLineStringLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LineStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTE_OPEN(self):
            return self.getToken(KotlinParser.QUOTE_OPEN, 0)

        def QUOTE_CLOSE(self):
            return self.getToken(KotlinParser.QUOTE_CLOSE, 0)

        def lineStringContent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.LineStringContentContext)
            else:
                return self.getTypedRuleContext(KotlinParser.LineStringContentContext,i)


        def lineStringExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.LineStringExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.LineStringExpressionContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_lineStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineStringLiteral" ):
                listener.enterLineStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineStringLiteral" ):
                listener.exitLineStringLiteral(self)




    def lineStringLiteral(self):

        localctx = KotlinParser.LineStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_lineStringLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1998
            self.match(KotlinParser.QUOTE_OPEN)
            self.state = 2003
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 157)) & ~0x3f) == 0 and ((1 << (_la - 157)) & ((1 << (KotlinParser.LineStrRef - 157)) | (1 << (KotlinParser.LineStrText - 157)) | (1 << (KotlinParser.LineStrEscapedChar - 157)) | (1 << (KotlinParser.LineStrExprStart - 157)))) != 0):
                self.state = 2001
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [KotlinParser.LineStrRef, KotlinParser.LineStrText, KotlinParser.LineStrEscapedChar]:
                    self.state = 1999
                    self.lineStringContent()
                    pass
                elif token in [KotlinParser.LineStrExprStart]:
                    self.state = 2000
                    self.lineStringExpression()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2005
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2006
            self.match(KotlinParser.QUOTE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultiLineStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRIPLE_QUOTE_OPEN(self):
            return self.getToken(KotlinParser.TRIPLE_QUOTE_OPEN, 0)

        def TRIPLE_QUOTE_CLOSE(self):
            return self.getToken(KotlinParser.TRIPLE_QUOTE_CLOSE, 0)

        def multiLineStringContent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.MultiLineStringContentContext)
            else:
                return self.getTypedRuleContext(KotlinParser.MultiLineStringContentContext,i)


        def multiLineStringExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.MultiLineStringExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.MultiLineStringExpressionContext,i)


        def lineStringLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.LineStringLiteralContext)
            else:
                return self.getTypedRuleContext(KotlinParser.LineStringLiteralContext,i)


        def MultiLineStringQuote(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.MultiLineStringQuote)
            else:
                return self.getToken(KotlinParser.MultiLineStringQuote, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiLineStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiLineStringLiteral" ):
                listener.enterMultiLineStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiLineStringLiteral" ):
                listener.exitMultiLineStringLiteral(self)




    def multiLineStringLiteral(self):

        localctx = KotlinParser.MultiLineStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_multiLineStringLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2008
            self.match(KotlinParser.TRIPLE_QUOTE_OPEN)
            self.state = 2015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (KotlinParser.QUOTE_OPEN - 129)) | (1 << (KotlinParser.MultiLineStringQuote - 129)) | (1 << (KotlinParser.MultiLineStrRef - 129)) | (1 << (KotlinParser.MultiLineStrText - 129)) | (1 << (KotlinParser.MultiLineStrEscapedChar - 129)) | (1 << (KotlinParser.MultiLineStrExprStart - 129)))) != 0):
                self.state = 2013
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [KotlinParser.MultiLineStrRef, KotlinParser.MultiLineStrText, KotlinParser.MultiLineStrEscapedChar]:
                    self.state = 2009
                    self.multiLineStringContent()
                    pass
                elif token in [KotlinParser.MultiLineStrExprStart]:
                    self.state = 2010
                    self.multiLineStringExpression()
                    pass
                elif token in [KotlinParser.QUOTE_OPEN]:
                    self.state = 2011
                    self.lineStringLiteral()
                    pass
                elif token in [KotlinParser.MultiLineStringQuote]:
                    self.state = 2012
                    self.match(KotlinParser.MultiLineStringQuote)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2017
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2018
            self.match(KotlinParser.TRIPLE_QUOTE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LineStringContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LineStrText(self):
            return self.getToken(KotlinParser.LineStrText, 0)

        def LineStrEscapedChar(self):
            return self.getToken(KotlinParser.LineStrEscapedChar, 0)

        def LineStrRef(self):
            return self.getToken(KotlinParser.LineStrRef, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_lineStringContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineStringContent" ):
                listener.enterLineStringContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineStringContent" ):
                listener.exitLineStringContent(self)




    def lineStringContent(self):

        localctx = KotlinParser.LineStringContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_lineStringContent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2020
            _la = self._input.LA(1)
            if not(((((_la - 157)) & ~0x3f) == 0 and ((1 << (_la - 157)) & ((1 << (KotlinParser.LineStrRef - 157)) | (1 << (KotlinParser.LineStrText - 157)) | (1 << (KotlinParser.LineStrEscapedChar - 157)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LineStringExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LineStrExprStart(self):
            return self.getToken(KotlinParser.LineStrExprStart, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_lineStringExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineStringExpression" ):
                listener.enterLineStringExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineStringExpression" ):
                listener.exitLineStringExpression(self)




    def lineStringExpression(self):

        localctx = KotlinParser.LineStringExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_lineStringExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2022
            self.match(KotlinParser.LineStrExprStart)
            self.state = 2023
            self.expression()
            self.state = 2024
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultiLineStringContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MultiLineStrText(self):
            return self.getToken(KotlinParser.MultiLineStrText, 0)

        def MultiLineStrEscapedChar(self):
            return self.getToken(KotlinParser.MultiLineStrEscapedChar, 0)

        def MultiLineStrRef(self):
            return self.getToken(KotlinParser.MultiLineStrRef, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiLineStringContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiLineStringContent" ):
                listener.enterMultiLineStringContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiLineStringContent" ):
                listener.exitMultiLineStringContent(self)




    def multiLineStringContent(self):

        localctx = KotlinParser.MultiLineStringContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_multiLineStringContent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2026
            _la = self._input.LA(1)
            if not(((((_la - 163)) & ~0x3f) == 0 and ((1 << (_la - 163)) & ((1 << (KotlinParser.MultiLineStrRef - 163)) | (1 << (KotlinParser.MultiLineStrText - 163)) | (1 << (KotlinParser.MultiLineStrEscapedChar - 163)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultiLineStringExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MultiLineStrExprStart(self):
            return self.getToken(KotlinParser.MultiLineStrExprStart, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiLineStringExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiLineStringExpression" ):
                listener.enterMultiLineStringExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiLineStringExpression" ):
                listener.exitMultiLineStringExpression(self)




    def multiLineStringExpression(self):

        localctx = KotlinParser.MultiLineStringExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_multiLineStringExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2028
            self.match(KotlinParser.MultiLineStrExprStart)
            self.state = 2029
            self.expression()
            self.state = 2030
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self):
            return self.getToken(KotlinParser.LCURL, 0)

        def statements(self):
            return self.getTypedRuleContext(KotlinParser.StatementsContext,0)


        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def lambdaParameters(self):
            return self.getTypedRuleContext(KotlinParser.LambdaParametersContext,0)


        def ARROW(self):
            return self.getToken(KotlinParser.ARROW, 0)

        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionLiteral" ):
                listener.enterFunctionLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionLiteral" ):
                listener.exitFunctionLiteral(self)




    def functionLiteral(self):

        localctx = KotlinParser.FunctionLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_functionLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2035
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (KotlinParser.FIELD - 93)) | (1 << (KotlinParser.PROPERTY - 93)) | (1 << (KotlinParser.GET - 93)) | (1 << (KotlinParser.SET - 93)) | (1 << (KotlinParser.RECEIVER - 93)) | (1 << (KotlinParser.PARAM - 93)) | (1 << (KotlinParser.SETPARAM - 93)) | (1 << (KotlinParser.DELEGATE - 93)) | (1 << (KotlinParser.LabelReference - 93)))) != 0):
                self.state = 2032
                self.annotations()
                self.state = 2037
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2084
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,315,self._ctx)
            if la_ == 1:
                self.state = 2038
                self.match(KotlinParser.LCURL)
                self.state = 2042
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,309,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2039
                        self.match(KotlinParser.NL) 
                    self.state = 2044
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,309,self._ctx)

                self.state = 2045
                self.statements()
                self.state = 2049
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2046
                    self.match(KotlinParser.NL)
                    self.state = 2051
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2052
                self.match(KotlinParser.RCURL)
                pass

            elif la_ == 2:
                self.state = 2054
                self.match(KotlinParser.LCURL)
                self.state = 2058
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,311,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2055
                        self.match(KotlinParser.NL) 
                    self.state = 2060
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,311,self._ctx)

                self.state = 2061
                self.lambdaParameters()
                self.state = 2065
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2062
                    self.match(KotlinParser.NL)
                    self.state = 2067
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2068
                self.match(KotlinParser.ARROW)
                self.state = 2072
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,313,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2069
                        self.match(KotlinParser.NL) 
                    self.state = 2074
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,313,self._ctx)

                self.state = 2075
                self.statements()
                self.state = 2079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2076
                    self.match(KotlinParser.NL)
                    self.state = 2081
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2082
                self.match(KotlinParser.RCURL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdaParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.LambdaParameterContext)
            else:
                return self.getTypedRuleContext(KotlinParser.LambdaParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_lambdaParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaParameters" ):
                listener.enterLambdaParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaParameters" ):
                listener.exitLambdaParameters(self)




    def lambdaParameters(self):

        localctx = KotlinParser.LambdaParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_lambdaParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2087
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.LPAREN or _la==KotlinParser.Identifier or _la==KotlinParser.PineIdentifier:
                self.state = 2086
                self.lambdaParameter()


            self.state = 2105
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,319,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2092
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2089
                        self.match(KotlinParser.NL)
                        self.state = 2094
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2095
                    self.match(KotlinParser.COMMA)
                    self.state = 2099
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2096
                        self.match(KotlinParser.NL)
                        self.state = 2101
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2102
                    self.lambdaParameter() 
                self.state = 2107
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,319,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdaParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.VariableDeclarationContext,0)


        def multiVariableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.MultiVariableDeclarationContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_lambdaParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaParameter" ):
                listener.enterLambdaParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaParameter" ):
                listener.exitLambdaParameter(self)




    def lambdaParameter(self):

        localctx = KotlinParser.LambdaParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_lambdaParameter)
        self._la = 0 # Token type
        try:
            self.state = 2126
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.Identifier, KotlinParser.PineIdentifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2108
                self.variableDeclaration()
                pass
            elif token in [KotlinParser.LPAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2109
                self.multiVariableDeclaration()
                self.state = 2124
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,322,self._ctx)
                if la_ == 1:
                    self.state = 2113
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2110
                        self.match(KotlinParser.NL)
                        self.state = 2115
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2116
                    self.match(KotlinParser.COLON)
                    self.state = 2120
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2117
                        self.match(KotlinParser.NL)
                        self.state = 2122
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2123
                    self.type()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT(self):
            return self.getToken(KotlinParser.OBJECT, 0)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def delegationSpecifiers(self):
            return self.getTypedRuleContext(KotlinParser.DelegationSpecifiersContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def classBody(self):
            return self.getTypedRuleContext(KotlinParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_objectLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectLiteral" ):
                listener.enterObjectLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectLiteral" ):
                listener.exitObjectLiteral(self)




    def objectLiteral(self):

        localctx = KotlinParser.ObjectLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_objectLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2128
            self.match(KotlinParser.OBJECT)
            self.state = 2143
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
            if la_ == 1:
                self.state = 2132
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2129
                    self.match(KotlinParser.NL)
                    self.state = 2134
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2135
                self.match(KotlinParser.COLON)
                self.state = 2139
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2136
                    self.match(KotlinParser.NL)
                    self.state = 2141
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2142
                self.delegationSpecifiers()


            self.state = 2148
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,327,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2145
                    self.match(KotlinParser.NL) 
                self.state = 2150
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,327,self._ctx)

            self.state = 2152
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
            if la_ == 1:
                self.state = 2151
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CollectionLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(KotlinParser.LSQUARE, 0)

        def RSQUARE(self):
            return self.getToken(KotlinParser.RSQUARE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_collectionLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionLiteral" ):
                listener.enterCollectionLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionLiteral" ):
                listener.exitCollectionLiteral(self)




    def collectionLiteral(self):

        localctx = KotlinParser.CollectionLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_collectionLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2154
            self.match(KotlinParser.LSQUARE)
            self.state = 2156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.NL) | (1 << KotlinParser.LPAREN) | (1 << KotlinParser.LSQUARE) | (1 << KotlinParser.LCURL) | (1 << KotlinParser.ADD) | (1 << KotlinParser.SUB) | (1 << KotlinParser.INCR) | (1 << KotlinParser.DECR) | (1 << KotlinParser.EXCL) | (1 << KotlinParser.COLONCOLON) | (1 << KotlinParser.Q_COLONCOLON) | (1 << KotlinParser.AT) | (1 << KotlinParser.RETURN_AT) | (1 << KotlinParser.CONTINUE_AT) | (1 << KotlinParser.BREAK_AT) | (1 << KotlinParser.FILE) | (1 << KotlinParser.IMPORT) | (1 << KotlinParser.OBJECT) | (1 << KotlinParser.VAL))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (KotlinParser.CONSTRUCTOR - 66)) | (1 << (KotlinParser.BY - 66)) | (1 << (KotlinParser.COMPANION - 66)) | (1 << (KotlinParser.INIT - 66)) | (1 << (KotlinParser.THIS - 66)) | (1 << (KotlinParser.SUPER - 66)) | (1 << (KotlinParser.WHERE - 66)) | (1 << (KotlinParser.IF - 66)) | (1 << (KotlinParser.WHEN - 66)) | (1 << (KotlinParser.TRY - 66)) | (1 << (KotlinParser.CATCH - 66)) | (1 << (KotlinParser.FINALLY - 66)) | (1 << (KotlinParser.FOR - 66)) | (1 << (KotlinParser.DO - 66)) | (1 << (KotlinParser.WHILE - 66)) | (1 << (KotlinParser.THROW - 66)) | (1 << (KotlinParser.RETURN - 66)) | (1 << (KotlinParser.CONTINUE - 66)) | (1 << (KotlinParser.BREAK - 66)) | (1 << (KotlinParser.OUT - 66)) | (1 << (KotlinParser.FIELD - 66)) | (1 << (KotlinParser.PROPERTY - 66)) | (1 << (KotlinParser.GET - 66)) | (1 << (KotlinParser.SET - 66)) | (1 << (KotlinParser.GETTER - 66)) | (1 << (KotlinParser.SETTER - 66)) | (1 << (KotlinParser.RECEIVER - 66)) | (1 << (KotlinParser.PARAM - 66)) | (1 << (KotlinParser.SETPARAM - 66)) | (1 << (KotlinParser.DELEGATE - 66)) | (1 << (KotlinParser.DYNAMIC - 66)) | (1 << (KotlinParser.PUBLIC - 66)) | (1 << (KotlinParser.PRIVATE - 66)) | (1 << (KotlinParser.PROTECTED - 66)) | (1 << (KotlinParser.INTERNAL - 66)) | (1 << (KotlinParser.ENUM - 66)) | (1 << (KotlinParser.SEALED - 66)) | (1 << (KotlinParser.ANNOTATION - 66)) | (1 << (KotlinParser.DATA - 66)) | (1 << (KotlinParser.INNER - 66)) | (1 << (KotlinParser.TAILREC - 66)) | (1 << (KotlinParser.OPERATOR - 66)) | (1 << (KotlinParser.INLINE - 66)) | (1 << (KotlinParser.INFIX - 66)) | (1 << (KotlinParser.EXTERNAL - 66)) | (1 << (KotlinParser.SUSPEND - 66)) | (1 << (KotlinParser.OVERRIDE - 66)) | (1 << (KotlinParser.ABSTRACT - 66)) | (1 << (KotlinParser.FINAL - 66)) | (1 << (KotlinParser.OPEN - 66)) | (1 << (KotlinParser.CONST - 66)) | (1 << (KotlinParser.LATEINIT - 66)) | (1 << (KotlinParser.VARARG - 66)) | (1 << (KotlinParser.NOINLINE - 66)) | (1 << (KotlinParser.CROSSINLINE - 66)) | (1 << (KotlinParser.REIFIED - 66)) | (1 << (KotlinParser.QUOTE_OPEN - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (KotlinParser.TRIPLE_QUOTE_OPEN - 130)) | (1 << (KotlinParser.RealLiteral - 130)) | (1 << (KotlinParser.LongLiteral - 130)) | (1 << (KotlinParser.IntegerLiteral - 130)) | (1 << (KotlinParser.HexLiteral - 130)) | (1 << (KotlinParser.BinLiteral - 130)) | (1 << (KotlinParser.BooleanLiteral - 130)) | (1 << (KotlinParser.NullLiteral - 130)) | (1 << (KotlinParser.Identifier - 130)) | (1 << (KotlinParser.LabelReference - 130)) | (1 << (KotlinParser.LabelDefinition - 130)) | (1 << (KotlinParser.CharacterLiteral - 130)))) != 0):
                self.state = 2155
                self.expression()


            self.state = 2162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.COMMA:
                self.state = 2158
                self.match(KotlinParser.COMMA)
                self.state = 2159
                self.expression()
                self.state = 2164
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2165
            self.match(KotlinParser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ThisExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THIS(self):
            return self.getToken(KotlinParser.THIS, 0)

        def LabelReference(self):
            return self.getToken(KotlinParser.LabelReference, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_thisExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThisExpression" ):
                listener.enterThisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThisExpression" ):
                listener.exitThisExpression(self)




    def thisExpression(self):

        localctx = KotlinParser.ThisExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_thisExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2167
            self.match(KotlinParser.THIS)
            self.state = 2169
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
            if la_ == 1:
                self.state = 2168
                self.match(KotlinParser.LabelReference)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SuperExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUPER(self):
            return self.getToken(KotlinParser.SUPER, 0)

        def LANGLE(self):
            return self.getToken(KotlinParser.LANGLE, 0)

        def type(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def RANGLE(self):
            return self.getToken(KotlinParser.RANGLE, 0)

        def LabelReference(self):
            return self.getToken(KotlinParser.LabelReference, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_superExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperExpression" ):
                listener.enterSuperExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperExpression" ):
                listener.exitSuperExpression(self)




    def superExpression(self):

        localctx = KotlinParser.SuperExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_superExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2171
            self.match(KotlinParser.SUPER)
            self.state = 2188
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
            if la_ == 1:
                self.state = 2172
                self.match(KotlinParser.LANGLE)
                self.state = 2176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2173
                    self.match(KotlinParser.NL)
                    self.state = 2178
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2179
                self.type()
                self.state = 2183
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2180
                    self.match(KotlinParser.NL)
                    self.state = 2185
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2186
                self.match(KotlinParser.RANGLE)


            self.state = 2191
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
            if la_ == 1:
                self.state = 2190
                self.match(KotlinParser.LabelReference)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifExpression(self):
            return self.getTypedRuleContext(KotlinParser.IfExpressionContext,0)


        def whenExpression(self):
            return self.getTypedRuleContext(KotlinParser.WhenExpressionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_conditionalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExpression" ):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExpression" ):
                listener.exitConditionalExpression(self)




    def conditionalExpression(self):

        localctx = KotlinParser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_conditionalExpression)
        try:
            self.state = 2195
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2193
                self.ifExpression()
                pass
            elif token in [KotlinParser.WHEN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2194
                self.whenExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(KotlinParser.IF, 0)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def controlStructureBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ControlStructureBodyContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ControlStructureBodyContext,i)


        def SEMICOLON(self):
            return self.getToken(KotlinParser.SEMICOLON, 0)

        def ELSE(self):
            return self.getToken(KotlinParser.ELSE, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_ifExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExpression" ):
                listener.enterIfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExpression" ):
                listener.exitIfExpression(self)




    def ifExpression(self):

        localctx = KotlinParser.IfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_ifExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2197
            self.match(KotlinParser.IF)
            self.state = 2201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2198
                self.match(KotlinParser.NL)
                self.state = 2203
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2204
            self.match(KotlinParser.LPAREN)
            self.state = 2205
            self.expression()
            self.state = 2206
            self.match(KotlinParser.RPAREN)
            self.state = 2210
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,338,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2207
                    self.match(KotlinParser.NL) 
                self.state = 2212
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,338,self._ctx)

            self.state = 2214
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,339,self._ctx)
            if la_ == 1:
                self.state = 2213
                self.controlStructureBody()


            self.state = 2217
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
            if la_ == 1:
                self.state = 2216
                self.match(KotlinParser.SEMICOLON)


            self.state = 2235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,344,self._ctx)
            if la_ == 1:
                self.state = 2222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2219
                    self.match(KotlinParser.NL)
                    self.state = 2224
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2225
                self.match(KotlinParser.ELSE)
                self.state = 2229
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,342,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2226
                        self.match(KotlinParser.NL) 
                    self.state = 2231
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,342,self._ctx)

                self.state = 2233
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,343,self._ctx)
                if la_ == 1:
                    self.state = 2232
                    self.controlStructureBody()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ControlStructureBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_controlStructureBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlStructureBody" ):
                listener.enterControlStructureBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlStructureBody" ):
                listener.exitControlStructureBody(self)




    def controlStructureBody(self):

        localctx = KotlinParser.ControlStructureBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_controlStructureBody)
        try:
            self.state = 2239
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2237
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2238
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhenExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(KotlinParser.WHEN, 0)

        def LCURL(self):
            return self.getToken(KotlinParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def whenEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.WhenEntryContext)
            else:
                return self.getTypedRuleContext(KotlinParser.WhenEntryContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_whenExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenExpression" ):
                listener.enterWhenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenExpression" ):
                listener.exitWhenExpression(self)




    def whenExpression(self):

        localctx = KotlinParser.WhenExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_whenExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2241
            self.match(KotlinParser.WHEN)
            self.state = 2245
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,346,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2242
                    self.match(KotlinParser.NL) 
                self.state = 2247
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,346,self._ctx)

            self.state = 2252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.LPAREN:
                self.state = 2248
                self.match(KotlinParser.LPAREN)
                self.state = 2249
                self.expression()
                self.state = 2250
                self.match(KotlinParser.RPAREN)


            self.state = 2257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2254
                self.match(KotlinParser.NL)
                self.state = 2259
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2260
            self.match(KotlinParser.LCURL)
            self.state = 2264
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,349,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2261
                    self.match(KotlinParser.NL) 
                self.state = 2266
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,349,self._ctx)

            self.state = 2276
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,351,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2267
                    self.whenEntry()
                    self.state = 2271
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,350,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2268
                            self.match(KotlinParser.NL) 
                        self.state = 2273
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,350,self._ctx)
             
                self.state = 2278
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,351,self._ctx)

            self.state = 2282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2279
                self.match(KotlinParser.NL)
                self.state = 2284
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2285
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhenEntryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whenCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.WhenConditionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.WhenConditionContext,i)


        def ARROW(self):
            return self.getToken(KotlinParser.ARROW, 0)

        def controlStructureBody(self):
            return self.getTypedRuleContext(KotlinParser.ControlStructureBodyContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def semi(self):
            return self.getTypedRuleContext(KotlinParser.SemiContext,0)


        def ELSE(self):
            return self.getToken(KotlinParser.ELSE, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_whenEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenEntry" ):
                listener.enterWhenEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenEntry" ):
                listener.exitWhenEntry(self)




    def whenEntry(self):

        localctx = KotlinParser.WhenEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_whenEntry)
        self._la = 0 # Token type
        try:
            self.state = 2339
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.NL, KotlinParser.LPAREN, KotlinParser.LSQUARE, KotlinParser.LCURL, KotlinParser.ADD, KotlinParser.SUB, KotlinParser.INCR, KotlinParser.DECR, KotlinParser.EXCL, KotlinParser.COLONCOLON, KotlinParser.Q_COLONCOLON, KotlinParser.AT, KotlinParser.RETURN_AT, KotlinParser.CONTINUE_AT, KotlinParser.BREAK_AT, KotlinParser.FILE, KotlinParser.IMPORT, KotlinParser.OBJECT, KotlinParser.VAL, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.THIS, KotlinParser.SUPER, KotlinParser.WHERE, KotlinParser.IF, KotlinParser.WHEN, KotlinParser.TRY, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.FOR, KotlinParser.DO, KotlinParser.WHILE, KotlinParser.THROW, KotlinParser.RETURN, KotlinParser.CONTINUE, KotlinParser.BREAK, KotlinParser.IS, KotlinParser.IN, KotlinParser.NOT_IS, KotlinParser.NOT_IN, KotlinParser.OUT, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.GETTER, KotlinParser.SETTER, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.QUOTE_OPEN, KotlinParser.TRIPLE_QUOTE_OPEN, KotlinParser.RealLiteral, KotlinParser.LongLiteral, KotlinParser.IntegerLiteral, KotlinParser.HexLiteral, KotlinParser.BinLiteral, KotlinParser.BooleanLiteral, KotlinParser.NullLiteral, KotlinParser.Identifier, KotlinParser.LabelReference, KotlinParser.LabelDefinition, KotlinParser.CharacterLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2287
                self.whenCondition()
                self.state = 2304
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,355,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2291
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==KotlinParser.NL:
                            self.state = 2288
                            self.match(KotlinParser.NL)
                            self.state = 2293
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2294
                        self.match(KotlinParser.COMMA)
                        self.state = 2298
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,354,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 2295
                                self.match(KotlinParser.NL) 
                            self.state = 2300
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,354,self._ctx)

                        self.state = 2301
                        self.whenCondition() 
                    self.state = 2306
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,355,self._ctx)

                self.state = 2310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2307
                    self.match(KotlinParser.NL)
                    self.state = 2312
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2313
                self.match(KotlinParser.ARROW)
                self.state = 2317
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,357,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2314
                        self.match(KotlinParser.NL) 
                    self.state = 2319
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,357,self._ctx)

                self.state = 2320
                self.controlStructureBody()
                self.state = 2322
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,358,self._ctx)
                if la_ == 1:
                    self.state = 2321
                    self.semi()


                pass
            elif token in [KotlinParser.ELSE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2324
                self.match(KotlinParser.ELSE)
                self.state = 2328
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2325
                    self.match(KotlinParser.NL)
                    self.state = 2330
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2331
                self.match(KotlinParser.ARROW)
                self.state = 2335
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,360,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2332
                        self.match(KotlinParser.NL) 
                    self.state = 2337
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,360,self._ctx)

                self.state = 2338
                self.controlStructureBody()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhenConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def rangeTest(self):
            return self.getTypedRuleContext(KotlinParser.RangeTestContext,0)


        def typeTest(self):
            return self.getTypedRuleContext(KotlinParser.TypeTestContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_whenCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenCondition" ):
                listener.enterWhenCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenCondition" ):
                listener.exitWhenCondition(self)




    def whenCondition(self):

        localctx = KotlinParser.WhenConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_whenCondition)
        try:
            self.state = 2344
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.NL, KotlinParser.LPAREN, KotlinParser.LSQUARE, KotlinParser.LCURL, KotlinParser.ADD, KotlinParser.SUB, KotlinParser.INCR, KotlinParser.DECR, KotlinParser.EXCL, KotlinParser.COLONCOLON, KotlinParser.Q_COLONCOLON, KotlinParser.AT, KotlinParser.RETURN_AT, KotlinParser.CONTINUE_AT, KotlinParser.BREAK_AT, KotlinParser.FILE, KotlinParser.IMPORT, KotlinParser.OBJECT, KotlinParser.VAL, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.THIS, KotlinParser.SUPER, KotlinParser.WHERE, KotlinParser.IF, KotlinParser.WHEN, KotlinParser.TRY, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.FOR, KotlinParser.DO, KotlinParser.WHILE, KotlinParser.THROW, KotlinParser.RETURN, KotlinParser.CONTINUE, KotlinParser.BREAK, KotlinParser.OUT, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.GETTER, KotlinParser.SETTER, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.QUOTE_OPEN, KotlinParser.TRIPLE_QUOTE_OPEN, KotlinParser.RealLiteral, KotlinParser.LongLiteral, KotlinParser.IntegerLiteral, KotlinParser.HexLiteral, KotlinParser.BinLiteral, KotlinParser.BooleanLiteral, KotlinParser.NullLiteral, KotlinParser.Identifier, KotlinParser.LabelReference, KotlinParser.LabelDefinition, KotlinParser.CharacterLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2341
                self.expression()
                pass
            elif token in [KotlinParser.IN, KotlinParser.NOT_IN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2342
                self.rangeTest()
                pass
            elif token in [KotlinParser.IS, KotlinParser.NOT_IS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2343
                self.typeTest()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RangeTestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inOperator(self):
            return self.getTypedRuleContext(KotlinParser.InOperatorContext,0)


        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_rangeTest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeTest" ):
                listener.enterRangeTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeTest" ):
                listener.exitRangeTest(self)




    def rangeTest(self):

        localctx = KotlinParser.RangeTestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_rangeTest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2346
            self.inOperator()
            self.state = 2350
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,363,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2347
                    self.match(KotlinParser.NL) 
                self.state = 2352
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,363,self._ctx)

            self.state = 2353
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeTestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def isOperator(self):
            return self.getTypedRuleContext(KotlinParser.IsOperatorContext,0)


        def type(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeTest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeTest" ):
                listener.enterTypeTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeTest" ):
                listener.exitTypeTest(self)




    def typeTest(self):

        localctx = KotlinParser.TypeTestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_typeTest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2355
            self.isOperator()
            self.state = 2359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2356
                self.match(KotlinParser.NL)
                self.state = 2361
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2362
            self.type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(KotlinParser.TRY, 0)

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def catchBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.CatchBlockContext)
            else:
                return self.getTypedRuleContext(KotlinParser.CatchBlockContext,i)


        def finallyBlock(self):
            return self.getTypedRuleContext(KotlinParser.FinallyBlockContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_tryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryExpression" ):
                listener.enterTryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryExpression" ):
                listener.exitTryExpression(self)




    def tryExpression(self):

        localctx = KotlinParser.TryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_tryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2364
            self.match(KotlinParser.TRY)
            self.state = 2368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2365
                self.match(KotlinParser.NL)
                self.state = 2370
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2371
            self.block()
            self.state = 2381
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,367,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2375
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2372
                        self.match(KotlinParser.NL)
                        self.state = 2377
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2378
                    self.catchBlock() 
                self.state = 2383
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,367,self._ctx)

            self.state = 2391
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,369,self._ctx)
            if la_ == 1:
                self.state = 2387
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2384
                    self.match(KotlinParser.NL)
                    self.state = 2389
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2390
                self.finallyBlock()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CatchBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(KotlinParser.CATCH, 0)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_catchBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchBlock" ):
                listener.enterCatchBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchBlock" ):
                listener.exitCatchBlock(self)




    def catchBlock(self):

        localctx = KotlinParser.CatchBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_catchBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2393
            self.match(KotlinParser.CATCH)
            self.state = 2397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2394
                self.match(KotlinParser.NL)
                self.state = 2399
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2400
            self.match(KotlinParser.LPAREN)
            self.state = 2404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (KotlinParser.FIELD - 93)) | (1 << (KotlinParser.PROPERTY - 93)) | (1 << (KotlinParser.GET - 93)) | (1 << (KotlinParser.SET - 93)) | (1 << (KotlinParser.RECEIVER - 93)) | (1 << (KotlinParser.PARAM - 93)) | (1 << (KotlinParser.SETPARAM - 93)) | (1 << (KotlinParser.DELEGATE - 93)) | (1 << (KotlinParser.LabelReference - 93)))) != 0):
                self.state = 2401
                self.annotations()
                self.state = 2406
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2407
            self.simpleIdentifier()
            self.state = 2408
            self.match(KotlinParser.COLON)
            self.state = 2409
            self.userType()
            self.state = 2410
            self.match(KotlinParser.RPAREN)
            self.state = 2414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2411
                self.match(KotlinParser.NL)
                self.state = 2416
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2417
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FinallyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(KotlinParser.FINALLY, 0)

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_finallyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyBlock" ):
                listener.enterFinallyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyBlock" ):
                listener.exitFinallyBlock(self)




    def finallyBlock(self):

        localctx = KotlinParser.FinallyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_finallyBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2419
            self.match(KotlinParser.FINALLY)
            self.state = 2423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2420
                self.match(KotlinParser.NL)
                self.state = 2425
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2426
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LoopExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forExpression(self):
            return self.getTypedRuleContext(KotlinParser.ForExpressionContext,0)


        def whileExpression(self):
            return self.getTypedRuleContext(KotlinParser.WhileExpressionContext,0)


        def doWhileExpression(self):
            return self.getTypedRuleContext(KotlinParser.DoWhileExpressionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_loopExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopExpression" ):
                listener.enterLoopExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopExpression" ):
                listener.exitLoopExpression(self)




    def loopExpression(self):

        localctx = KotlinParser.LoopExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_loopExpression)
        try:
            self.state = 2431
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2428
                self.forExpression()
                pass
            elif token in [KotlinParser.WHILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2429
                self.whileExpression()
                pass
            elif token in [KotlinParser.DO]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2430
                self.doWhileExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(KotlinParser.FOR, 0)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def IN(self):
            return self.getToken(KotlinParser.IN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def variableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.VariableDeclarationContext,0)


        def multiVariableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.MultiVariableDeclarationContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def controlStructureBody(self):
            return self.getTypedRuleContext(KotlinParser.ControlStructureBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_forExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForExpression" ):
                listener.enterForExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForExpression" ):
                listener.exitForExpression(self)




    def forExpression(self):

        localctx = KotlinParser.ForExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_forExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2433
            self.match(KotlinParser.FOR)
            self.state = 2437
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2434
                self.match(KotlinParser.NL)
                self.state = 2439
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2440
            self.match(KotlinParser.LPAREN)
            self.state = 2444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (KotlinParser.FIELD - 93)) | (1 << (KotlinParser.PROPERTY - 93)) | (1 << (KotlinParser.GET - 93)) | (1 << (KotlinParser.SET - 93)) | (1 << (KotlinParser.RECEIVER - 93)) | (1 << (KotlinParser.PARAM - 93)) | (1 << (KotlinParser.SETPARAM - 93)) | (1 << (KotlinParser.DELEGATE - 93)) | (1 << (KotlinParser.LabelReference - 93)))) != 0):
                self.state = 2441
                self.annotations()
                self.state = 2446
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2449
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.Identifier, KotlinParser.PineIdentifier]:
                self.state = 2447
                self.variableDeclaration()
                pass
            elif token in [KotlinParser.LPAREN]:
                self.state = 2448
                self.multiVariableDeclaration()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2451
            self.match(KotlinParser.IN)
            self.state = 2452
            self.expression()
            self.state = 2453
            self.match(KotlinParser.RPAREN)
            self.state = 2457
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,378,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2454
                    self.match(KotlinParser.NL) 
                self.state = 2459
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,378,self._ctx)

            self.state = 2461
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,379,self._ctx)
            if la_ == 1:
                self.state = 2460
                self.controlStructureBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhileExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(KotlinParser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def controlStructureBody(self):
            return self.getTypedRuleContext(KotlinParser.ControlStructureBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_whileExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileExpression" ):
                listener.enterWhileExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileExpression" ):
                listener.exitWhileExpression(self)




    def whileExpression(self):

        localctx = KotlinParser.WhileExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_whileExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2463
            self.match(KotlinParser.WHILE)
            self.state = 2467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2464
                self.match(KotlinParser.NL)
                self.state = 2469
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2470
            self.match(KotlinParser.LPAREN)
            self.state = 2471
            self.expression()
            self.state = 2472
            self.match(KotlinParser.RPAREN)
            self.state = 2476
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,381,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2473
                    self.match(KotlinParser.NL) 
                self.state = 2478
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,381,self._ctx)

            self.state = 2480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,382,self._ctx)
            if la_ == 1:
                self.state = 2479
                self.controlStructureBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DoWhileExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(KotlinParser.DO, 0)

        def WHILE(self):
            return self.getToken(KotlinParser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def controlStructureBody(self):
            return self.getTypedRuleContext(KotlinParser.ControlStructureBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_doWhileExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileExpression" ):
                listener.enterDoWhileExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileExpression" ):
                listener.exitDoWhileExpression(self)




    def doWhileExpression(self):

        localctx = KotlinParser.DoWhileExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_doWhileExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2482
            self.match(KotlinParser.DO)
            self.state = 2486
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,383,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2483
                    self.match(KotlinParser.NL) 
                self.state = 2488
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,383,self._ctx)

            self.state = 2490
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,384,self._ctx)
            if la_ == 1:
                self.state = 2489
                self.controlStructureBody()


            self.state = 2495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2492
                self.match(KotlinParser.NL)
                self.state = 2497
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2498
            self.match(KotlinParser.WHILE)
            self.state = 2502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2499
                self.match(KotlinParser.NL)
                self.state = 2504
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2505
            self.match(KotlinParser.LPAREN)
            self.state = 2506
            self.expression()
            self.state = 2507
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JumpExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(KotlinParser.THROW, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def RETURN(self):
            return self.getToken(KotlinParser.RETURN, 0)

        def RETURN_AT(self):
            return self.getToken(KotlinParser.RETURN_AT, 0)

        def CONTINUE(self):
            return self.getToken(KotlinParser.CONTINUE, 0)

        def CONTINUE_AT(self):
            return self.getToken(KotlinParser.CONTINUE_AT, 0)

        def BREAK(self):
            return self.getToken(KotlinParser.BREAK, 0)

        def BREAK_AT(self):
            return self.getToken(KotlinParser.BREAK_AT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_jumpExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpExpression" ):
                listener.enterJumpExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpExpression" ):
                listener.exitJumpExpression(self)




    def jumpExpression(self):

        localctx = KotlinParser.JumpExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_jumpExpression)
        self._la = 0 # Token type
        try:
            self.state = 2525
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.THROW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2509
                self.match(KotlinParser.THROW)
                self.state = 2513
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,387,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2510
                        self.match(KotlinParser.NL) 
                    self.state = 2515
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,387,self._ctx)

                self.state = 2516
                self.expression()
                pass
            elif token in [KotlinParser.RETURN_AT, KotlinParser.RETURN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2517
                _la = self._input.LA(1)
                if not(_la==KotlinParser.RETURN_AT or _la==KotlinParser.RETURN):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2519
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,388,self._ctx)
                if la_ == 1:
                    self.state = 2518
                    self.expression()


                pass
            elif token in [KotlinParser.CONTINUE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2521
                self.match(KotlinParser.CONTINUE)
                pass
            elif token in [KotlinParser.CONTINUE_AT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2522
                self.match(KotlinParser.CONTINUE_AT)
                pass
            elif token in [KotlinParser.BREAK]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2523
                self.match(KotlinParser.BREAK)
                pass
            elif token in [KotlinParser.BREAK_AT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2524
                self.match(KotlinParser.BREAK_AT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallableReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLONCOLON(self):
            return self.getToken(KotlinParser.COLONCOLON, 0)

        def Q_COLONCOLON(self):
            return self.getToken(KotlinParser.Q_COLONCOLON, 0)

        def identifier(self):
            return self.getTypedRuleContext(KotlinParser.IdentifierContext,0)


        def CLASS(self):
            return self.getToken(KotlinParser.CLASS, 0)

        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def QUEST(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.QUEST)
            else:
                return self.getToken(KotlinParser.QUEST, i)

        def THIS(self):
            return self.getToken(KotlinParser.THIS, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_callableReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallableReference" ):
                listener.enterCallableReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallableReference" ):
                listener.exitCallableReference(self)




    def callableReference(self):

        localctx = KotlinParser.CallableReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_callableReference)
        self._la = 0 # Token type
        try:
            self.state = 2574
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.NL, KotlinParser.COLONCOLON, KotlinParser.Q_COLONCOLON, KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.OUT, KotlinParser.GETTER, KotlinParser.SETTER, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (KotlinParser.IMPORT - 58)) | (1 << (KotlinParser.CONSTRUCTOR - 58)) | (1 << (KotlinParser.BY - 58)) | (1 << (KotlinParser.COMPANION - 58)) | (1 << (KotlinParser.INIT - 58)) | (1 << (KotlinParser.WHERE - 58)) | (1 << (KotlinParser.CATCH - 58)) | (1 << (KotlinParser.FINALLY - 58)) | (1 << (KotlinParser.OUT - 58)) | (1 << (KotlinParser.GETTER - 58)) | (1 << (KotlinParser.SETTER - 58)) | (1 << (KotlinParser.DYNAMIC - 58)) | (1 << (KotlinParser.PUBLIC - 58)) | (1 << (KotlinParser.PRIVATE - 58)) | (1 << (KotlinParser.PROTECTED - 58)) | (1 << (KotlinParser.INTERNAL - 58)) | (1 << (KotlinParser.ENUM - 58)) | (1 << (KotlinParser.SEALED - 58)) | (1 << (KotlinParser.ANNOTATION - 58)) | (1 << (KotlinParser.DATA - 58)) | (1 << (KotlinParser.INNER - 58)) | (1 << (KotlinParser.TAILREC - 58)) | (1 << (KotlinParser.OPERATOR - 58)) | (1 << (KotlinParser.INLINE - 58)) | (1 << (KotlinParser.INFIX - 58)) | (1 << (KotlinParser.EXTERNAL - 58)) | (1 << (KotlinParser.SUSPEND - 58)) | (1 << (KotlinParser.OVERRIDE - 58)) | (1 << (KotlinParser.ABSTRACT - 58)) | (1 << (KotlinParser.FINAL - 58)))) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & ((1 << (KotlinParser.OPEN - 122)) | (1 << (KotlinParser.CONST - 122)) | (1 << (KotlinParser.LATEINIT - 122)) | (1 << (KotlinParser.VARARG - 122)) | (1 << (KotlinParser.NOINLINE - 122)) | (1 << (KotlinParser.CROSSINLINE - 122)) | (1 << (KotlinParser.REIFIED - 122)) | (1 << (KotlinParser.Identifier - 122)))) != 0):
                    self.state = 2527
                    self.userType()
                    self.state = 2537
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.QUEST:
                        self.state = 2528
                        self.match(KotlinParser.QUEST)
                        self.state = 2532
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,390,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 2529
                                self.match(KotlinParser.NL) 
                            self.state = 2534
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,390,self._ctx)

                        self.state = 2539
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2542
                    self.match(KotlinParser.NL)
                    self.state = 2547
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2548
                _la = self._input.LA(1)
                if not(_la==KotlinParser.COLONCOLON or _la==KotlinParser.Q_COLONCOLON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2549
                    self.match(KotlinParser.NL)
                    self.state = 2554
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2557
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.OUT, KotlinParser.GETTER, KotlinParser.SETTER, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.Identifier]:
                    self.state = 2555
                    self.identifier()
                    pass
                elif token in [KotlinParser.CLASS]:
                    self.state = 2556
                    self.match(KotlinParser.CLASS)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [KotlinParser.THIS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2559
                self.match(KotlinParser.THIS)
                self.state = 2563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2560
                    self.match(KotlinParser.NL)
                    self.state = 2565
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2566
                self.match(KotlinParser.COLONCOLON)
                self.state = 2570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2567
                    self.match(KotlinParser.NL)
                    self.state = 2572
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2573
                self.match(KotlinParser.CLASS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def ADD_ASSIGNMENT(self):
            return self.getToken(KotlinParser.ADD_ASSIGNMENT, 0)

        def SUB_ASSIGNMENT(self):
            return self.getToken(KotlinParser.SUB_ASSIGNMENT, 0)

        def MULT_ASSIGNMENT(self):
            return self.getToken(KotlinParser.MULT_ASSIGNMENT, 0)

        def DIV_ASSIGNMENT(self):
            return self.getToken(KotlinParser.DIV_ASSIGNMENT, 0)

        def MOD_ASSIGNMENT(self):
            return self.getToken(KotlinParser.MOD_ASSIGNMENT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)




    def assignmentOperator(self):

        localctx = KotlinParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2576
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.ASSIGNMENT) | (1 << KotlinParser.ADD_ASSIGNMENT) | (1 << KotlinParser.SUB_ASSIGNMENT) | (1 << KotlinParser.MULT_ASSIGNMENT) | (1 << KotlinParser.DIV_ASSIGNMENT) | (1 << KotlinParser.MOD_ASSIGNMENT))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EqualityOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCL_EQ(self):
            return self.getToken(KotlinParser.EXCL_EQ, 0)

        def EXCL_EQEQ(self):
            return self.getToken(KotlinParser.EXCL_EQEQ, 0)

        def EQEQ(self):
            return self.getToken(KotlinParser.EQEQ, 0)

        def EQEQEQ(self):
            return self.getToken(KotlinParser.EQEQEQ, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_equalityOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityOperation" ):
                listener.enterEqualityOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityOperation" ):
                listener.exitEqualityOperation(self)




    def equalityOperation(self):

        localctx = KotlinParser.EqualityOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_equalityOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2578
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.EXCL_EQ) | (1 << KotlinParser.EXCL_EQEQ) | (1 << KotlinParser.EQEQ) | (1 << KotlinParser.EQEQEQ))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGLE(self):
            return self.getToken(KotlinParser.LANGLE, 0)

        def RANGLE(self):
            return self.getToken(KotlinParser.RANGLE, 0)

        def LE(self):
            return self.getToken(KotlinParser.LE, 0)

        def GE(self):
            return self.getToken(KotlinParser.GE, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)




    def comparisonOperator(self):

        localctx = KotlinParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2580
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.LANGLE) | (1 << KotlinParser.RANGLE) | (1 << KotlinParser.LE) | (1 << KotlinParser.GE))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(KotlinParser.IN, 0)

        def NOT_IN(self):
            return self.getToken(KotlinParser.NOT_IN, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_inOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInOperator" ):
                listener.enterInOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInOperator" ):
                listener.exitInOperator(self)




    def inOperator(self):

        localctx = KotlinParser.InOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_inOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2582
            _la = self._input.LA(1)
            if not(_la==KotlinParser.IN or _la==KotlinParser.NOT_IN):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IsOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(KotlinParser.IS, 0)

        def NOT_IS(self):
            return self.getToken(KotlinParser.NOT_IS, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_isOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsOperator" ):
                listener.enterIsOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsOperator" ):
                listener.exitIsOperator(self)




    def isOperator(self):

        localctx = KotlinParser.IsOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_isOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2584
            _la = self._input.LA(1)
            if not(_la==KotlinParser.IS or _la==KotlinParser.NOT_IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AdditiveOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(KotlinParser.ADD, 0)

        def SUB(self):
            return self.getToken(KotlinParser.SUB, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_additiveOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveOperator" ):
                listener.enterAdditiveOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveOperator" ):
                listener.exitAdditiveOperator(self)




    def additiveOperator(self):

        localctx = KotlinParser.AdditiveOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_additiveOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2586
            _la = self._input.LA(1)
            if not(_la==KotlinParser.ADD or _la==KotlinParser.SUB):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultiplicativeOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MULT(self):
            return self.getToken(KotlinParser.MULT, 0)

        def DIV(self):
            return self.getToken(KotlinParser.DIV, 0)

        def MOD(self):
            return self.getToken(KotlinParser.MOD, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiplicativeOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeOperation" ):
                listener.enterMultiplicativeOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeOperation" ):
                listener.exitMultiplicativeOperation(self)




    def multiplicativeOperation(self):

        localctx = KotlinParser.MultiplicativeOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_multiplicativeOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2588
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.MULT) | (1 << KotlinParser.MOD) | (1 << KotlinParser.DIV))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(KotlinParser.AS, 0)

        def AS_SAFE(self):
            return self.getToken(KotlinParser.AS_SAFE, 0)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeOperation" ):
                listener.enterTypeOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeOperation" ):
                listener.exitTypeOperation(self)




    def typeOperation(self):

        localctx = KotlinParser.TypeOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_typeOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2590
            _la = self._input.LA(1)
            if not(((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & ((1 << (KotlinParser.COLON - 25)) | (1 << (KotlinParser.AS_SAFE - 25)) | (1 << (KotlinParser.AS - 25)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrefixUnaryOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCR(self):
            return self.getToken(KotlinParser.INCR, 0)

        def DECR(self):
            return self.getToken(KotlinParser.DECR, 0)

        def ADD(self):
            return self.getToken(KotlinParser.ADD, 0)

        def SUB(self):
            return self.getToken(KotlinParser.SUB, 0)

        def EXCL(self):
            return self.getToken(KotlinParser.EXCL, 0)

        def annotations(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationsContext,0)


        def labelDefinition(self):
            return self.getTypedRuleContext(KotlinParser.LabelDefinitionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_prefixUnaryOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixUnaryOperation" ):
                listener.enterPrefixUnaryOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixUnaryOperation" ):
                listener.exitPrefixUnaryOperation(self)




    def prefixUnaryOperation(self):

        localctx = KotlinParser.PrefixUnaryOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_prefixUnaryOperation)
        try:
            self.state = 2599
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.INCR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2592
                self.match(KotlinParser.INCR)
                pass
            elif token in [KotlinParser.DECR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2593
                self.match(KotlinParser.DECR)
                pass
            elif token in [KotlinParser.ADD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2594
                self.match(KotlinParser.ADD)
                pass
            elif token in [KotlinParser.SUB]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2595
                self.match(KotlinParser.SUB)
                pass
            elif token in [KotlinParser.EXCL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2596
                self.match(KotlinParser.EXCL)
                pass
            elif token in [KotlinParser.AT, KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.LabelReference]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2597
                self.annotations()
                pass
            elif token in [KotlinParser.LabelDefinition]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2598
                self.labelDefinition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixUnaryOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCR(self):
            return self.getToken(KotlinParser.INCR, 0)

        def DECR(self):
            return self.getToken(KotlinParser.DECR, 0)

        def EXCL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.EXCL)
            else:
                return self.getToken(KotlinParser.EXCL, i)

        def callSuffix(self):
            return self.getTypedRuleContext(KotlinParser.CallSuffixContext,0)


        def arrayAccess(self):
            return self.getTypedRuleContext(KotlinParser.ArrayAccessContext,0)


        def memberAccessOperator(self):
            return self.getTypedRuleContext(KotlinParser.MemberAccessOperatorContext,0)


        def postfixUnaryExpression(self):
            return self.getTypedRuleContext(KotlinParser.PostfixUnaryExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_postfixUnaryOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixUnaryOperation" ):
                listener.enterPostfixUnaryOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixUnaryOperation" ):
                listener.exitPostfixUnaryOperation(self)




    def postfixUnaryOperation(self):

        localctx = KotlinParser.PostfixUnaryOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_postfixUnaryOperation)
        self._la = 0 # Token type
        try:
            self.state = 2616
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,401,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2601
                self.match(KotlinParser.INCR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2602
                self.match(KotlinParser.DECR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2603
                self.match(KotlinParser.EXCL)
                self.state = 2604
                self.match(KotlinParser.EXCL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2605
                self.callSuffix()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2606
                self.arrayAccess()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2607
                    self.match(KotlinParser.NL)
                    self.state = 2612
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2613
                self.memberAccessOperator()
                self.state = 2614
                self.postfixUnaryExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberAccessOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(KotlinParser.DOT, 0)

        def QUEST(self):
            return self.getToken(KotlinParser.QUEST, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_memberAccessOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccessOperator" ):
                listener.enterMemberAccessOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccessOperator" ):
                listener.exitMemberAccessOperator(self)




    def memberAccessOperator(self):

        localctx = KotlinParser.MemberAccessOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_memberAccessOperator)
        try:
            self.state = 2621
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.DOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2618
                self.match(KotlinParser.DOT)
                pass
            elif token in [KotlinParser.QUEST]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2619
                self.match(KotlinParser.QUEST)
                self.state = 2620
                self.match(KotlinParser.DOT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ModifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ModifierContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_modifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierList" ):
                listener.enterModifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierList" ):
                listener.exitModifierList(self)




    def modifierList(self):

        localctx = KotlinParser.ModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_modifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2625 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2625
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [KotlinParser.AT, KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.LabelReference]:
                        self.state = 2623
                        self.annotations()
                        pass
                    elif token in [KotlinParser.IN, KotlinParser.OUT, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED]:
                        self.state = 2624
                        self.modifier()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 2627 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,404,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classModifier(self):
            return self.getTypedRuleContext(KotlinParser.ClassModifierContext,0)


        def memberModifier(self):
            return self.getTypedRuleContext(KotlinParser.MemberModifierContext,0)


        def visibilityModifier(self):
            return self.getTypedRuleContext(KotlinParser.VisibilityModifierContext,0)


        def varianceAnnotation(self):
            return self.getTypedRuleContext(KotlinParser.VarianceAnnotationContext,0)


        def functionModifier(self):
            return self.getTypedRuleContext(KotlinParser.FunctionModifierContext,0)


        def propertyModifier(self):
            return self.getTypedRuleContext(KotlinParser.PropertyModifierContext,0)


        def inheritanceModifier(self):
            return self.getTypedRuleContext(KotlinParser.InheritanceModifierContext,0)


        def parameterModifier(self):
            return self.getTypedRuleContext(KotlinParser.ParameterModifierContext,0)


        def typeParameterModifier(self):
            return self.getTypedRuleContext(KotlinParser.TypeParameterModifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier" ):
                listener.enterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier" ):
                listener.exitModifier(self)




    def modifier(self):

        localctx = KotlinParser.ModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_modifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2638
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER]:
                self.state = 2629
                self.classModifier()
                pass
            elif token in [KotlinParser.OVERRIDE, KotlinParser.LATEINIT]:
                self.state = 2630
                self.memberModifier()
                pass
            elif token in [KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL]:
                self.state = 2631
                self.visibilityModifier()
                pass
            elif token in [KotlinParser.IN, KotlinParser.OUT]:
                self.state = 2632
                self.varianceAnnotation()
                pass
            elif token in [KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND]:
                self.state = 2633
                self.functionModifier()
                pass
            elif token in [KotlinParser.CONST]:
                self.state = 2634
                self.propertyModifier()
                pass
            elif token in [KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN]:
                self.state = 2635
                self.inheritanceModifier()
                pass
            elif token in [KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE]:
                self.state = 2636
                self.parameterModifier()
                pass
            elif token in [KotlinParser.REIFIED]:
                self.state = 2637
                self.typeParameterModifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2643
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,406,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2640
                    self.match(KotlinParser.NL) 
                self.state = 2645
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,406,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(KotlinParser.ENUM, 0)

        def SEALED(self):
            return self.getToken(KotlinParser.SEALED, 0)

        def ANNOTATION(self):
            return self.getToken(KotlinParser.ANNOTATION, 0)

        def DATA(self):
            return self.getToken(KotlinParser.DATA, 0)

        def INNER(self):
            return self.getToken(KotlinParser.INNER, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_classModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModifier" ):
                listener.enterClassModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModifier" ):
                listener.exitClassModifier(self)




    def classModifier(self):

        localctx = KotlinParser.ClassModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_classModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2646
            _la = self._input.LA(1)
            if not(((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (KotlinParser.ENUM - 108)) | (1 << (KotlinParser.SEALED - 108)) | (1 << (KotlinParser.ANNOTATION - 108)) | (1 << (KotlinParser.DATA - 108)) | (1 << (KotlinParser.INNER - 108)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVERRIDE(self):
            return self.getToken(KotlinParser.OVERRIDE, 0)

        def LATEINIT(self):
            return self.getToken(KotlinParser.LATEINIT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_memberModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberModifier" ):
                listener.enterMemberModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberModifier" ):
                listener.exitMemberModifier(self)




    def memberModifier(self):

        localctx = KotlinParser.MemberModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_memberModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2648
            _la = self._input.LA(1)
            if not(_la==KotlinParser.OVERRIDE or _la==KotlinParser.LATEINIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VisibilityModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLIC(self):
            return self.getToken(KotlinParser.PUBLIC, 0)

        def PRIVATE(self):
            return self.getToken(KotlinParser.PRIVATE, 0)

        def INTERNAL(self):
            return self.getToken(KotlinParser.INTERNAL, 0)

        def PROTECTED(self):
            return self.getToken(KotlinParser.PROTECTED, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_visibilityModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibilityModifier" ):
                listener.enterVisibilityModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibilityModifier" ):
                listener.exitVisibilityModifier(self)




    def visibilityModifier(self):

        localctx = KotlinParser.VisibilityModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_visibilityModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2650
            _la = self._input.LA(1)
            if not(((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (KotlinParser.PUBLIC - 104)) | (1 << (KotlinParser.PRIVATE - 104)) | (1 << (KotlinParser.PROTECTED - 104)) | (1 << (KotlinParser.INTERNAL - 104)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarianceAnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(KotlinParser.IN, 0)

        def OUT(self):
            return self.getToken(KotlinParser.OUT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_varianceAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarianceAnnotation" ):
                listener.enterVarianceAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarianceAnnotation" ):
                listener.exitVarianceAnnotation(self)




    def varianceAnnotation(self):

        localctx = KotlinParser.VarianceAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_varianceAnnotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2652
            _la = self._input.LA(1)
            if not(_la==KotlinParser.IN or _la==KotlinParser.OUT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAILREC(self):
            return self.getToken(KotlinParser.TAILREC, 0)

        def OPERATOR(self):
            return self.getToken(KotlinParser.OPERATOR, 0)

        def INFIX(self):
            return self.getToken(KotlinParser.INFIX, 0)

        def INLINE(self):
            return self.getToken(KotlinParser.INLINE, 0)

        def EXTERNAL(self):
            return self.getToken(KotlinParser.EXTERNAL, 0)

        def SUSPEND(self):
            return self.getToken(KotlinParser.SUSPEND, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionModifier" ):
                listener.enterFunctionModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionModifier" ):
                listener.exitFunctionModifier(self)




    def functionModifier(self):

        localctx = KotlinParser.FunctionModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_functionModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2654
            _la = self._input.LA(1)
            if not(((((_la - 113)) & ~0x3f) == 0 and ((1 << (_la - 113)) & ((1 << (KotlinParser.TAILREC - 113)) | (1 << (KotlinParser.OPERATOR - 113)) | (1 << (KotlinParser.INLINE - 113)) | (1 << (KotlinParser.INFIX - 113)) | (1 << (KotlinParser.EXTERNAL - 113)) | (1 << (KotlinParser.SUSPEND - 113)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertyModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(KotlinParser.CONST, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_propertyModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyModifier" ):
                listener.enterPropertyModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyModifier" ):
                listener.exitPropertyModifier(self)




    def propertyModifier(self):

        localctx = KotlinParser.PropertyModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_propertyModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2656
            self.match(KotlinParser.CONST)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InheritanceModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABSTRACT(self):
            return self.getToken(KotlinParser.ABSTRACT, 0)

        def FINAL(self):
            return self.getToken(KotlinParser.FINAL, 0)

        def OPEN(self):
            return self.getToken(KotlinParser.OPEN, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_inheritanceModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInheritanceModifier" ):
                listener.enterInheritanceModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInheritanceModifier" ):
                listener.exitInheritanceModifier(self)




    def inheritanceModifier(self):

        localctx = KotlinParser.InheritanceModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_inheritanceModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2658
            _la = self._input.LA(1)
            if not(((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & ((1 << (KotlinParser.ABSTRACT - 120)) | (1 << (KotlinParser.FINAL - 120)) | (1 << (KotlinParser.OPEN - 120)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARARG(self):
            return self.getToken(KotlinParser.VARARG, 0)

        def NOINLINE(self):
            return self.getToken(KotlinParser.NOINLINE, 0)

        def CROSSINLINE(self):
            return self.getToken(KotlinParser.CROSSINLINE, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_parameterModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterModifier" ):
                listener.enterParameterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterModifier" ):
                listener.exitParameterModifier(self)




    def parameterModifier(self):

        localctx = KotlinParser.ParameterModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_parameterModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2660
            _la = self._input.LA(1)
            if not(((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & ((1 << (KotlinParser.VARARG - 125)) | (1 << (KotlinParser.NOINLINE - 125)) | (1 << (KotlinParser.CROSSINLINE - 125)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeParameterModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REIFIED(self):
            return self.getToken(KotlinParser.REIFIED, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeParameterModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterModifier" ):
                listener.enterTypeParameterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterModifier" ):
                listener.exitTypeParameterModifier(self)




    def typeParameterModifier(self):

        localctx = KotlinParser.TypeParameterModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_typeParameterModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2662
            self.match(KotlinParser.REIFIED)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabelDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LabelDefinition(self):
            return self.getToken(KotlinParser.LabelDefinition, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_labelDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelDefinition" ):
                listener.enterLabelDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelDefinition" ):
                listener.exitLabelDefinition(self)




    def labelDefinition(self):

        localctx = KotlinParser.LabelDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_labelDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2664
            self.match(KotlinParser.LabelDefinition)
            self.state = 2668
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,407,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2665
                    self.match(KotlinParser.NL) 
                self.state = 2670
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,407,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationContext,0)


        def annotationList(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_annotations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotations" ):
                listener.enterAnnotations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotations" ):
                listener.exitAnnotations(self)




    def annotations(self):

        localctx = KotlinParser.AnnotationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_annotations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2673
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,408,self._ctx)
            if la_ == 1:
                self.state = 2671
                self.annotation()
                pass

            elif la_ == 2:
                self.state = 2672
                self.annotationList()
                pass


            self.state = 2678
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,409,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2675
                    self.match(KotlinParser.NL) 
                self.state = 2680
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,409,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationUseSiteTarget(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationUseSiteTargetContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def unescapedAnnotation(self):
            return self.getTypedRuleContext(KotlinParser.UnescapedAnnotationContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def LabelReference(self):
            return self.getToken(KotlinParser.LabelReference, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.DOT)
            else:
                return self.getToken(KotlinParser.DOT, i)

        def simpleIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.SimpleIdentifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,i)


        def typeArguments(self):
            return self.getTypedRuleContext(KotlinParser.TypeArgumentsContext,0)


        def valueArguments(self):
            return self.getTypedRuleContext(KotlinParser.ValueArgumentsContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)




    def annotation(self):

        localctx = KotlinParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_annotation)
        self._la = 0 # Token type
        try:
            self.state = 2735
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2681
                self.annotationUseSiteTarget()
                self.state = 2685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2682
                    self.match(KotlinParser.NL)
                    self.state = 2687
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2688
                self.match(KotlinParser.COLON)
                self.state = 2692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2689
                    self.match(KotlinParser.NL)
                    self.state = 2694
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2695
                self.unescapedAnnotation()
                pass
            elif token in [KotlinParser.LabelReference]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2697
                self.match(KotlinParser.LabelReference)
                self.state = 2714
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,414,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2701
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==KotlinParser.NL:
                            self.state = 2698
                            self.match(KotlinParser.NL)
                            self.state = 2703
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2704
                        self.match(KotlinParser.DOT)
                        self.state = 2708
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==KotlinParser.NL:
                            self.state = 2705
                            self.match(KotlinParser.NL)
                            self.state = 2710
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2711
                        self.simpleIdentifier() 
                    self.state = 2716
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,414,self._ctx)

                self.state = 2724
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,416,self._ctx)
                if la_ == 1:
                    self.state = 2720
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2717
                        self.match(KotlinParser.NL)
                        self.state = 2722
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2723
                    self.typeArguments()


                self.state = 2733
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,418,self._ctx)
                if la_ == 1:
                    self.state = 2729
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2726
                        self.match(KotlinParser.NL)
                        self.state = 2731
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2732
                    self.valueArguments()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationUseSiteTarget(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationUseSiteTargetContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def LSQUARE(self):
            return self.getToken(KotlinParser.LSQUARE, 0)

        def RSQUARE(self):
            return self.getToken(KotlinParser.RSQUARE, 0)

        def unescapedAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.UnescapedAnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.UnescapedAnnotationContext,i)


        def AT(self):
            return self.getToken(KotlinParser.AT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_annotationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationList" ):
                listener.enterAnnotationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationList" ):
                listener.exitAnnotationList(self)




    def annotationList(self):

        localctx = KotlinParser.AnnotationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_annotationList)
        self._la = 0 # Token type
        try:
            self.state = 2756
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2737
                self.annotationUseSiteTarget()
                self.state = 2738
                self.match(KotlinParser.COLON)
                self.state = 2739
                self.match(KotlinParser.LSQUARE)
                self.state = 2741 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2740
                    self.unescapedAnnotation()
                    self.state = 2743 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (KotlinParser.IMPORT - 58)) | (1 << (KotlinParser.CONSTRUCTOR - 58)) | (1 << (KotlinParser.BY - 58)) | (1 << (KotlinParser.COMPANION - 58)) | (1 << (KotlinParser.INIT - 58)) | (1 << (KotlinParser.WHERE - 58)) | (1 << (KotlinParser.CATCH - 58)) | (1 << (KotlinParser.FINALLY - 58)) | (1 << (KotlinParser.OUT - 58)) | (1 << (KotlinParser.GETTER - 58)) | (1 << (KotlinParser.SETTER - 58)) | (1 << (KotlinParser.DYNAMIC - 58)) | (1 << (KotlinParser.PUBLIC - 58)) | (1 << (KotlinParser.PRIVATE - 58)) | (1 << (KotlinParser.PROTECTED - 58)) | (1 << (KotlinParser.INTERNAL - 58)) | (1 << (KotlinParser.ENUM - 58)) | (1 << (KotlinParser.SEALED - 58)) | (1 << (KotlinParser.ANNOTATION - 58)) | (1 << (KotlinParser.DATA - 58)) | (1 << (KotlinParser.INNER - 58)) | (1 << (KotlinParser.TAILREC - 58)) | (1 << (KotlinParser.OPERATOR - 58)) | (1 << (KotlinParser.INLINE - 58)) | (1 << (KotlinParser.INFIX - 58)) | (1 << (KotlinParser.EXTERNAL - 58)) | (1 << (KotlinParser.SUSPEND - 58)) | (1 << (KotlinParser.OVERRIDE - 58)) | (1 << (KotlinParser.ABSTRACT - 58)) | (1 << (KotlinParser.FINAL - 58)))) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & ((1 << (KotlinParser.OPEN - 122)) | (1 << (KotlinParser.CONST - 122)) | (1 << (KotlinParser.LATEINIT - 122)) | (1 << (KotlinParser.VARARG - 122)) | (1 << (KotlinParser.NOINLINE - 122)) | (1 << (KotlinParser.CROSSINLINE - 122)) | (1 << (KotlinParser.REIFIED - 122)) | (1 << (KotlinParser.Identifier - 122)))) != 0)):
                        break

                self.state = 2745
                self.match(KotlinParser.RSQUARE)
                pass
            elif token in [KotlinParser.AT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2747
                self.match(KotlinParser.AT)
                self.state = 2748
                self.match(KotlinParser.LSQUARE)
                self.state = 2750 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2749
                    self.unescapedAnnotation()
                    self.state = 2752 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (KotlinParser.IMPORT - 58)) | (1 << (KotlinParser.CONSTRUCTOR - 58)) | (1 << (KotlinParser.BY - 58)) | (1 << (KotlinParser.COMPANION - 58)) | (1 << (KotlinParser.INIT - 58)) | (1 << (KotlinParser.WHERE - 58)) | (1 << (KotlinParser.CATCH - 58)) | (1 << (KotlinParser.FINALLY - 58)) | (1 << (KotlinParser.OUT - 58)) | (1 << (KotlinParser.GETTER - 58)) | (1 << (KotlinParser.SETTER - 58)) | (1 << (KotlinParser.DYNAMIC - 58)) | (1 << (KotlinParser.PUBLIC - 58)) | (1 << (KotlinParser.PRIVATE - 58)) | (1 << (KotlinParser.PROTECTED - 58)) | (1 << (KotlinParser.INTERNAL - 58)) | (1 << (KotlinParser.ENUM - 58)) | (1 << (KotlinParser.SEALED - 58)) | (1 << (KotlinParser.ANNOTATION - 58)) | (1 << (KotlinParser.DATA - 58)) | (1 << (KotlinParser.INNER - 58)) | (1 << (KotlinParser.TAILREC - 58)) | (1 << (KotlinParser.OPERATOR - 58)) | (1 << (KotlinParser.INLINE - 58)) | (1 << (KotlinParser.INFIX - 58)) | (1 << (KotlinParser.EXTERNAL - 58)) | (1 << (KotlinParser.SUSPEND - 58)) | (1 << (KotlinParser.OVERRIDE - 58)) | (1 << (KotlinParser.ABSTRACT - 58)) | (1 << (KotlinParser.FINAL - 58)))) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & ((1 << (KotlinParser.OPEN - 122)) | (1 << (KotlinParser.CONST - 122)) | (1 << (KotlinParser.LATEINIT - 122)) | (1 << (KotlinParser.VARARG - 122)) | (1 << (KotlinParser.NOINLINE - 122)) | (1 << (KotlinParser.CROSSINLINE - 122)) | (1 << (KotlinParser.REIFIED - 122)) | (1 << (KotlinParser.Identifier - 122)))) != 0)):
                        break

                self.state = 2754
                self.match(KotlinParser.RSQUARE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationUseSiteTargetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIELD(self):
            return self.getToken(KotlinParser.FIELD, 0)

        def FILE(self):
            return self.getToken(KotlinParser.FILE, 0)

        def PROPERTY(self):
            return self.getToken(KotlinParser.PROPERTY, 0)

        def GET(self):
            return self.getToken(KotlinParser.GET, 0)

        def SET(self):
            return self.getToken(KotlinParser.SET, 0)

        def RECEIVER(self):
            return self.getToken(KotlinParser.RECEIVER, 0)

        def PARAM(self):
            return self.getToken(KotlinParser.PARAM, 0)

        def SETPARAM(self):
            return self.getToken(KotlinParser.SETPARAM, 0)

        def DELEGATE(self):
            return self.getToken(KotlinParser.DELEGATE, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_annotationUseSiteTarget

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationUseSiteTarget" ):
                listener.enterAnnotationUseSiteTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationUseSiteTarget" ):
                listener.exitAnnotationUseSiteTarget(self)




    def annotationUseSiteTarget(self):

        localctx = KotlinParser.AnnotationUseSiteTargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_annotationUseSiteTarget)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2758
            _la = self._input.LA(1)
            if not(((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & ((1 << (KotlinParser.FILE - 56)) | (1 << (KotlinParser.FIELD - 56)) | (1 << (KotlinParser.PROPERTY - 56)) | (1 << (KotlinParser.GET - 56)) | (1 << (KotlinParser.SET - 56)) | (1 << (KotlinParser.RECEIVER - 56)) | (1 << (KotlinParser.PARAM - 56)) | (1 << (KotlinParser.SETPARAM - 56)) | (1 << (KotlinParser.DELEGATE - 56)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnescapedAnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(KotlinParser.IdentifierContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(KotlinParser.TypeArgumentsContext,0)


        def valueArguments(self):
            return self.getTypedRuleContext(KotlinParser.ValueArgumentsContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_unescapedAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnescapedAnnotation" ):
                listener.enterUnescapedAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnescapedAnnotation" ):
                listener.exitUnescapedAnnotation(self)




    def unescapedAnnotation(self):

        localctx = KotlinParser.UnescapedAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_unescapedAnnotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2760
            self.identifier()
            self.state = 2762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.LANGLE:
                self.state = 2761
                self.typeArguments()


            self.state = 2765
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,424,self._ctx)
            if la_ == 1:
                self.state = 2764
                self.valueArguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.SimpleIdentifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.DOT)
            else:
                return self.getToken(KotlinParser.DOT, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = KotlinParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2767
            self.simpleIdentifier()
            self.state = 2778
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,426,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2771
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2768
                        self.match(KotlinParser.NL)
                        self.state = 2773
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2774
                    self.match(KotlinParser.DOT)
                    self.state = 2775
                    self.simpleIdentifier() 
                self.state = 2780
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,426,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(KotlinParser.Identifier, 0)

        def ABSTRACT(self):
            return self.getToken(KotlinParser.ABSTRACT, 0)

        def ANNOTATION(self):
            return self.getToken(KotlinParser.ANNOTATION, 0)

        def BY(self):
            return self.getToken(KotlinParser.BY, 0)

        def CATCH(self):
            return self.getToken(KotlinParser.CATCH, 0)

        def COMPANION(self):
            return self.getToken(KotlinParser.COMPANION, 0)

        def CONSTRUCTOR(self):
            return self.getToken(KotlinParser.CONSTRUCTOR, 0)

        def CROSSINLINE(self):
            return self.getToken(KotlinParser.CROSSINLINE, 0)

        def DATA(self):
            return self.getToken(KotlinParser.DATA, 0)

        def DYNAMIC(self):
            return self.getToken(KotlinParser.DYNAMIC, 0)

        def ENUM(self):
            return self.getToken(KotlinParser.ENUM, 0)

        def EXTERNAL(self):
            return self.getToken(KotlinParser.EXTERNAL, 0)

        def FINAL(self):
            return self.getToken(KotlinParser.FINAL, 0)

        def FINALLY(self):
            return self.getToken(KotlinParser.FINALLY, 0)

        def GETTER(self):
            return self.getToken(KotlinParser.GETTER, 0)

        def IMPORT(self):
            return self.getToken(KotlinParser.IMPORT, 0)

        def INFIX(self):
            return self.getToken(KotlinParser.INFIX, 0)

        def INIT(self):
            return self.getToken(KotlinParser.INIT, 0)

        def INLINE(self):
            return self.getToken(KotlinParser.INLINE, 0)

        def INNER(self):
            return self.getToken(KotlinParser.INNER, 0)

        def INTERNAL(self):
            return self.getToken(KotlinParser.INTERNAL, 0)

        def LATEINIT(self):
            return self.getToken(KotlinParser.LATEINIT, 0)

        def NOINLINE(self):
            return self.getToken(KotlinParser.NOINLINE, 0)

        def OPEN(self):
            return self.getToken(KotlinParser.OPEN, 0)

        def OPERATOR(self):
            return self.getToken(KotlinParser.OPERATOR, 0)

        def OUT(self):
            return self.getToken(KotlinParser.OUT, 0)

        def OVERRIDE(self):
            return self.getToken(KotlinParser.OVERRIDE, 0)

        def PRIVATE(self):
            return self.getToken(KotlinParser.PRIVATE, 0)

        def PROTECTED(self):
            return self.getToken(KotlinParser.PROTECTED, 0)

        def PUBLIC(self):
            return self.getToken(KotlinParser.PUBLIC, 0)

        def REIFIED(self):
            return self.getToken(KotlinParser.REIFIED, 0)

        def SEALED(self):
            return self.getToken(KotlinParser.SEALED, 0)

        def TAILREC(self):
            return self.getToken(KotlinParser.TAILREC, 0)

        def SETTER(self):
            return self.getToken(KotlinParser.SETTER, 0)

        def VARARG(self):
            return self.getToken(KotlinParser.VARARG, 0)

        def WHERE(self):
            return self.getToken(KotlinParser.WHERE, 0)

        def CONST(self):
            return self.getToken(KotlinParser.CONST, 0)

        def SUSPEND(self):
            return self.getToken(KotlinParser.SUSPEND, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_simpleIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIdentifier" ):
                listener.enterSimpleIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIdentifier" ):
                listener.exitSimpleIdentifier(self)




    def simpleIdentifier(self):

        localctx = KotlinParser.SimpleIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_simpleIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2781
            _la = self._input.LA(1)
            if not(((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (KotlinParser.IMPORT - 58)) | (1 << (KotlinParser.CONSTRUCTOR - 58)) | (1 << (KotlinParser.BY - 58)) | (1 << (KotlinParser.COMPANION - 58)) | (1 << (KotlinParser.INIT - 58)) | (1 << (KotlinParser.WHERE - 58)) | (1 << (KotlinParser.CATCH - 58)) | (1 << (KotlinParser.FINALLY - 58)) | (1 << (KotlinParser.OUT - 58)) | (1 << (KotlinParser.GETTER - 58)) | (1 << (KotlinParser.SETTER - 58)) | (1 << (KotlinParser.DYNAMIC - 58)) | (1 << (KotlinParser.PUBLIC - 58)) | (1 << (KotlinParser.PRIVATE - 58)) | (1 << (KotlinParser.PROTECTED - 58)) | (1 << (KotlinParser.INTERNAL - 58)) | (1 << (KotlinParser.ENUM - 58)) | (1 << (KotlinParser.SEALED - 58)) | (1 << (KotlinParser.ANNOTATION - 58)) | (1 << (KotlinParser.DATA - 58)) | (1 << (KotlinParser.INNER - 58)) | (1 << (KotlinParser.TAILREC - 58)) | (1 << (KotlinParser.OPERATOR - 58)) | (1 << (KotlinParser.INLINE - 58)) | (1 << (KotlinParser.INFIX - 58)) | (1 << (KotlinParser.EXTERNAL - 58)) | (1 << (KotlinParser.SUSPEND - 58)) | (1 << (KotlinParser.OVERRIDE - 58)) | (1 << (KotlinParser.ABSTRACT - 58)) | (1 << (KotlinParser.FINAL - 58)))) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & ((1 << (KotlinParser.OPEN - 122)) | (1 << (KotlinParser.CONST - 122)) | (1 << (KotlinParser.LATEINIT - 122)) | (1 << (KotlinParser.VARARG - 122)) | (1 << (KotlinParser.NOINLINE - 122)) | (1 << (KotlinParser.CROSSINLINE - 122)) | (1 << (KotlinParser.REIFIED - 122)) | (1 << (KotlinParser.Identifier - 122)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SemiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def SEMICOLON(self):
            return self.getToken(KotlinParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_semi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSemi" ):
                listener.enterSemi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSemi" ):
                listener.exitSemi(self)




    def semi(self):

        localctx = KotlinParser.SemiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_semi)
        self._la = 0 # Token type
        try:
            self.state = 2801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,430,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2784 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2783
                        self.match(KotlinParser.NL)

                    else:
                        raise NoViableAltException(self)
                    self.state = 2786 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,427,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2788
                    self.match(KotlinParser.NL)
                    self.state = 2793
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2794
                self.match(KotlinParser.SEMICOLON)
                self.state = 2798
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,429,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2795
                        self.match(KotlinParser.NL) 
                    self.state = 2800
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,429,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnysemiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self):
            return self.getToken(KotlinParser.NL, 0)

        def SEMICOLON(self):
            return self.getToken(KotlinParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_anysemi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnysemi" ):
                listener.enterAnysemi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnysemi" ):
                listener.exitAnysemi(self)




    def anysemi(self):

        localctx = KotlinParser.AnysemiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_anysemi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2803
            _la = self._input.LA(1)
            if not(_la==KotlinParser.NL or _la==KotlinParser.SEMICOLON):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





